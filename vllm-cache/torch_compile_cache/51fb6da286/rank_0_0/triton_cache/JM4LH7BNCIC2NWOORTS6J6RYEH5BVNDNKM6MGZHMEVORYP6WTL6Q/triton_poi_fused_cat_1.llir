; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define amdgpu_kernel void @triton_poi_fused_cat_1(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, ptr addrspace(1) inreg nocapture writeonly %3, i32 inreg %4, ptr addrspace(1) inreg nocapture readnone %5) local_unnamed_addr #0 !dbg !4 {
  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %8 = shl i32 %7, 10, !dbg !8
  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !9
  %10 = shl i32 %9, 2, !dbg !9
  %11 = and i32 %10, 1020, !dbg !9
  %12 = or disjoint i32 %11, %8, !dbg !10
  %13 = sdiv i32 %12, 128, !dbg !11
  %14 = mul i32 %13, 128, !dbg !12
  %.decomposed = sub i32 %12, %14, !dbg !12
  %15 = srem i32 %13, 32, !dbg !13
  %16 = sdiv i32 %12, 4096, !dbg !14
  %17 = sext i32 %.decomposed to i64, !dbg !15
  %18 = icmp slt i32 %.decomposed, 64, !dbg !15
  %19 = shl nsw i32 %15, 7, !dbg !16
  %20 = mul i32 %16, 6144, !dbg !17
  %21 = add i32 %19, %20, !dbg !18
  %22 = add i32 %21, %.decomposed, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = insertelement <4 x i1> poison, i1 %18, i64 0, !dbg !21
  %26 = shufflevector <4 x i1> %25, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !21
  %27 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %24, i32 16, <4 x i1> %26, <4 x bfloat> zeroinitializer), !dbg !21
  %bc = bitcast <4 x bfloat> %27 to <4 x i16>, !dbg !22
  %28 = shufflevector <4 x i16> %bc, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !22
  %29 = zext <2 x i16> %28 to <2 x i32>, !dbg !22
  %30 = shl nuw <2 x i32> %29, splat (i32 16), !dbg !22
  %31 = shufflevector <4 x i16> %bc, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !22
  %32 = zext <2 x i16> %31 to <2 x i32>, !dbg !22
  %33 = shl nuw <2 x i32> %32, splat (i32 16), !dbg !22
  %34 = sext i32 %16 to i64, !dbg !23
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !23
  %36 = insertelement <1 x i1> poison, i1 %18, i64 0, !dbg !24
  %37 = tail call <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) %35, i32 8, <1 x i1> %36, <1 x i64> zeroinitializer), !dbg !24
  %38 = extractelement <1 x i64> %37, i64 0, !dbg !24
  %39 = lshr i64 %38, 46, !dbg !25
  %40 = and i64 %39, 131072, !dbg !25
  %41 = add i64 %40, %38, !dbg !25
  %42 = shl i64 %41, 7, !dbg !26
  %43 = getelementptr bfloat, ptr addrspace(1) %2, i64 %42, !dbg !27
  %44 = getelementptr bfloat, ptr addrspace(1) %43, i64 %17, !dbg !27
  %45 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %44, i32 16, <4 x i1> %26, <4 x bfloat> zeroinitializer), !dbg !28
  %bc4 = bitcast <4 x bfloat> %45 to <4 x i16>, !dbg !29
  %46 = shufflevector <4 x i16> %bc4, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !29
  %47 = zext <2 x i16> %46 to <2 x i32>, !dbg !29
  %48 = shl nuw <2 x i32> %47, splat (i32 16), !dbg !29
  %49 = shufflevector <4 x i16> %bc4, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !29
  %50 = zext <2 x i16> %49 to <2 x i32>, !dbg !29
  %51 = shl nuw <2 x i32> %50, splat (i32 16), !dbg !29
  %52 = or disjoint i32 %19, 64, !dbg !30
  %53 = add i32 %52, %20, !dbg !31
  %54 = add i32 %53, %.decomposed, !dbg !32
  %55 = sext i32 %54 to i64, !dbg !33
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %55, !dbg !33
  %57 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %56, i32 16, <4 x i1> %26, <4 x bfloat> zeroinitializer), !dbg !34
  %bc8 = bitcast <4 x bfloat> %57 to <4 x i16>, !dbg !35
  %58 = shufflevector <4 x i16> %bc8, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !35
  %59 = zext <2 x i16> %58 to <2 x i32>, !dbg !35
  %60 = shl nuw <2 x i32> %59, splat (i32 16), !dbg !35
  %61 = shufflevector <4 x i16> %bc8, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !35
  %62 = zext <2 x i16> %61 to <2 x i32>, !dbg !35
  %63 = shl nuw <2 x i32> %62, splat (i32 16), !dbg !35
  %64 = or disjoint i64 %42, 64, !dbg !36
  %65 = getelementptr bfloat, ptr addrspace(1) %2, i64 %64, !dbg !37
  %66 = getelementptr bfloat, ptr addrspace(1) %65, i64 %17, !dbg !37
  %67 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %66, i32 16, <4 x i1> %26, <4 x bfloat> zeroinitializer), !dbg !38
  %bc12 = bitcast <4 x bfloat> %67 to <4 x i16>, !dbg !39
  %68 = shufflevector <4 x i16> %bc12, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !39
  %69 = zext <2 x i16> %68 to <2 x i32>, !dbg !39
  %70 = shl nuw <2 x i32> %69, splat (i32 16), !dbg !39
  %71 = shufflevector <4 x i16> %bc12, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !39
  %72 = zext <2 x i16> %71 to <2 x i32>, !dbg !39
  %73 = shl nuw <2 x i32> %72, splat (i32 16), !dbg !39
  %74 = icmp sgt i32 %.decomposed, 63, !dbg !40
  %75 = add nsw i32 %.decomposed, -64, !dbg !41
  %76 = add i32 %53, %75, !dbg !42
  %77 = sext i32 %76 to i64, !dbg !43
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !43
  %79 = insertelement <4 x i1> poison, i1 %74, i64 0, !dbg !44
  %80 = shufflevector <4 x i1> %79, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !44
  %81 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %78, i32 16, <4 x i1> %80, <4 x bfloat> zeroinitializer), !dbg !44
  %bc16 = bitcast <4 x bfloat> %81 to <4 x i16>, !dbg !45
  %82 = shufflevector <4 x i16> %bc16, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !45
  %83 = zext <2 x i16> %82 to <2 x i32>, !dbg !45
  %84 = shl nuw <2 x i32> %83, splat (i32 16), !dbg !45
  %85 = shufflevector <4 x i16> %bc16, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !45
  %86 = zext <2 x i16> %85 to <2 x i32>, !dbg !45
  %87 = shl nuw <2 x i32> %86, splat (i32 16), !dbg !45
  %88 = insertelement <1 x i1> poison, i1 %74, i64 0, !dbg !46
  %89 = tail call <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) %35, i32 8, <1 x i1> %88, <1 x i64> zeroinitializer), !dbg !46
  %90 = extractelement <1 x i64> %89, i64 0, !dbg !46
  %91 = lshr i64 %90, 46, !dbg !47
  %92 = and i64 %91, 131072, !dbg !47
  %93 = add i64 %92, %90, !dbg !47
  %94 = shl i64 %93, 7, !dbg !48
  %95 = sext i32 %75 to i64, !dbg !49
  %96 = getelementptr bfloat, ptr addrspace(1) %2, i64 %94, !dbg !50
  %97 = getelementptr bfloat, ptr addrspace(1) %96, i64 %95, !dbg !50
  %98 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %97, i32 16, <4 x i1> %80, <4 x bfloat> zeroinitializer), !dbg !51
  %bc20 = bitcast <4 x bfloat> %98 to <4 x i16>, !dbg !52
  %99 = shufflevector <4 x i16> %bc20, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !52
  %100 = zext <2 x i16> %99 to <2 x i32>, !dbg !52
  %101 = shl nuw <2 x i32> %100, splat (i32 16), !dbg !52
  %102 = shufflevector <4 x i16> %bc20, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !52
  %103 = zext <2 x i16> %102 to <2 x i32>, !dbg !52
  %104 = shl nuw <2 x i32> %103, splat (i32 16), !dbg !52
  %105 = add i32 %21, %75, !dbg !53
  %106 = sext i32 %105 to i64, !dbg !54
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !54
  %108 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %107, i32 16, <4 x i1> %80, <4 x bfloat> zeroinitializer), !dbg !55
  %bc24 = bitcast <4 x bfloat> %108 to <4 x i16>, !dbg !56
  %109 = shufflevector <4 x i16> %bc24, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !56
  %110 = zext <2 x i16> %109 to <2 x i32>, !dbg !56
  %111 = shl nuw <2 x i32> %110, splat (i32 16), !dbg !56
  %112 = shufflevector <4 x i16> %bc24, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !56
  %113 = zext <2 x i16> %112 to <2 x i32>, !dbg !56
  %114 = shl nuw <2 x i32> %113, splat (i32 16), !dbg !56
  %115 = or disjoint i64 %94, 64, !dbg !57
  %116 = getelementptr bfloat, ptr addrspace(1) %2, i64 %115, !dbg !58
  %117 = getelementptr bfloat, ptr addrspace(1) %116, i64 %95, !dbg !58
  %118 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %117, i32 16, <4 x i1> %80, <4 x bfloat> zeroinitializer), !dbg !59
  %bc28 = bitcast <4 x bfloat> %118 to <4 x i16>, !dbg !60
  %119 = shufflevector <4 x i16> %bc28, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !60
  %120 = zext <2 x i16> %119 to <2 x i32>, !dbg !60
  %121 = shl nuw <2 x i32> %120, splat (i32 16), !dbg !60
  %122 = shufflevector <4 x i16> %bc28, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !60
  %123 = zext <2 x i16> %122 to <2 x i32>, !dbg !60
  %124 = shl nuw <2 x i32> %123, splat (i32 16), !dbg !60
  %125 = sext i32 %12 to i64, !dbg !61
  %126 = getelementptr bfloat, ptr addrspace(1) %3, i64 %125, !dbg !61
  %127 = bitcast <2 x i32> %30 to <2 x float>, !dbg !22
  %128 = bitcast <2 x i32> %48 to <2 x float>, !dbg !29
  %129 = fmul <2 x float> %127, %128, !dbg !62
  %130 = bitcast <2 x i32> %60 to <2 x float>, !dbg !35
  %131 = bitcast <2 x i32> %70 to <2 x float>, !dbg !39
  %132 = fmul <2 x float> %130, %131, !dbg !63
  %133 = fsub <2 x float> %129, %132, !dbg !64
  %134 = bitcast <2 x i32> %84 to <2 x float>, !dbg !45
  %135 = bitcast <2 x i32> %101 to <2 x float>, !dbg !52
  %136 = fmul <2 x float> %134, %135, !dbg !65
  %137 = bitcast <2 x i32> %111 to <2 x float>, !dbg !56
  %138 = bitcast <2 x i32> %121 to <2 x float>, !dbg !60
  %139 = fmul <2 x float> %137, %138, !dbg !66
  %140 = fadd <2 x float> %136, %139, !dbg !67
  %141 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !68
  %142 = shufflevector <2 x i1> %141, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !68
  %143 = select <2 x i1> %142, <2 x float> %133, <2 x float> %140, !dbg !68
  %144 = bitcast <2 x float> %143 to <2 x i32>, !dbg !69
  %145 = and <2 x i32> %144, <i32 65535, i32 2139095040>, !dbg !69
  %146 = icmp ne <2 x i32> %145, <i32 0, i32 2139095040>, !dbg !69
  %147 = icmp eq <2 x i32> %145, <i32 0, i32 2139095040>, !dbg !69
  %148 = shufflevector <2 x i1> %146, <2 x i1> %147, <2 x i32> <i32 0, i32 3>, !dbg !69
  %149 = lshr <2 x i32> %144, splat (i32 16), !dbg !69
  %150 = and <2 x i32> %149, splat (i32 1), !dbg !69
  %151 = add nuw nsw <2 x i32> %150, splat (i32 32767), !dbg !69
  %152 = and <2 x i32> %144, <i32 2139095040, i32 65535>, !dbg !69
  %153 = icmp eq <2 x i32> %152, <i32 2139095040, i32 0>, !dbg !69
  %154 = icmp ne <2 x i32> %152, <i32 2139095040, i32 0>, !dbg !69
  %155 = shufflevector <2 x i1> %153, <2 x i1> %154, <2 x i32> <i32 0, i32 3>, !dbg !69
  %156 = shufflevector <2 x i1> %155, <2 x i1> %148, <2 x i32> <i32 0, i32 3>, !dbg !69
  %157 = select <2 x i1> %156, <2 x i32> zeroinitializer, <2 x i32> %151, !dbg !69
  %158 = add <2 x i32> %157, %144, !dbg !69
  %159 = and <2 x i1> %148, %155, !dbg !69
  %160 = or <2 x i32> %144, splat (i32 65536), !dbg !69
  %161 = select <2 x i1> %159, <2 x i32> %160, <2 x i32> %158, !dbg !69
  %162 = lshr <2 x i32> %161, splat (i32 16), !dbg !69
  %163 = trunc nuw <2 x i32> %162 to <2 x i16>, !dbg !69
  %164 = bitcast <2 x i32> %33 to <2 x float>, !dbg !22
  %165 = bitcast <2 x i32> %51 to <2 x float>, !dbg !29
  %166 = fmul <2 x float> %164, %165, !dbg !62
  %167 = bitcast <2 x i32> %63 to <2 x float>, !dbg !35
  %168 = bitcast <2 x i32> %73 to <2 x float>, !dbg !39
  %169 = fmul <2 x float> %167, %168, !dbg !63
  %170 = fsub <2 x float> %166, %169, !dbg !64
  %171 = bitcast <2 x i32> %87 to <2 x float>, !dbg !45
  %172 = bitcast <2 x i32> %104 to <2 x float>, !dbg !52
  %173 = fmul <2 x float> %171, %172, !dbg !65
  %174 = bitcast <2 x i32> %114 to <2 x float>, !dbg !56
  %175 = bitcast <2 x i32> %124 to <2 x float>, !dbg !60
  %176 = fmul <2 x float> %174, %175, !dbg !66
  %177 = fadd <2 x float> %173, %176, !dbg !67
  %178 = select <2 x i1> %142, <2 x float> %170, <2 x float> %177, !dbg !68
  %179 = bitcast <2 x float> %178 to <2 x i32>, !dbg !69
  %180 = and <2 x i32> %179, <i32 65535, i32 2139095040>, !dbg !69
  %181 = icmp ne <2 x i32> %180, <i32 0, i32 2139095040>, !dbg !69
  %182 = icmp eq <2 x i32> %180, <i32 0, i32 2139095040>, !dbg !69
  %183 = shufflevector <2 x i1> %181, <2 x i1> %182, <2 x i32> <i32 0, i32 3>, !dbg !69
  %184 = lshr <2 x i32> %179, splat (i32 16), !dbg !69
  %185 = and <2 x i32> %184, splat (i32 1), !dbg !69
  %186 = add nuw nsw <2 x i32> %185, splat (i32 32767), !dbg !69
  %187 = and <2 x i32> %179, <i32 2139095040, i32 65535>, !dbg !69
  %188 = icmp eq <2 x i32> %187, <i32 2139095040, i32 0>, !dbg !69
  %189 = icmp ne <2 x i32> %187, <i32 2139095040, i32 0>, !dbg !69
  %190 = shufflevector <2 x i1> %188, <2 x i1> %189, <2 x i32> <i32 0, i32 3>, !dbg !69
  %191 = shufflevector <2 x i1> %190, <2 x i1> %183, <2 x i32> <i32 0, i32 3>, !dbg !69
  %192 = select <2 x i1> %191, <2 x i32> zeroinitializer, <2 x i32> %186, !dbg !69
  %193 = add <2 x i32> %192, %179, !dbg !69
  %194 = and <2 x i1> %183, %190, !dbg !69
  %195 = or <2 x i32> %179, splat (i32 65536), !dbg !69
  %196 = select <2 x i1> %194, <2 x i32> %195, <2 x i32> %193, !dbg !69
  %197 = lshr <2 x i32> %196, splat (i32 16), !dbg !69
  %198 = trunc nuw <2 x i32> %197 to <2 x i16>, !dbg !69
  %199 = shufflevector <2 x i16> %163, <2 x i16> %198, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !69
  store <4 x i16> %199, ptr addrspace(1) %126, align 16, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) nocapture, i32 immarg, <4 x i1>, <4 x bfloat>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) nocapture, i32 immarg, <1 x i1>, <1 x i64>) #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2h2po2sjromnyxfdwdgfyrcjxoujqkeyrh3bo7nvthtmpqcydsh.py", directory: "/home/vllm/.cache/vllm/torch_compile_cache/51fb6da286/rank_0_0/inductor_cache/2h")
!4 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !5, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 20, column: 28, scope: !4)
!8 = !DILocation(line: 20, column: 33, scope: !4)
!9 = !DILocation(line: 21, column: 36, scope: !4)
!10 = !DILocation(line: 21, column: 23, scope: !4)
!11 = !DILocation(line: 24, column: 21, scope: !4)
!12 = !DILocation(line: 23, column: 19, scope: !4)
!13 = !DILocation(line: 24, column: 28, scope: !4)
!14 = !DILocation(line: 25, column: 19, scope: !4)
!15 = !DILocation(line: 31, column: 18, scope: !4)
!16 = !DILocation(line: 33, column: 34, scope: !4)
!17 = !DILocation(line: 33, column: 44, scope: !4)
!18 = !DILocation(line: 33, column: 39, scope: !4)
!19 = !DILocation(line: 33, column: 50, scope: !4)
!20 = !DILocation(line: 33, column: 30, scope: !4)
!21 = !DILocation(line: 33, column: 56, scope: !4)
!22 = !DILocation(line: 33, column: 106, scope: !4)
!23 = !DILocation(line: 34, column: 30, scope: !4)
!24 = !DILocation(line: 34, column: 35, scope: !4)
!25 = !DILocation(line: 38, column: 34, scope: !4)
!26 = !DILocation(line: 40, column: 35, scope: !4)
!27 = !DILocation(line: 40, column: 31, scope: !4)
!28 = !DILocation(line: 40, column: 50, scope: !4)
!29 = !DILocation(line: 40, column: 100, scope: !4)
!30 = !DILocation(line: 42, column: 36, scope: !4)
!31 = !DILocation(line: 42, column: 45, scope: !4)
!32 = !DILocation(line: 42, column: 56, scope: !4)
!33 = !DILocation(line: 42, column: 31, scope: !4)
!34 = !DILocation(line: 42, column: 62, scope: !4)
!35 = !DILocation(line: 42, column: 112, scope: !4)
!36 = !DILocation(line: 43, column: 36, scope: !4)
!37 = !DILocation(line: 43, column: 31, scope: !4)
!38 = !DILocation(line: 43, column: 55, scope: !4)
!39 = !DILocation(line: 43, column: 105, scope: !4)
!40 = !DILocation(line: 48, column: 20, scope: !4)
!41 = !DILocation(line: 52, column: 64, scope: !4)
!42 = !DILocation(line: 52, column: 56, scope: !4)
!43 = !DILocation(line: 52, column: 31, scope: !4)
!44 = !DILocation(line: 52, column: 70, scope: !4)
!45 = !DILocation(line: 52, column: 121, scope: !4)
!46 = !DILocation(line: 53, column: 36, scope: !4)
!47 = !DILocation(line: 57, column: 35, scope: !4)
!48 = !DILocation(line: 59, column: 35, scope: !4)
!49 = !DILocation(line: 59, column: 44, scope: !4)
!50 = !DILocation(line: 59, column: 31, scope: !4)
!51 = !DILocation(line: 59, column: 58, scope: !4)
!52 = !DILocation(line: 59, column: 109, scope: !4)
!53 = !DILocation(line: 61, column: 51, scope: !4)
!54 = !DILocation(line: 61, column: 31, scope: !4)
!55 = !DILocation(line: 61, column: 65, scope: !4)
!56 = !DILocation(line: 61, column: 116, scope: !4)
!57 = !DILocation(line: 62, column: 36, scope: !4)
!58 = !DILocation(line: 62, column: 31, scope: !4)
!59 = !DILocation(line: 62, column: 63, scope: !4)
!60 = !DILocation(line: 62, column: 114, scope: !4)
!61 = !DILocation(line: 68, column: 25, scope: !4)
!62 = !DILocation(line: 41, column: 19, scope: !4)
!63 = !DILocation(line: 44, column: 20, scope: !4)
!64 = !DILocation(line: 45, column: 20, scope: !4)
!65 = !DILocation(line: 60, column: 20, scope: !4)
!66 = !DILocation(line: 63, column: 20, scope: !4)
!67 = !DILocation(line: 64, column: 20, scope: !4)
!68 = !DILocation(line: 0, scope: !4)
!69 = !DILocation(line: 68, column: 37, scope: !4)
!70 = !DILocation(line: 68, column: 4, scope: !4)
