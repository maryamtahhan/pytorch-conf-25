; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @kernel_unified_attention_3d(ptr addrspace(1) inreg nocapture writeonly %0, ptr addrspace(1) inreg nocapture writeonly %1, ptr addrspace(1) inreg nocapture writeonly %2, ptr addrspace(1) inreg nocapture readonly %3, ptr addrspace(1) inreg nocapture readonly %4, ptr addrspace(1) inreg nocapture readonly %5, ptr addrspace(1) inreg nocapture readonly %6, ptr addrspace(1) inreg nocapture readonly %7, float inreg %8, ptr addrspace(1) inreg nocapture readnone %9, ptr addrspace(1) inreg nocapture readnone %10, i32 inreg %11, i64 inreg %12, i64 inreg %13, i64 inreg %14, i64 inreg %15, i64 inreg %16, i64 inreg %17, i64 inreg %18, i64 inreg %19, i64 inreg %20, i64 inreg %21, ptr addrspace(1) inreg nocapture readonly %22, ptr addrspace(1) inreg nocapture readnone %23) local_unnamed_addr #1 !dbg !7 {
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !8
  %26 = tail call i32 @llvm.amdgcn.workgroup.id.z(), !dbg !9
  %unmaskedload182 = load <1 x i32>, ptr addrspace(1) %22, align 4, !amdgpu.noclobber !6
  %27 = extractelement <1 x i32> %unmaskedload182, i64 0
  %28 = sdiv i32 %27, 4
  %29 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !10
  %.not183.not = icmp sgt i32 %28, %29
  %.neg205 = zext i1 %.not183.not to i32, !dbg !11
  %30 = sext i1 %.not183.not to i64, !dbg !14
  %31 = getelementptr i32, ptr addrspace(1) %22, i64 %30, !dbg !14
  %unmaskedload = load <1 x i32>, ptr addrspace(1) %31, align 4, !dbg !15
  %32 = extractelement <1 x i32> %unmaskedload, i64 0, !dbg !15
  %.neg = sdiv i32 %32, -4, !dbg !16
  %.neg185 = add i32 %29, %.neg205, !dbg !17
  %33 = add i32 %.neg185, %.neg, !dbg !18
  %34 = getelementptr i8, ptr addrspace(1) %31, i64 4, !dbg !19
  %unmaskedload6 = load <1 x i32>, ptr addrspace(1) %34, align 4, !dbg !20
  %35 = extractelement <1 x i32> %unmaskedload6, i64 0, !dbg !21
  %36 = extractelement <1 x i32> %unmaskedload, i64 0, !dbg !21
  %37 = sub i32 %35, %36, !dbg !21
  %38 = shl i32 %33, 2, !dbg !22
  %.not = icmp slt i32 %38, %37, !dbg !23
  br i1 %.not, label %39, label %common.ret, !dbg !23

common.ret:                                       ; preds = %24, %39, %981
  ret void, !dbg !24

39:                                               ; preds = %24
  %40 = getelementptr i32, ptr addrspace(1) %7, i64 %30, !dbg !25
  %unmaskedload7 = load <1 x i32>, ptr addrspace(1) %40, align 4, !dbg !26
  %41 = extractelement <1 x i32> %unmaskedload7, i64 0, !dbg !26
  %42 = add i32 %41, 255, !dbg !27
  %43 = sdiv i32 %42, 256, !dbg !29
  %44 = mul i32 %43, %26, !dbg !30
  %45 = shl i32 %44, 4, !dbg !31
  %.not8 = icmp slt i32 %45, %41, !dbg !32
  br i1 %.not8, label %46, label %common.ret, !dbg !32

46:                                               ; preds = %39
  %47 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !33
  %48 = lshr i32 %47, 4, !dbg !33
  %49 = and i32 %48, 15, !dbg !33
  %50 = lshr i32 %47, 2, !dbg !33
  %51 = and i32 %50, 4, !dbg !33
  %52 = and i32 %50, 12, !dbg !33
  %53 = or disjoint i32 %52, 1, !dbg !33
  %54 = or disjoint i32 %52, 2, !dbg !33
  %55 = or disjoint i32 %52, 3, !dbg !33
  %56 = shl i32 %47, 3, !dbg !34
  %57 = and i32 %56, 120, !dbg !34
  %58 = or disjoint i32 %52, 16, !dbg !34
  %59 = or disjoint i32 %52, 32, !dbg !34
  %60 = or disjoint i32 %52, 48, !dbg !34
  %61 = or disjoint i32 %52, 64, !dbg !34
  %62 = or disjoint i32 %52, 80, !dbg !34
  %63 = or disjoint i32 %52, 96, !dbg !34
  %64 = or disjoint i32 %52, 112, !dbg !34
  %65 = lshr i32 %49, 2, !dbg !35
  %66 = and i32 %50, 3, !dbg !35
  %67 = or disjoint i32 %38, %65, !dbg !36
  %68 = or disjoint i32 %38, %66, !dbg !36
  %69 = add i32 %67, %32, !dbg !37
  %70 = add i32 %68, %32, !dbg !37
  %71 = shl i32 %25, 2, !dbg !38
  %72 = and i32 %48, 3, !dbg !39
  %73 = and i32 %47, 3, !dbg !39
  %74 = or disjoint i32 %72, %71, !dbg !40
  %75 = or disjoint i32 %71, %73, !dbg !40
  %76 = sext i32 %69 to i64, !dbg !41
  %77 = sext i32 %70 to i64, !dbg !41
  %78 = mul i64 %13, %76, !dbg !41
  %79 = sext i32 %74 to i64, !dbg !42
  %80 = mul i64 %14, %79, !dbg !42
  %81 = zext nneg i32 %57 to i64, !dbg !43
  %82 = zext nneg i32 %52 to i64, !dbg !43
  %83 = zext nneg i32 %58 to i64, !dbg !43
  %84 = zext nneg i32 %59 to i64, !dbg !43
  %85 = zext nneg i32 %60 to i64, !dbg !43
  %86 = zext nneg i32 %61 to i64, !dbg !43
  %87 = zext nneg i32 %62 to i64, !dbg !43
  %88 = zext nneg i32 %63 to i64, !dbg !43
  %89 = zext nneg i32 %64 to i64, !dbg !43
  %90 = icmp slt i32 %67, %37, !dbg !44
  %91 = icmp slt i32 %68, %37, !dbg !44
  %92 = icmp slt i32 %74, 32, !dbg !45
  %93 = icmp slt i32 %75, 32, !dbg !45
  %94 = and i1 %92, %90, !dbg !46
  %95 = and i1 %93, %91, !dbg !46
  %96 = getelementptr bfloat, ptr addrspace(1) %3, i64 %78, !dbg !47
  %97 = getelementptr bfloat, ptr addrspace(1) %96, i64 %80, !dbg !47
  %98 = getelementptr bfloat, ptr addrspace(1) %97, i64 %81, !dbg !47
  %99 = insertelement <8 x i1> poison, i1 %94, i64 0, !dbg !48
  %100 = shufflevector <8 x i1> %99, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !48
  %101 = tail call <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) %98, i32 16, <8 x i1> %100, <8 x bfloat> zeroinitializer), !dbg !48
  %102 = or disjoint i32 %57, %51, !dbg !48
  %and.ra186 = and i32 %50, 56, !dbg !48
  %103 = xor i32 %102, %and.ra186, !dbg !48
  %104 = shl nuw nsw i32 %49, 7, !dbg !48
  %105 = or disjoint i32 %103, %104, !dbg !48
  %106 = getelementptr inbounds bfloat, ptr addrspace(3) @global_smem, i32 %105, !dbg !48
  %107 = shufflevector <8 x bfloat> %101, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !48
  store <4 x bfloat> %107, ptr addrspace(3) %106, align 8, !dbg !48
  %108 = or disjoint i32 %57, 4, !dbg !48
  %and.ra189 = and i32 %50, 60, !dbg !48
  %109 = xor i32 %108, %and.ra189, !dbg !48
  %110 = or disjoint i32 %109, %104, !dbg !48
  %111 = getelementptr inbounds bfloat, ptr addrspace(3) @global_smem, i32 %110, !dbg !48
  %112 = shufflevector <8 x bfloat> %101, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !48
  store <4 x bfloat> %112, ptr addrspace(3) %111, align 8, !dbg !48
  fence syncscope("workgroup") release, !dbg !48
  tail call void @llvm.amdgcn.s.barrier(), !dbg !48
  fence syncscope("workgroup") acquire, !dbg !48
  %113 = and i32 %47, 15, !dbg !48
  %114 = shl nuw nsw i32 %72, 2, !dbg !48
  %115 = or disjoint i32 %114, 16, !dbg !48
  %116 = or disjoint i32 %114, 32, !dbg !48
  %117 = or disjoint i32 %114, 48, !dbg !48
  %118 = or disjoint i32 %114, 64, !dbg !48
  %119 = or disjoint i32 %114, 80, !dbg !48
  %120 = or disjoint i32 %114, 96, !dbg !48
  %121 = or disjoint i32 %114, 112, !dbg !48
  %122 = xor i32 %72, %113, !dbg !48
  %123 = shl nuw nsw i32 %122, 2, !dbg !48
  %124 = shl nuw nsw i32 %113, 7, !dbg !48
  %125 = or disjoint i32 %123, %124, !dbg !48
  %126 = shl nuw nsw i32 %113, 2, !dbg !48
  %127 = xor i32 %115, %126, !dbg !48
  %128 = or disjoint i32 %127, %124, !dbg !48
  %129 = xor i32 %116, %126, !dbg !48
  %130 = or disjoint i32 %129, %124, !dbg !48
  %131 = xor i32 %117, %126, !dbg !48
  %132 = or disjoint i32 %131, %124, !dbg !48
  %133 = xor i32 %118, %126, !dbg !48
  %134 = or disjoint i32 %133, %124, !dbg !48
  %135 = xor i32 %119, %126, !dbg !48
  %136 = or disjoint i32 %135, %124, !dbg !48
  %137 = xor i32 %120, %126, !dbg !48
  %138 = or disjoint i32 %137, %124, !dbg !48
  %139 = xor i32 %121, %126, !dbg !48
  %140 = or disjoint i32 %139, %124, !dbg !48
  %141 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %125, !dbg !48
  %142 = load <4 x i16>, ptr addrspace(3) %141, align 8, !dbg !48
  %143 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %128, !dbg !48
  %144 = load <4 x i16>, ptr addrspace(3) %143, align 8, !dbg !48
  %145 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %130, !dbg !48
  %146 = load <4 x i16>, ptr addrspace(3) %145, align 8, !dbg !48
  %147 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %132, !dbg !48
  %148 = load <4 x i16>, ptr addrspace(3) %147, align 8, !dbg !48
  %149 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %134, !dbg !48
  %150 = load <4 x i16>, ptr addrspace(3) %149, align 8, !dbg !48
  %151 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %136, !dbg !48
  %152 = load <4 x i16>, ptr addrspace(3) %151, align 8, !dbg !48
  %153 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %138, !dbg !48
  %154 = load <4 x i16>, ptr addrspace(3) %153, align 8, !dbg !48
  %155 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %140, !dbg !48
  %156 = load <4 x i16>, ptr addrspace(3) %155, align 8, !dbg !48
  %157 = mul i64 %12, %30, !dbg !49
  %158 = add i32 %41, 15, !dbg !50
  %159 = sdiv i32 %158, 16, !dbg !52
  %160 = add i32 %26, 1, !dbg !53
  %161 = mul i32 %43, %160, !dbg !54
  %162 = tail call i32 @llvm.smin.i32(i32 %161, i32 %159), !dbg !55
  %163 = getelementptr i32, ptr addrspace(1) %6, i64 %157, !dbg !56
  %164 = sext i32 %25 to i64, !dbg !57
  %165 = mul i64 %21, %164, !dbg !57
  %166 = zext nneg i32 %49 to i64, !dbg !58
  %167 = mul i64 %20, %166, !dbg !58
  %168 = mul i64 %18, %164, !dbg !59
  %169 = mul i64 %17, %166, !dbg !60
  %reass.sub = sub i32 %68, %37, !dbg !61
  %170 = add i32 %reass.sub, 1, !dbg !61
  %171 = add i32 %170, %41, !dbg !62
  %172 = icmp slt i32 %44, %162, !dbg !63
  %173 = sext i32 %44 to i64, !dbg !64
  %174 = getelementptr i32, ptr addrspace(1) %163, i64 %173, !dbg !64
  %175 = insertelement <1 x i1> poison, i1 %172, i64 0, !dbg !65
  %176 = tail call <1 x i32> @llvm.masked.load.v1i32.p1(ptr addrspace(1) %174, i32 4, <1 x i1> %175, <1 x i32> zeroinitializer), !dbg !65
  %177 = extractelement <1 x i32> %176, i64 0, !dbg !65
  %178 = sext i32 %177 to i64, !dbg !66
  %179 = mul i64 %19, %178, !dbg !66
  %180 = mul i64 %16, %178, !dbg !67
  %181 = getelementptr bfloat, ptr addrspace(1) %4, i64 %180, !dbg !68
  %182 = getelementptr bfloat, ptr addrspace(1) %181, i64 %168, !dbg !68
  %183 = getelementptr bfloat, ptr addrspace(1) %182, i64 %81, !dbg !68
  %184 = getelementptr bfloat, ptr addrspace(1) %183, i64 %169, !dbg !68
  %185 = insertelement <8 x i1> poison, i1 %172, i64 0, !dbg !69
  %186 = shufflevector <8 x i1> %185, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !69
  %187 = tail call <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) %184, i32 16, <8 x i1> %186, <8 x bfloat> zeroinitializer), !dbg !69
  %188 = getelementptr bfloat, ptr addrspace(1) %5, i64 %179, !dbg !70
  %189 = getelementptr bfloat, ptr addrspace(1) %188, i64 %165, !dbg !70
  %190 = getelementptr bfloat, ptr addrspace(1) %189, i64 %81, !dbg !70
  %191 = getelementptr bfloat, ptr addrspace(1) %190, i64 %167, !dbg !70
  %192 = tail call <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) %191, i32 16, <8 x i1> %186, <8 x bfloat> zeroinitializer), !dbg !71
  %193 = getelementptr inbounds bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %105, !dbg !69
  %194 = shufflevector <8 x bfloat> %187, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !69
  store <4 x bfloat> %194, ptr addrspace(3) %193, align 8, !dbg !69
  %195 = getelementptr inbounds bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %110, !dbg !69
  %196 = shufflevector <8 x bfloat> %187, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !69
  store <4 x bfloat> %196, ptr addrspace(3) %195, align 8, !dbg !69
  %197 = or disjoint i32 %104, %57, !dbg !71
  %198 = getelementptr inbounds bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %197, !dbg !71
  store <8 x bfloat> %192, ptr addrspace(3) %198, align 16, !dbg !71
  %199 = add i32 %162, -1, !dbg !63
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %4, i64 %168, !dbg !63
  %invariant.gep194 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %81, !dbg !63
  %invariant.gep196 = getelementptr bfloat, ptr addrspace(1) %invariant.gep194, i64 %169, !dbg !63
  %invariant.gep197 = getelementptr bfloat, ptr addrspace(1) %5, i64 %165, !dbg !63
  %invariant.gep199 = getelementptr bfloat, ptr addrspace(1) %invariant.gep197, i64 %81, !dbg !63
  %invariant.gep201 = getelementptr bfloat, ptr addrspace(1) %invariant.gep199, i64 %167, !dbg !63
  %200 = icmp slt i32 %44, %199, !dbg !63
  br i1 %200, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !63

.._crit_edge_crit_edge:                           ; preds = %46
  %.pre = shl nuw nsw i32 %72, 9, !dbg !71
  %.pre209 = or disjoint i32 %.pre, %113, !dbg !71
  %.pre211 = or disjoint i32 %.pre209, 128, !dbg !71
  %.pre213 = or disjoint i32 %.pre209, 256, !dbg !71
  %.pre215 = or disjoint i32 %.pre209, 384, !dbg !71
  %.pre217 = or disjoint i32 %.pre209, 16, !dbg !71
  %.pre219 = or disjoint i32 %.pre209, 144, !dbg !71
  %.pre221 = or disjoint i32 %.pre209, 272, !dbg !71
  %.pre223 = or disjoint i32 %.pre209, 400, !dbg !71
  %.pre225 = or disjoint i32 %.pre209, 32, !dbg !71
  %.pre227 = or disjoint i32 %.pre209, 160, !dbg !71
  %.pre229 = or disjoint i32 %.pre209, 288, !dbg !71
  %.pre231 = or disjoint i32 %.pre209, 416, !dbg !71
  %.pre233 = or disjoint i32 %.pre209, 48, !dbg !71
  %.pre235 = or disjoint i32 %.pre209, 176, !dbg !71
  %.pre237 = or disjoint i32 %.pre209, 304, !dbg !71
  %.pre239 = or disjoint i32 %.pre209, 432, !dbg !71
  %.pre241 = or disjoint i32 %.pre209, 64, !dbg !71
  %.pre243 = or disjoint i32 %.pre209, 192, !dbg !71
  %.pre245 = or disjoint i32 %.pre209, 320, !dbg !71
  %.pre247 = or disjoint i32 %.pre209, 448, !dbg !71
  %.pre249 = or disjoint i32 %.pre209, 80, !dbg !71
  %.pre251 = or disjoint i32 %.pre209, 208, !dbg !71
  %.pre253 = or disjoint i32 %.pre209, 336, !dbg !71
  %.pre255 = or disjoint i32 %.pre209, 464, !dbg !71
  %.pre257 = or disjoint i32 %.pre209, 96, !dbg !71
  %.pre259 = or disjoint i32 %.pre209, 224, !dbg !71
  %.pre261 = or disjoint i32 %.pre209, 352, !dbg !71
  %.pre263 = or disjoint i32 %.pre209, 480, !dbg !71
  %.pre265 = or disjoint i32 %.pre209, 112, !dbg !71
  %.pre267 = or disjoint i32 %.pre209, 240, !dbg !71
  %.pre269 = or disjoint i32 %.pre209, 368, !dbg !71
  %.pre271 = or disjoint i32 %.pre209, 496, !dbg !71
  br label %._crit_edge, !dbg !63

.lr.ph:                                           ; preds = %46
  %201 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %125
  %202 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %128
  %203 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %130
  %204 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %132
  %205 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %134
  %206 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %136
  %207 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %138
  %208 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %140
  %209 = shl nuw nsw i32 %72, 9
  %210 = or disjoint i32 %209, %113
  %211 = or disjoint i32 %210, 128
  %212 = or disjoint i32 %210, 256
  %213 = or disjoint i32 %210, 384
  %214 = or disjoint i32 %210, 16
  %215 = or disjoint i32 %210, 144
  %216 = or disjoint i32 %210, 272
  %217 = or disjoint i32 %210, 400
  %218 = or disjoint i32 %210, 32
  %219 = or disjoint i32 %210, 160
  %220 = or disjoint i32 %210, 288
  %221 = or disjoint i32 %210, 416
  %222 = or disjoint i32 %210, 48
  %223 = or disjoint i32 %210, 176
  %224 = or disjoint i32 %210, 304
  %225 = or disjoint i32 %210, 432
  %226 = or disjoint i32 %210, 64
  %227 = or disjoint i32 %210, 192
  %228 = or disjoint i32 %210, 320
  %229 = or disjoint i32 %210, 448
  %230 = or disjoint i32 %210, 80
  %231 = or disjoint i32 %210, 208
  %232 = or disjoint i32 %210, 336
  %233 = or disjoint i32 %210, 464
  %234 = or disjoint i32 %210, 96
  %235 = or disjoint i32 %210, 224
  %236 = or disjoint i32 %210, 352
  %237 = or disjoint i32 %210, 480
  %238 = or disjoint i32 %210, 112
  %239 = or disjoint i32 %210, 240
  %240 = or disjoint i32 %210, 368
  %241 = or disjoint i32 %210, 496
  %242 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %210
  %243 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %211
  %244 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %212
  %245 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %213
  %246 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %214
  %247 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %215
  %248 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %216
  %249 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %217
  %250 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %218
  %251 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %219
  %252 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %220
  %253 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %221
  %254 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %222
  %255 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %223
  %256 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %224
  %257 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %225
  %258 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %226
  %259 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %227
  %260 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %228
  %261 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %229
  %262 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %230
  %263 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %231
  %264 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %232
  %265 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %233
  %266 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %234
  %267 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %235
  %268 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %236
  %269 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %237
  %270 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %238
  %271 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %239
  %272 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %240
  %273 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %241
  %274 = shl i32 %47, 2
  %275 = xor i32 %274, 128
  br label %276, !dbg !63

276:                                              ; preds = %.lr.ph, %276
  %277 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %414, %276 ]
  %278 = phi float [ 1.000000e+00, %.lr.ph ], [ %554, %276 ]
  %279 = phi i32 [ %44, %.lr.ph ], [ %296, %276 ]
  %280 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %556, %276 ]
  %281 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %557, %276 ]
  %282 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %558, %276 ]
  %283 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %559, %276 ]
  %284 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %560, %276 ]
  %285 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %561, %276 ]
  %286 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %562, %276 ]
  %287 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %563, %276 ]
  %288 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %564, %276 ]
  %289 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %565, %276 ]
  %290 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %566, %276 ]
  %291 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %567, %276 ]
  %292 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %568, %276 ]
  %293 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %569, %276 ]
  %294 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %570, %276 ]
  %295 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %571, %276 ]
  %296 = add nsw i32 %279, 1, !dbg !63
  %297 = sext i32 %296 to i64, !dbg !64
  %298 = getelementptr i32, ptr addrspace(1) %163, i64 %297, !dbg !64
  %unmaskedload127 = load <1 x i32>, ptr addrspace(1) %298, align 4, !dbg !65
  %299 = extractelement <1 x i32> %unmaskedload127, i64 0, !dbg !65
  %300 = sext i32 %299 to i64, !dbg !66
  %301 = mul i64 %19, %300, !dbg !66
  %302 = mul i64 %16, %300, !dbg !67
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep196, i64 %302, !dbg !68
  %unmaskedload128 = load <8 x bfloat>, ptr addrspace(1) %gep, align 16, !dbg !69
  fence syncscope("workgroup") release, !dbg !69
  tail call void @llvm.amdgcn.s.barrier(), !dbg !69
  fence syncscope("workgroup") acquire, !dbg !69
  %303 = load <4 x i16>, ptr addrspace(3) %201, align 8, !dbg !69
  %304 = load <4 x i16>, ptr addrspace(3) %202, align 8, !dbg !69
  %305 = load <4 x i16>, ptr addrspace(3) %203, align 8, !dbg !69
  %306 = load <4 x i16>, ptr addrspace(3) %204, align 8, !dbg !69
  %307 = load <4 x i16>, ptr addrspace(3) %205, align 8, !dbg !69
  %308 = load <4 x i16>, ptr addrspace(3) %206, align 8, !dbg !69
  %309 = load <4 x i16>, ptr addrspace(3) %207, align 8, !dbg !69
  %310 = load <4 x i16>, ptr addrspace(3) %208, align 8, !dbg !69
  %gep202 = getelementptr bfloat, ptr addrspace(1) %invariant.gep201, i64 %301, !dbg !70
  %unmaskedload129 = load <8 x bfloat>, ptr addrspace(1) %gep202, align 16, !dbg !71
  %311 = load <1 x i16>, ptr addrspace(3) %242, align 2, !dbg !71
  %312 = load <1 x i16>, ptr addrspace(3) %243, align 2, !dbg !71
  %313 = load <1 x i16>, ptr addrspace(3) %244, align 2, !dbg !71
  %314 = shufflevector <1 x i16> %313, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %315 = load <1 x i16>, ptr addrspace(3) %245, align 2, !dbg !71
  %316 = shufflevector <1 x i16> %315, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %317 = load <1 x i16>, ptr addrspace(3) %246, align 2, !dbg !71
  %318 = load <1 x i16>, ptr addrspace(3) %247, align 2, !dbg !71
  %319 = load <1 x i16>, ptr addrspace(3) %248, align 2, !dbg !71
  %320 = shufflevector <1 x i16> %319, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %321 = load <1 x i16>, ptr addrspace(3) %249, align 2, !dbg !71
  %322 = shufflevector <1 x i16> %321, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %323 = load <1 x i16>, ptr addrspace(3) %250, align 2, !dbg !71
  %324 = load <1 x i16>, ptr addrspace(3) %251, align 2, !dbg !71
  %325 = load <1 x i16>, ptr addrspace(3) %252, align 2, !dbg !71
  %326 = shufflevector <1 x i16> %325, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %327 = load <1 x i16>, ptr addrspace(3) %253, align 2, !dbg !71
  %328 = shufflevector <1 x i16> %327, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %329 = load <1 x i16>, ptr addrspace(3) %254, align 2, !dbg !71
  %330 = load <1 x i16>, ptr addrspace(3) %255, align 2, !dbg !71
  %331 = load <1 x i16>, ptr addrspace(3) %256, align 2, !dbg !71
  %332 = shufflevector <1 x i16> %331, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %333 = load <1 x i16>, ptr addrspace(3) %257, align 2, !dbg !71
  %334 = shufflevector <1 x i16> %333, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %335 = load <1 x i16>, ptr addrspace(3) %258, align 2, !dbg !71
  %336 = load <1 x i16>, ptr addrspace(3) %259, align 2, !dbg !71
  %337 = load <1 x i16>, ptr addrspace(3) %260, align 2, !dbg !71
  %338 = shufflevector <1 x i16> %337, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %339 = load <1 x i16>, ptr addrspace(3) %261, align 2, !dbg !71
  %340 = shufflevector <1 x i16> %339, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %341 = load <1 x i16>, ptr addrspace(3) %262, align 2, !dbg !71
  %342 = load <1 x i16>, ptr addrspace(3) %263, align 2, !dbg !71
  %343 = load <1 x i16>, ptr addrspace(3) %264, align 2, !dbg !71
  %344 = shufflevector <1 x i16> %343, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %345 = load <1 x i16>, ptr addrspace(3) %265, align 2, !dbg !71
  %346 = shufflevector <1 x i16> %345, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %347 = load <1 x i16>, ptr addrspace(3) %266, align 2, !dbg !71
  %348 = load <1 x i16>, ptr addrspace(3) %267, align 2, !dbg !71
  %349 = load <1 x i16>, ptr addrspace(3) %268, align 2, !dbg !71
  %350 = shufflevector <1 x i16> %349, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %351 = load <1 x i16>, ptr addrspace(3) %269, align 2, !dbg !71
  %352 = shufflevector <1 x i16> %351, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %353 = load <1 x i16>, ptr addrspace(3) %270, align 2, !dbg !71
  %354 = load <1 x i16>, ptr addrspace(3) %271, align 2, !dbg !71
  %355 = load <1 x i16>, ptr addrspace(3) %272, align 2, !dbg !71
  %356 = shufflevector <1 x i16> %355, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %357 = load <1 x i16>, ptr addrspace(3) %273, align 2, !dbg !71
  %358 = shufflevector <1 x i16> %357, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %359 = shl i32 %279, 4, !dbg !72
  %360 = or disjoint i32 %359, %52, !dbg !73
  %361 = or disjoint i32 %359, %53, !dbg !73
  %362 = or disjoint i32 %359, %54, !dbg !73
  %363 = or disjoint i32 %359, %55, !dbg !73
  %364 = icmp slt i32 %360, %171, !dbg !74
  %365 = icmp slt i32 %361, %171, !dbg !74
  %366 = icmp slt i32 %362, %171, !dbg !74
  %367 = icmp slt i32 %363, %171, !dbg !74
  %368 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %303, <4 x i16> %142, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !75
  %369 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %304, <4 x i16> %144, <4 x float> %368, i32 0, i32 0, i32 0), !dbg !75
  %370 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %305, <4 x i16> %146, <4 x float> %369, i32 0, i32 0, i32 0), !dbg !75
  %371 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %306, <4 x i16> %148, <4 x float> %370, i32 0, i32 0, i32 0), !dbg !75
  %372 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %307, <4 x i16> %150, <4 x float> %371, i32 0, i32 0, i32 0), !dbg !75
  %373 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %308, <4 x i16> %152, <4 x float> %372, i32 0, i32 0, i32 0), !dbg !75
  %374 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %309, <4 x i16> %154, <4 x float> %373, i32 0, i32 0, i32 0), !dbg !75
  %375 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %310, <4 x i16> %156, <4 x float> %374, i32 0, i32 0, i32 0), !dbg !75
  %376 = extractelement <4 x float> %375, i64 0, !dbg !75
  %377 = extractelement <4 x float> %375, i64 1, !dbg !75
  %378 = extractelement <4 x float> %375, i64 2, !dbg !75
  %379 = extractelement <4 x float> %375, i64 3, !dbg !75
  %380 = fmul float %8, %376, !dbg !76
  %381 = fmul float %8, %377, !dbg !76
  %382 = fmul float %8, %378, !dbg !76
  %383 = fmul float %8, %379, !dbg !76
  %384 = fadd float %380, 0.000000e+00, !dbg !77
  %385 = fadd float %381, 0.000000e+00, !dbg !77
  %386 = fadd float %382, 0.000000e+00, !dbg !77
  %387 = fadd float %383, 0.000000e+00, !dbg !77
  %388 = and i1 %95, %364, !dbg !78
  %389 = and i1 %95, %365, !dbg !78
  %390 = and i1 %95, %366, !dbg !78
  %391 = and i1 %95, %367, !dbg !78
  %392 = select i1 %388, float %384, float 0xFFF0000000000000, !dbg !79
  %393 = select i1 %391, float %387, float 0xFFF0000000000000, !dbg !79
  %394 = insertelement <2 x i1> poison, i1 %389, i64 0, !dbg !79
  %395 = insertelement <2 x i1> %394, i1 %390, i64 1, !dbg !79
  %396 = insertelement <2 x float> poison, float %385, i64 0, !dbg !79
  %397 = insertelement <2 x float> %396, float %386, i64 1, !dbg !79
  %398 = select <2 x i1> %395, <2 x float> %397, <2 x float> splat (float 0xFFF0000000000000), !dbg !79
  %399 = extractelement <2 x float> %398, i64 0, !dbg !80
  %400 = tail call float @llvm.maxnum.f32(float %392, float %399), !dbg !80
  %401 = extractelement <2 x float> %398, i64 1, !dbg !80
  %402 = tail call float @llvm.maxnum.f32(float %400, float %401), !dbg !80
  %403 = tail call float @llvm.maxnum.f32(float %402, float %393), !dbg !80
  %404 = bitcast float %403 to i32, !dbg !85
  %405 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %275, i32 %404), !dbg !85
  %406 = bitcast i32 %405 to float, !dbg !85
  %407 = tail call float @llvm.maxnum.f32(float %403, float %406), !dbg !80
  %408 = bitcast float %407 to i32, !dbg !85
  %409 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %408, i32 16415), !dbg !85
  %410 = bitcast i32 %409 to float, !dbg !85
  %411 = tail call float @llvm.maxnum.f32(float %407, float %410), !dbg !80
  %412 = tail call float @llvm.maxnum.f32(float %277, float %411), !dbg !86
  %413 = fcmp one float %412, 0xFFF0000000000000, !dbg !87
  %414 = select i1 %413, float %412, float 0.000000e+00, !dbg !88
  %415 = fsub float %392, %414, !dbg !89
  %416 = insertelement <2 x float> poison, float %414, i64 0, !dbg !89
  %417 = shufflevector <2 x float> %416, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !89
  %418 = fsub <2 x float> %398, %417, !dbg !89
  %419 = fsub float %393, %414, !dbg !89
  %420 = fmul float %415, 0x3FF7154760000000, !dbg !90
  %421 = tail call float @llvm.exp2.f32(float %420), !dbg !90
  %422 = fmul <2 x float> %418, splat (float 0x3FF7154760000000), !dbg !90
  %423 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %422), !dbg !90
  %424 = fmul float %419, 0x3FF7154760000000, !dbg !90
  %425 = tail call float @llvm.exp2.f32(float %424), !dbg !90
  %426 = fsub float %277, %414, !dbg !91
  %427 = fmul float %426, 0x3FF7154760000000, !dbg !92
  %428 = tail call float @llvm.exp2.f32(float %427), !dbg !92
  %429 = insertelement <2 x float> poison, float %428, i64 0, !dbg !93
  %430 = bitcast float %421 to i32, !dbg !94
  %431 = and i32 %430, 2139095040, !dbg !94
  %.not178 = icmp eq i32 %431, 2139095040, !dbg !94
  %432 = lshr i32 %430, 16, !dbg !94
  %433 = and i32 %432, 1, !dbg !94
  %434 = add nuw nsw i32 %433, 32767, !dbg !94
  %435 = select i1 %.not178, i32 0, i32 %434, !dbg !94
  %436 = add i32 %435, %430, !dbg !94
  %437 = and i32 %430, 65535, !dbg !94
  %438 = icmp ne i32 %437, 0, !dbg !94
  %439 = and i1 %.not178, %438, !dbg !94
  %440 = or i32 %430, 65536, !dbg !94
  %441 = select i1 %439, i32 %440, i32 %436, !dbg !94
  %442 = lshr i32 %441, 16, !dbg !94
  %443 = trunc nuw i32 %442 to i16, !dbg !94
  %444 = bitcast <2 x float> %423 to <2 x i32>, !dbg !94
  %445 = and <2 x i32> %444, <i32 65535, i32 2139095040>, !dbg !94
  %446 = icmp ne <2 x i32> %445, <i32 0, i32 2139095040>, !dbg !94
  %447 = icmp eq <2 x i32> %445, <i32 0, i32 2139095040>, !dbg !94
  %448 = shufflevector <2 x i1> %446, <2 x i1> %447, <2 x i32> <i32 0, i32 3>, !dbg !94
  %449 = lshr <2 x i32> %444, splat (i32 16), !dbg !94
  %450 = and <2 x i32> %449, splat (i32 1), !dbg !94
  %451 = add nuw nsw <2 x i32> %450, splat (i32 32767), !dbg !94
  %452 = and <2 x i32> %444, <i32 2139095040, i32 65535>, !dbg !94
  %453 = icmp eq <2 x i32> %452, <i32 2139095040, i32 0>, !dbg !94
  %454 = icmp ne <2 x i32> %452, <i32 2139095040, i32 0>, !dbg !94
  %455 = shufflevector <2 x i1> %453, <2 x i1> %454, <2 x i32> <i32 0, i32 3>, !dbg !94
  %456 = shufflevector <2 x i1> %455, <2 x i1> %448, <2 x i32> <i32 0, i32 3>, !dbg !94
  %457 = select <2 x i1> %456, <2 x i32> zeroinitializer, <2 x i32> %451, !dbg !94
  %458 = add <2 x i32> %457, %444, !dbg !94
  %459 = and <2 x i1> %448, %455, !dbg !94
  %460 = or <2 x i32> %444, splat (i32 65536), !dbg !94
  %461 = select <2 x i1> %459, <2 x i32> %460, <2 x i32> %458, !dbg !94
  %462 = lshr <2 x i32> %461, splat (i32 16), !dbg !94
  %463 = trunc nuw <2 x i32> %462 to <2 x i16>, !dbg !94
  %464 = bitcast float %425 to i32, !dbg !94
  %465 = and i32 %464, 2139095040, !dbg !94
  %.not181 = icmp eq i32 %465, 2139095040, !dbg !94
  %466 = lshr i32 %464, 16, !dbg !94
  %467 = and i32 %466, 1, !dbg !94
  %468 = add nuw nsw i32 %467, 32767, !dbg !94
  %469 = select i1 %.not181, i32 0, i32 %468, !dbg !94
  %470 = add i32 %469, %464, !dbg !94
  %471 = and i32 %464, 65535, !dbg !94
  %472 = icmp ne i32 %471, 0, !dbg !94
  %473 = and i1 %.not181, %472, !dbg !94
  %474 = or i32 %464, 65536, !dbg !94
  %475 = select i1 %473, i32 %474, i32 %470, !dbg !94
  %476 = lshr i32 %475, 16, !dbg !94
  %477 = trunc nuw i32 %476 to i16, !dbg !94
  %478 = insertelement <4 x i16> poison, i16 %443, i64 0, !dbg !95
  %479 = shufflevector <2 x i16> %463, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %480 = shufflevector <4 x i16> %478, <4 x i16> %479, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !95
  %481 = insertelement <4 x i16> %480, i16 %477, i64 3, !dbg !95
  %482 = shufflevector <1 x i16> %311, <1 x i16> %312, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %483 = shufflevector <4 x i16> %482, <4 x i16> %314, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %484 = shufflevector <4 x i16> %483, <4 x i16> %316, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %485 = shufflevector <1 x i16> %317, <1 x i16> %318, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %486 = shufflevector <4 x i16> %485, <4 x i16> %320, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %487 = shufflevector <4 x i16> %486, <4 x i16> %322, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %488 = shufflevector <1 x i16> %323, <1 x i16> %324, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %489 = shufflevector <4 x i16> %488, <4 x i16> %326, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %490 = shufflevector <4 x i16> %489, <4 x i16> %328, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %491 = shufflevector <1 x i16> %329, <1 x i16> %330, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %492 = shufflevector <4 x i16> %491, <4 x i16> %332, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %493 = shufflevector <4 x i16> %492, <4 x i16> %334, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %494 = shufflevector <1 x i16> %335, <1 x i16> %336, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %495 = shufflevector <4 x i16> %494, <4 x i16> %338, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %496 = shufflevector <4 x i16> %495, <4 x i16> %340, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %497 = shufflevector <1 x i16> %341, <1 x i16> %342, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %498 = shufflevector <4 x i16> %497, <4 x i16> %344, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %499 = shufflevector <4 x i16> %498, <4 x i16> %346, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %500 = shufflevector <1 x i16> %347, <1 x i16> %348, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %501 = shufflevector <4 x i16> %500, <4 x i16> %350, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %502 = shufflevector <4 x i16> %501, <4 x i16> %352, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %503 = shufflevector <1 x i16> %353, <1 x i16> %354, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !95
  %504 = shufflevector <4 x i16> %503, <4 x i16> %356, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !95
  %505 = shufflevector <4 x i16> %504, <4 x i16> %358, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !95
  %506 = shufflevector <2 x float> %294, <2 x float> %295, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %507 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %508 = fmul <4 x float> %506, %507, !dbg !95
  %509 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %484, <4 x i16> %481, <4 x float> %508, i32 0, i32 0, i32 0), !dbg !95
  %510 = shufflevector <2 x float> %292, <2 x float> %293, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %511 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %512 = fmul <4 x float> %510, %511, !dbg !95
  %513 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %487, <4 x i16> %481, <4 x float> %512, i32 0, i32 0, i32 0), !dbg !95
  %514 = shufflevector <2 x float> %290, <2 x float> %291, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %515 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %516 = fmul <4 x float> %514, %515, !dbg !95
  %517 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %490, <4 x i16> %481, <4 x float> %516, i32 0, i32 0, i32 0), !dbg !95
  %518 = shufflevector <2 x float> %288, <2 x float> %289, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %519 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %520 = fmul <4 x float> %518, %519, !dbg !95
  %521 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %493, <4 x i16> %481, <4 x float> %520, i32 0, i32 0, i32 0), !dbg !95
  %522 = shufflevector <2 x float> %286, <2 x float> %287, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %523 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %524 = fmul <4 x float> %522, %523, !dbg !95
  %525 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %496, <4 x i16> %481, <4 x float> %524, i32 0, i32 0, i32 0), !dbg !95
  %526 = shufflevector <2 x float> %284, <2 x float> %285, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %527 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %528 = fmul <4 x float> %526, %527, !dbg !95
  %529 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %499, <4 x i16> %481, <4 x float> %528, i32 0, i32 0, i32 0), !dbg !95
  %530 = shufflevector <2 x float> %282, <2 x float> %283, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %531 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %532 = fmul <4 x float> %530, %531, !dbg !95
  %533 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %502, <4 x i16> %481, <4 x float> %532, i32 0, i32 0, i32 0), !dbg !95
  %534 = shufflevector <2 x float> %280, <2 x float> %281, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %535 = shufflevector <2 x float> %429, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %536 = fmul <4 x float> %534, %535, !dbg !95
  %537 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %505, <4 x i16> %481, <4 x float> %536, i32 0, i32 0, i32 0), !dbg !95
  fence syncscope("workgroup") release, !dbg !69
  tail call void @llvm.amdgcn.s.barrier(), !dbg !69
  fence syncscope("workgroup") acquire, !dbg !69
  %538 = shufflevector <8 x bfloat> %unmaskedload128, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !69
  store <4 x bfloat> %538, ptr addrspace(3) %193, align 8, !dbg !69
  %539 = shufflevector <8 x bfloat> %unmaskedload128, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !69
  store <4 x bfloat> %539, ptr addrspace(3) %195, align 8, !dbg !69
  store <8 x bfloat> %unmaskedload129, ptr addrspace(3) %198, align 16, !dbg !71
  %540 = extractelement <2 x float> %423, i64 0, !dbg !96
  %541 = fadd float %421, %540, !dbg !96
  %542 = extractelement <2 x float> %423, i64 1, !dbg !96
  %543 = fadd float %542, %541, !dbg !96
  %544 = fadd float %425, %543, !dbg !96
  %545 = bitcast float %544 to i32, !dbg !98
  %546 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %275, i32 %545), !dbg !98
  %547 = bitcast i32 %546 to float, !dbg !98
  %548 = fadd float %544, %547, !dbg !96
  %549 = bitcast float %548 to i32, !dbg !98
  %550 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %549, i32 16415), !dbg !98
  %551 = bitcast i32 %550 to float, !dbg !98
  %552 = fadd float %548, %551, !dbg !96
  %553 = fmul float %278, %428, !dbg !99
  %554 = fadd float %553, %552, !dbg !100
  %555 = icmp slt i32 %296, %199, !dbg !63
  %556 = shufflevector <4 x float> %537, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %557 = shufflevector <4 x float> %537, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %558 = shufflevector <4 x float> %533, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %559 = shufflevector <4 x float> %533, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %560 = shufflevector <4 x float> %529, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %561 = shufflevector <4 x float> %529, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %562 = shufflevector <4 x float> %525, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %563 = shufflevector <4 x float> %525, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %564 = shufflevector <4 x float> %521, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %565 = shufflevector <4 x float> %521, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %566 = shufflevector <4 x float> %517, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %567 = shufflevector <4 x float> %517, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %568 = shufflevector <4 x float> %513, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %569 = shufflevector <4 x float> %513, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %570 = shufflevector <4 x float> %509, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %571 = shufflevector <4 x float> %509, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  br i1 %555, label %276, label %._crit_edge, !dbg !63

._crit_edge:                                      ; preds = %276, %.._crit_edge_crit_edge
  %.pre-phi272 = phi i32 [ %.pre271, %.._crit_edge_crit_edge ], [ %241, %276 ], !dbg !71
  %.pre-phi270 = phi i32 [ %.pre269, %.._crit_edge_crit_edge ], [ %240, %276 ], !dbg !71
  %.pre-phi268 = phi i32 [ %.pre267, %.._crit_edge_crit_edge ], [ %239, %276 ], !dbg !71
  %.pre-phi266 = phi i32 [ %.pre265, %.._crit_edge_crit_edge ], [ %238, %276 ], !dbg !71
  %.pre-phi264 = phi i32 [ %.pre263, %.._crit_edge_crit_edge ], [ %237, %276 ], !dbg !71
  %.pre-phi262 = phi i32 [ %.pre261, %.._crit_edge_crit_edge ], [ %236, %276 ], !dbg !71
  %.pre-phi260 = phi i32 [ %.pre259, %.._crit_edge_crit_edge ], [ %235, %276 ], !dbg !71
  %.pre-phi258 = phi i32 [ %.pre257, %.._crit_edge_crit_edge ], [ %234, %276 ], !dbg !71
  %.pre-phi256 = phi i32 [ %.pre255, %.._crit_edge_crit_edge ], [ %233, %276 ], !dbg !71
  %.pre-phi254 = phi i32 [ %.pre253, %.._crit_edge_crit_edge ], [ %232, %276 ], !dbg !71
  %.pre-phi252 = phi i32 [ %.pre251, %.._crit_edge_crit_edge ], [ %231, %276 ], !dbg !71
  %.pre-phi250 = phi i32 [ %.pre249, %.._crit_edge_crit_edge ], [ %230, %276 ], !dbg !71
  %.pre-phi248 = phi i32 [ %.pre247, %.._crit_edge_crit_edge ], [ %229, %276 ], !dbg !71
  %.pre-phi246 = phi i32 [ %.pre245, %.._crit_edge_crit_edge ], [ %228, %276 ], !dbg !71
  %.pre-phi244 = phi i32 [ %.pre243, %.._crit_edge_crit_edge ], [ %227, %276 ], !dbg !71
  %.pre-phi242 = phi i32 [ %.pre241, %.._crit_edge_crit_edge ], [ %226, %276 ], !dbg !71
  %.pre-phi240 = phi i32 [ %.pre239, %.._crit_edge_crit_edge ], [ %225, %276 ], !dbg !71
  %.pre-phi238 = phi i32 [ %.pre237, %.._crit_edge_crit_edge ], [ %224, %276 ], !dbg !71
  %.pre-phi236 = phi i32 [ %.pre235, %.._crit_edge_crit_edge ], [ %223, %276 ], !dbg !71
  %.pre-phi234 = phi i32 [ %.pre233, %.._crit_edge_crit_edge ], [ %222, %276 ], !dbg !71
  %.pre-phi232 = phi i32 [ %.pre231, %.._crit_edge_crit_edge ], [ %221, %276 ], !dbg !71
  %.pre-phi230 = phi i32 [ %.pre229, %.._crit_edge_crit_edge ], [ %220, %276 ], !dbg !71
  %.pre-phi228 = phi i32 [ %.pre227, %.._crit_edge_crit_edge ], [ %219, %276 ], !dbg !71
  %.pre-phi226 = phi i32 [ %.pre225, %.._crit_edge_crit_edge ], [ %218, %276 ], !dbg !71
  %.pre-phi224 = phi i32 [ %.pre223, %.._crit_edge_crit_edge ], [ %217, %276 ], !dbg !71
  %.pre-phi222 = phi i32 [ %.pre221, %.._crit_edge_crit_edge ], [ %216, %276 ], !dbg !71
  %.pre-phi220 = phi i32 [ %.pre219, %.._crit_edge_crit_edge ], [ %215, %276 ], !dbg !71
  %.pre-phi218 = phi i32 [ %.pre217, %.._crit_edge_crit_edge ], [ %214, %276 ], !dbg !71
  %.pre-phi216 = phi i32 [ %.pre215, %.._crit_edge_crit_edge ], [ %213, %276 ], !dbg !71
  %.pre-phi214 = phi i32 [ %.pre213, %.._crit_edge_crit_edge ], [ %212, %276 ], !dbg !71
  %.pre-phi212 = phi i32 [ %.pre211, %.._crit_edge_crit_edge ], [ %211, %276 ], !dbg !71
  %.pre-phi210 = phi i32 [ %.pre209, %.._crit_edge_crit_edge ], [ %210, %276 ], !dbg !71
  %.lcssa191 = phi float [ 1.000000e+00, %.._crit_edge_crit_edge ], [ %554, %276 ]
  %.lcssa = phi float [ 0xFFF0000000000000, %.._crit_edge_crit_edge ], [ %414, %276 ]
  %572 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %556, %276 ]
  %573 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %557, %276 ]
  %574 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %558, %276 ]
  %575 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %559, %276 ]
  %576 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %560, %276 ]
  %577 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %561, %276 ]
  %578 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %562, %276 ]
  %579 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %563, %276 ]
  %580 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %564, %276 ]
  %581 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %565, %276 ]
  %582 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %566, %276 ]
  %583 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %567, %276 ]
  %584 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %568, %276 ]
  %585 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %569, %276 ]
  %586 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %570, %276 ]
  %587 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %571, %276 ]
  %588 = sub i32 %162, %44, !dbg !63
  %589 = add i32 %588, -1, !dbg !63
  %590 = tail call i32 @llvm.smax.i32(i32 %589, i32 0), !dbg !63
  %591 = add i32 %590, %44, !dbg !63
  %592 = icmp sgt i32 %588, 0, !dbg !63
  fence syncscope("workgroup") release, !dbg !69
  tail call void @llvm.amdgcn.s.barrier(), !dbg !69
  fence syncscope("workgroup") acquire, !dbg !69
  %593 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi210, !dbg !71
  %594 = load <1 x i16>, ptr addrspace(3) %593, align 2, !dbg !71
  %595 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi212, !dbg !71
  %596 = load <1 x i16>, ptr addrspace(3) %595, align 2, !dbg !71
  %597 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi214, !dbg !71
  %598 = load <1 x i16>, ptr addrspace(3) %597, align 2, !dbg !71
  %599 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi216, !dbg !71
  %600 = load <1 x i16>, ptr addrspace(3) %599, align 2, !dbg !71
  %601 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi218, !dbg !71
  %602 = load <1 x i16>, ptr addrspace(3) %601, align 2, !dbg !71
  %603 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi220, !dbg !71
  %604 = load <1 x i16>, ptr addrspace(3) %603, align 2, !dbg !71
  %605 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi222, !dbg !71
  %606 = load <1 x i16>, ptr addrspace(3) %605, align 2, !dbg !71
  %607 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi224, !dbg !71
  %608 = load <1 x i16>, ptr addrspace(3) %607, align 2, !dbg !71
  %609 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi226, !dbg !71
  %610 = load <1 x i16>, ptr addrspace(3) %609, align 2, !dbg !71
  %611 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi228, !dbg !71
  %612 = load <1 x i16>, ptr addrspace(3) %611, align 2, !dbg !71
  %613 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi230, !dbg !71
  %614 = load <1 x i16>, ptr addrspace(3) %613, align 2, !dbg !71
  %615 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi232, !dbg !71
  %616 = load <1 x i16>, ptr addrspace(3) %615, align 2, !dbg !71
  %617 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi234, !dbg !71
  %618 = load <1 x i16>, ptr addrspace(3) %617, align 2, !dbg !71
  %619 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi236, !dbg !71
  %620 = load <1 x i16>, ptr addrspace(3) %619, align 2, !dbg !71
  %621 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi238, !dbg !71
  %622 = load <1 x i16>, ptr addrspace(3) %621, align 2, !dbg !71
  %623 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi240, !dbg !71
  %624 = load <1 x i16>, ptr addrspace(3) %623, align 2, !dbg !71
  %625 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi242, !dbg !71
  %626 = load <1 x i16>, ptr addrspace(3) %625, align 2, !dbg !71
  %627 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi244, !dbg !71
  %628 = load <1 x i16>, ptr addrspace(3) %627, align 2, !dbg !71
  %629 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi246, !dbg !71
  %630 = load <1 x i16>, ptr addrspace(3) %629, align 2, !dbg !71
  %631 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi248, !dbg !71
  %632 = load <1 x i16>, ptr addrspace(3) %631, align 2, !dbg !71
  %633 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi250, !dbg !71
  %634 = load <1 x i16>, ptr addrspace(3) %633, align 2, !dbg !71
  %635 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi252, !dbg !71
  %636 = load <1 x i16>, ptr addrspace(3) %635, align 2, !dbg !71
  %637 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi254, !dbg !71
  %638 = load <1 x i16>, ptr addrspace(3) %637, align 2, !dbg !71
  %639 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi256, !dbg !71
  %640 = load <1 x i16>, ptr addrspace(3) %639, align 2, !dbg !71
  %641 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi258, !dbg !71
  %642 = load <1 x i16>, ptr addrspace(3) %641, align 2, !dbg !71
  %643 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi260, !dbg !71
  %644 = load <1 x i16>, ptr addrspace(3) %643, align 2, !dbg !71
  %645 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi262, !dbg !71
  %646 = load <1 x i16>, ptr addrspace(3) %645, align 2, !dbg !71
  %647 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi264, !dbg !71
  %648 = load <1 x i16>, ptr addrspace(3) %647, align 2, !dbg !71
  %649 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi266, !dbg !71
  %650 = load <1 x i16>, ptr addrspace(3) %649, align 2, !dbg !71
  %651 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi268, !dbg !71
  %652 = load <1 x i16>, ptr addrspace(3) %651, align 2, !dbg !71
  %653 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi270, !dbg !71
  %654 = load <1 x i16>, ptr addrspace(3) %653, align 2, !dbg !71
  %655 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi272, !dbg !71
  %656 = load <1 x i16>, ptr addrspace(3) %655, align 2, !dbg !71
  %657 = shl i32 %591, 4, !dbg !72
  %658 = or disjoint i32 %657, %52, !dbg !73
  %659 = or disjoint i32 %657, %53, !dbg !73
  %660 = or disjoint i32 %657, %54, !dbg !73
  %661 = or disjoint i32 %657, %55, !dbg !73
  %662 = icmp slt i32 %658, %171, !dbg !74
  %663 = icmp slt i32 %659, %171, !dbg !74
  %664 = icmp slt i32 %660, %171, !dbg !74
  %665 = icmp slt i32 %661, %171, !dbg !74
  br i1 %592, label %666, label %703, !dbg !75

666:                                              ; preds = %._crit_edge
  %667 = load <4 x i16>, ptr addrspace(3) %155, align 8, !dbg !48
  %668 = load <4 x i16>, ptr addrspace(3) %153, align 8, !dbg !48
  %669 = load <4 x i16>, ptr addrspace(3) %151, align 8, !dbg !48
  %670 = load <4 x i16>, ptr addrspace(3) %149, align 8, !dbg !48
  %671 = load <4 x i16>, ptr addrspace(3) %147, align 8, !dbg !48
  %672 = load <4 x i16>, ptr addrspace(3) %145, align 8, !dbg !48
  %673 = load <4 x i16>, ptr addrspace(3) %143, align 8, !dbg !48
  %674 = load <4 x i16>, ptr addrspace(3) %141, align 8, !dbg !48
  %675 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %140, !dbg !69
  %676 = load <4 x i16>, ptr addrspace(3) %675, align 8, !dbg !69
  %677 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %138, !dbg !69
  %678 = load <4 x i16>, ptr addrspace(3) %677, align 8, !dbg !69
  %679 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %136, !dbg !69
  %680 = load <4 x i16>, ptr addrspace(3) %679, align 8, !dbg !69
  %681 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %134, !dbg !69
  %682 = load <4 x i16>, ptr addrspace(3) %681, align 8, !dbg !69
  %683 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %132, !dbg !69
  %684 = load <4 x i16>, ptr addrspace(3) %683, align 8, !dbg !69
  %685 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %130, !dbg !69
  %686 = load <4 x i16>, ptr addrspace(3) %685, align 8, !dbg !69
  %687 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %128, !dbg !69
  %688 = load <4 x i16>, ptr addrspace(3) %687, align 8, !dbg !69
  %689 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %125, !dbg !69
  %690 = load <4 x i16>, ptr addrspace(3) %689, align 8, !dbg !69
  %691 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %690, <4 x i16> %674, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !75
  %692 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %688, <4 x i16> %673, <4 x float> %691, i32 0, i32 0, i32 0), !dbg !75
  %693 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %686, <4 x i16> %672, <4 x float> %692, i32 0, i32 0, i32 0), !dbg !75
  %694 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %684, <4 x i16> %671, <4 x float> %693, i32 0, i32 0, i32 0), !dbg !75
  %695 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %682, <4 x i16> %670, <4 x float> %694, i32 0, i32 0, i32 0), !dbg !75
  %696 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %680, <4 x i16> %669, <4 x float> %695, i32 0, i32 0, i32 0), !dbg !75
  %697 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %678, <4 x i16> %668, <4 x float> %696, i32 0, i32 0, i32 0), !dbg !75
  %698 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %676, <4 x i16> %667, <4 x float> %697, i32 0, i32 0, i32 0), !dbg !75
  %699 = extractelement <4 x float> %698, i64 0, !dbg !75
  %700 = extractelement <4 x float> %698, i64 1, !dbg !75
  %701 = extractelement <4 x float> %698, i64 2, !dbg !75
  %702 = extractelement <4 x float> %698, i64 3, !dbg !75
  br label %703, !dbg !75

703:                                              ; preds = %666, %._crit_edge
  %704 = phi float [ %699, %666 ], [ 0.000000e+00, %._crit_edge ], !dbg !75
  %705 = phi float [ %700, %666 ], [ 0.000000e+00, %._crit_edge ], !dbg !75
  %706 = phi float [ %701, %666 ], [ 0.000000e+00, %._crit_edge ], !dbg !75
  %707 = phi float [ %702, %666 ], [ 0.000000e+00, %._crit_edge ], !dbg !75
  %708 = fmul float %8, %704, !dbg !76
  %709 = fmul float %8, %705, !dbg !76
  %710 = fmul float %8, %706, !dbg !76
  %711 = fmul float %8, %707, !dbg !76
  %712 = fadd float %708, 0.000000e+00, !dbg !77
  %713 = fadd float %709, 0.000000e+00, !dbg !77
  %714 = fadd float %710, 0.000000e+00, !dbg !77
  %715 = fadd float %711, 0.000000e+00, !dbg !77
  %716 = and i1 %95, %662, !dbg !78
  %717 = and i1 %95, %663, !dbg !78
  %718 = and i1 %95, %664, !dbg !78
  %719 = and i1 %95, %665, !dbg !78
  %720 = select i1 %716, float %712, float 0xFFF0000000000000, !dbg !79
  %721 = select i1 %717, float %713, float 0xFFF0000000000000, !dbg !79
  %722 = select i1 %718, float %714, float 0xFFF0000000000000, !dbg !79
  %723 = select i1 %719, float %715, float 0xFFF0000000000000, !dbg !79
  %724 = tail call float @llvm.maxnum.f32(float %720, float %721), !dbg !80
  %725 = tail call float @llvm.maxnum.f32(float %724, float %722), !dbg !80
  %726 = tail call float @llvm.maxnum.f32(float %725, float %723), !dbg !80
  %727 = bitcast float %726 to i32, !dbg !85
  %728 = shl i32 %47, 2, !dbg !85
  %729 = xor i32 %728, 128, !dbg !85
  %730 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %729, i32 %727), !dbg !85
  %731 = bitcast i32 %730 to float, !dbg !85
  %732 = tail call float @llvm.maxnum.f32(float %726, float %731), !dbg !80
  %733 = bitcast float %732 to i32, !dbg !85
  %734 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %733, i32 16415), !dbg !85
  %735 = bitcast i32 %734 to float, !dbg !85
  %736 = tail call float @llvm.maxnum.f32(float %732, float %735), !dbg !80
  %737 = tail call float @llvm.maxnum.f32(float %.lcssa, float %736), !dbg !86
  %738 = fcmp one float %737, 0xFFF0000000000000, !dbg !87
  %739 = select i1 %738, float %737, float 0.000000e+00, !dbg !88
  %740 = fsub float %720, %739, !dbg !89
  %741 = fsub float %721, %739, !dbg !89
  %742 = fsub float %722, %739, !dbg !89
  %743 = fsub float %723, %739, !dbg !89
  %744 = fmul float %740, 0x3FF7154760000000, !dbg !90
  %745 = tail call float @llvm.exp2.f32(float %744), !dbg !90
  %746 = fmul float %741, 0x3FF7154760000000, !dbg !90
  %747 = tail call float @llvm.exp2.f32(float %746), !dbg !90
  %748 = fmul float %742, 0x3FF7154760000000, !dbg !90
  %749 = tail call float @llvm.exp2.f32(float %748), !dbg !90
  %750 = fmul float %743, 0x3FF7154760000000, !dbg !90
  %751 = tail call float @llvm.exp2.f32(float %750), !dbg !90
  %752 = fsub float %.lcssa, %739, !dbg !91
  %753 = fmul float %752, 0x3FF7154760000000, !dbg !92
  %754 = tail call float @llvm.exp2.f32(float %753), !dbg !92
  %755 = extractelement <2 x float> %572, i64 0, !dbg !95
  %756 = extractelement <2 x float> %572, i64 1, !dbg !95
  %757 = extractelement <2 x float> %573, i64 0, !dbg !95
  %758 = extractelement <2 x float> %573, i64 1, !dbg !95
  %759 = extractelement <2 x float> %574, i64 0, !dbg !95
  %760 = extractelement <2 x float> %574, i64 1, !dbg !95
  %761 = extractelement <2 x float> %575, i64 0, !dbg !95
  %762 = extractelement <2 x float> %575, i64 1, !dbg !95
  %763 = extractelement <2 x float> %576, i64 0, !dbg !95
  %764 = extractelement <2 x float> %576, i64 1, !dbg !95
  %765 = extractelement <2 x float> %577, i64 0, !dbg !95
  %766 = extractelement <2 x float> %577, i64 1, !dbg !95
  %767 = extractelement <2 x float> %578, i64 0, !dbg !95
  %768 = extractelement <2 x float> %578, i64 1, !dbg !95
  %769 = extractelement <2 x float> %579, i64 0, !dbg !95
  %770 = extractelement <2 x float> %579, i64 1, !dbg !95
  %771 = extractelement <2 x float> %580, i64 0, !dbg !95
  %772 = extractelement <2 x float> %580, i64 1, !dbg !95
  %773 = extractelement <2 x float> %581, i64 0, !dbg !95
  %774 = extractelement <2 x float> %581, i64 1, !dbg !95
  %775 = extractelement <2 x float> %582, i64 0, !dbg !95
  %776 = extractelement <2 x float> %582, i64 1, !dbg !95
  %777 = extractelement <2 x float> %583, i64 0, !dbg !95
  %778 = extractelement <2 x float> %583, i64 1, !dbg !95
  %779 = extractelement <2 x float> %584, i64 0, !dbg !95
  %780 = extractelement <2 x float> %584, i64 1, !dbg !95
  %781 = extractelement <2 x float> %585, i64 0, !dbg !95
  %782 = extractelement <2 x float> %585, i64 1, !dbg !95
  %783 = extractelement <2 x float> %586, i64 0, !dbg !95
  %784 = extractelement <2 x float> %586, i64 1, !dbg !95
  %785 = extractelement <2 x float> %587, i64 0, !dbg !95
  %786 = extractelement <2 x float> %587, i64 1, !dbg !95
  br i1 %592, label %787, label %981, !dbg !95

787:                                              ; preds = %703
  %788 = insertelement <2 x float> poison, float %754, i64 0, !dbg !93
  %789 = bitcast float %751 to i32, !dbg !94
  %790 = and i32 %789, 2139095040, !dbg !94
  %791 = icmp eq i32 %790, 2139095040, !dbg !94
  %792 = and i32 %789, 65535, !dbg !94
  %793 = icmp ne i32 %792, 0, !dbg !94
  %794 = and i1 %791, %793, !dbg !94
  %795 = or i32 %789, 65536, !dbg !94
  %796 = lshr i32 %789, 16, !dbg !94
  %797 = and i32 %796, 1, !dbg !94
  %798 = add nuw nsw i32 %797, 32767, !dbg !94
  %799 = select i1 %791, i32 0, i32 %798, !dbg !94
  %800 = add i32 %799, %789, !dbg !94
  %801 = select i1 %794, i32 %795, i32 %800, !dbg !94
  %802 = lshr i32 %801, 16, !dbg !94
  %803 = trunc nuw i32 %802 to i16, !dbg !94
  %804 = bitcast float %749 to i32, !dbg !94
  %805 = and i32 %804, 2139095040, !dbg !94
  %806 = icmp eq i32 %805, 2139095040, !dbg !94
  %807 = and i32 %804, 65535, !dbg !94
  %808 = icmp ne i32 %807, 0, !dbg !94
  %809 = and i1 %806, %808, !dbg !94
  %810 = or i32 %804, 65536, !dbg !94
  %811 = lshr i32 %804, 16, !dbg !94
  %812 = and i32 %811, 1, !dbg !94
  %813 = add nuw nsw i32 %812, 32767, !dbg !94
  %814 = select i1 %806, i32 0, i32 %813, !dbg !94
  %815 = add i32 %814, %804, !dbg !94
  %816 = select i1 %809, i32 %810, i32 %815, !dbg !94
  %817 = lshr i32 %816, 16, !dbg !94
  %818 = trunc nuw i32 %817 to i16, !dbg !94
  %819 = bitcast float %747 to i32, !dbg !94
  %820 = and i32 %819, 2139095040, !dbg !94
  %821 = icmp eq i32 %820, 2139095040, !dbg !94
  %822 = and i32 %819, 65535, !dbg !94
  %823 = icmp ne i32 %822, 0, !dbg !94
  %824 = and i1 %821, %823, !dbg !94
  %825 = or i32 %819, 65536, !dbg !94
  %826 = lshr i32 %819, 16, !dbg !94
  %827 = and i32 %826, 1, !dbg !94
  %828 = add nuw nsw i32 %827, 32767, !dbg !94
  %829 = select i1 %821, i32 0, i32 %828, !dbg !94
  %830 = add i32 %829, %819, !dbg !94
  %831 = select i1 %824, i32 %825, i32 %830, !dbg !94
  %832 = lshr i32 %831, 16, !dbg !94
  %833 = trunc nuw i32 %832 to i16, !dbg !94
  %834 = bitcast float %745 to i32, !dbg !94
  %835 = and i32 %834, 2139095040, !dbg !94
  %836 = icmp eq i32 %835, 2139095040, !dbg !94
  %837 = and i32 %834, 65535, !dbg !94
  %838 = icmp ne i32 %837, 0, !dbg !94
  %839 = and i1 %836, %838, !dbg !94
  %840 = or i32 %834, 65536, !dbg !94
  %841 = lshr i32 %834, 16, !dbg !94
  %842 = and i32 %841, 1, !dbg !94
  %843 = add nuw nsw i32 %842, 32767, !dbg !94
  %844 = select i1 %836, i32 0, i32 %843, !dbg !94
  %845 = add i32 %844, %834, !dbg !94
  %846 = select i1 %839, i32 %840, i32 %845, !dbg !94
  %847 = lshr i32 %846, 16, !dbg !94
  %848 = trunc nuw i32 %847 to i16, !dbg !94
  %849 = insertelement <4 x i16> poison, i16 %848, i64 0, !dbg !95
  %850 = insertelement <4 x i16> %849, i16 %833, i64 1, !dbg !95
  %851 = insertelement <4 x i16> %850, i16 %818, i64 2, !dbg !95
  %852 = insertelement <4 x i16> %851, i16 %803, i64 3, !dbg !95
  %853 = extractelement <1 x i16> %594, i64 0, !dbg !95
  %854 = insertelement <4 x i16> poison, i16 %853, i64 0, !dbg !95
  %855 = extractelement <1 x i16> %596, i64 0, !dbg !95
  %856 = insertelement <4 x i16> %854, i16 %855, i64 1, !dbg !95
  %857 = extractelement <1 x i16> %598, i64 0, !dbg !95
  %858 = insertelement <4 x i16> %856, i16 %857, i64 2, !dbg !95
  %859 = extractelement <1 x i16> %600, i64 0, !dbg !95
  %860 = insertelement <4 x i16> %858, i16 %859, i64 3, !dbg !95
  %861 = extractelement <1 x i16> %602, i64 0, !dbg !95
  %862 = insertelement <4 x i16> poison, i16 %861, i64 0, !dbg !95
  %863 = extractelement <1 x i16> %604, i64 0, !dbg !95
  %864 = insertelement <4 x i16> %862, i16 %863, i64 1, !dbg !95
  %865 = extractelement <1 x i16> %606, i64 0, !dbg !95
  %866 = insertelement <4 x i16> %864, i16 %865, i64 2, !dbg !95
  %867 = extractelement <1 x i16> %608, i64 0, !dbg !95
  %868 = insertelement <4 x i16> %866, i16 %867, i64 3, !dbg !95
  %869 = extractelement <1 x i16> %610, i64 0, !dbg !95
  %870 = insertelement <4 x i16> poison, i16 %869, i64 0, !dbg !95
  %871 = extractelement <1 x i16> %612, i64 0, !dbg !95
  %872 = insertelement <4 x i16> %870, i16 %871, i64 1, !dbg !95
  %873 = extractelement <1 x i16> %614, i64 0, !dbg !95
  %874 = insertelement <4 x i16> %872, i16 %873, i64 2, !dbg !95
  %875 = extractelement <1 x i16> %616, i64 0, !dbg !95
  %876 = insertelement <4 x i16> %874, i16 %875, i64 3, !dbg !95
  %877 = extractelement <1 x i16> %618, i64 0, !dbg !95
  %878 = insertelement <4 x i16> poison, i16 %877, i64 0, !dbg !95
  %879 = extractelement <1 x i16> %620, i64 0, !dbg !95
  %880 = insertelement <4 x i16> %878, i16 %879, i64 1, !dbg !95
  %881 = extractelement <1 x i16> %622, i64 0, !dbg !95
  %882 = insertelement <4 x i16> %880, i16 %881, i64 2, !dbg !95
  %883 = extractelement <1 x i16> %624, i64 0, !dbg !95
  %884 = insertelement <4 x i16> %882, i16 %883, i64 3, !dbg !95
  %885 = extractelement <1 x i16> %626, i64 0, !dbg !95
  %886 = insertelement <4 x i16> poison, i16 %885, i64 0, !dbg !95
  %887 = extractelement <1 x i16> %628, i64 0, !dbg !95
  %888 = insertelement <4 x i16> %886, i16 %887, i64 1, !dbg !95
  %889 = extractelement <1 x i16> %630, i64 0, !dbg !95
  %890 = insertelement <4 x i16> %888, i16 %889, i64 2, !dbg !95
  %891 = extractelement <1 x i16> %632, i64 0, !dbg !95
  %892 = insertelement <4 x i16> %890, i16 %891, i64 3, !dbg !95
  %893 = extractelement <1 x i16> %634, i64 0, !dbg !95
  %894 = insertelement <4 x i16> poison, i16 %893, i64 0, !dbg !95
  %895 = extractelement <1 x i16> %636, i64 0, !dbg !95
  %896 = insertelement <4 x i16> %894, i16 %895, i64 1, !dbg !95
  %897 = extractelement <1 x i16> %638, i64 0, !dbg !95
  %898 = insertelement <4 x i16> %896, i16 %897, i64 2, !dbg !95
  %899 = extractelement <1 x i16> %640, i64 0, !dbg !95
  %900 = insertelement <4 x i16> %898, i16 %899, i64 3, !dbg !95
  %901 = extractelement <1 x i16> %642, i64 0, !dbg !95
  %902 = insertelement <4 x i16> poison, i16 %901, i64 0, !dbg !95
  %903 = extractelement <1 x i16> %644, i64 0, !dbg !95
  %904 = insertelement <4 x i16> %902, i16 %903, i64 1, !dbg !95
  %905 = extractelement <1 x i16> %646, i64 0, !dbg !95
  %906 = insertelement <4 x i16> %904, i16 %905, i64 2, !dbg !95
  %907 = extractelement <1 x i16> %648, i64 0, !dbg !95
  %908 = insertelement <4 x i16> %906, i16 %907, i64 3, !dbg !95
  %909 = extractelement <1 x i16> %650, i64 0, !dbg !95
  %910 = insertelement <4 x i16> poison, i16 %909, i64 0, !dbg !95
  %911 = extractelement <1 x i16> %652, i64 0, !dbg !95
  %912 = insertelement <4 x i16> %910, i16 %911, i64 1, !dbg !95
  %913 = extractelement <1 x i16> %654, i64 0, !dbg !95
  %914 = insertelement <4 x i16> %912, i16 %913, i64 2, !dbg !95
  %915 = extractelement <1 x i16> %656, i64 0, !dbg !95
  %916 = insertelement <4 x i16> %914, i16 %915, i64 3, !dbg !95
  %917 = shufflevector <2 x float> %586, <2 x float> %587, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %918 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %919 = fmul <4 x float> %917, %918, !dbg !95
  %920 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %860, <4 x i16> %852, <4 x float> %919, i32 0, i32 0, i32 0), !dbg !95
  %921 = extractelement <4 x float> %920, i64 0, !dbg !95
  %922 = extractelement <4 x float> %920, i64 1, !dbg !95
  %923 = extractelement <4 x float> %920, i64 2, !dbg !95
  %924 = extractelement <4 x float> %920, i64 3, !dbg !95
  %925 = shufflevector <2 x float> %584, <2 x float> %585, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %926 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %927 = fmul <4 x float> %925, %926, !dbg !95
  %928 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %868, <4 x i16> %852, <4 x float> %927, i32 0, i32 0, i32 0), !dbg !95
  %929 = extractelement <4 x float> %928, i64 0, !dbg !95
  %930 = extractelement <4 x float> %928, i64 1, !dbg !95
  %931 = extractelement <4 x float> %928, i64 2, !dbg !95
  %932 = extractelement <4 x float> %928, i64 3, !dbg !95
  %933 = shufflevector <2 x float> %582, <2 x float> %583, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %934 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %935 = fmul <4 x float> %933, %934, !dbg !95
  %936 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %876, <4 x i16> %852, <4 x float> %935, i32 0, i32 0, i32 0), !dbg !95
  %937 = extractelement <4 x float> %936, i64 0, !dbg !95
  %938 = extractelement <4 x float> %936, i64 1, !dbg !95
  %939 = extractelement <4 x float> %936, i64 2, !dbg !95
  %940 = extractelement <4 x float> %936, i64 3, !dbg !95
  %941 = shufflevector <2 x float> %580, <2 x float> %581, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %942 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %943 = fmul <4 x float> %941, %942, !dbg !95
  %944 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %884, <4 x i16> %852, <4 x float> %943, i32 0, i32 0, i32 0), !dbg !95
  %945 = extractelement <4 x float> %944, i64 0, !dbg !95
  %946 = extractelement <4 x float> %944, i64 1, !dbg !95
  %947 = extractelement <4 x float> %944, i64 2, !dbg !95
  %948 = extractelement <4 x float> %944, i64 3, !dbg !95
  %949 = shufflevector <2 x float> %578, <2 x float> %579, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %950 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %951 = fmul <4 x float> %949, %950, !dbg !95
  %952 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %892, <4 x i16> %852, <4 x float> %951, i32 0, i32 0, i32 0), !dbg !95
  %953 = extractelement <4 x float> %952, i64 0, !dbg !95
  %954 = extractelement <4 x float> %952, i64 1, !dbg !95
  %955 = extractelement <4 x float> %952, i64 2, !dbg !95
  %956 = extractelement <4 x float> %952, i64 3, !dbg !95
  %957 = shufflevector <2 x float> %576, <2 x float> %577, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %958 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %959 = fmul <4 x float> %957, %958, !dbg !95
  %960 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %900, <4 x i16> %852, <4 x float> %959, i32 0, i32 0, i32 0), !dbg !95
  %961 = extractelement <4 x float> %960, i64 0, !dbg !95
  %962 = extractelement <4 x float> %960, i64 1, !dbg !95
  %963 = extractelement <4 x float> %960, i64 2, !dbg !95
  %964 = extractelement <4 x float> %960, i64 3, !dbg !95
  %965 = shufflevector <2 x float> %574, <2 x float> %575, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %966 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %967 = fmul <4 x float> %965, %966, !dbg !95
  %968 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %908, <4 x i16> %852, <4 x float> %967, i32 0, i32 0, i32 0), !dbg !95
  %969 = extractelement <4 x float> %968, i64 0, !dbg !95
  %970 = extractelement <4 x float> %968, i64 1, !dbg !95
  %971 = extractelement <4 x float> %968, i64 2, !dbg !95
  %972 = extractelement <4 x float> %968, i64 3, !dbg !95
  %973 = shufflevector <2 x float> %572, <2 x float> %573, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !95
  %974 = shufflevector <2 x float> %788, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !95
  %975 = fmul <4 x float> %973, %974, !dbg !95
  %976 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %916, <4 x i16> %852, <4 x float> %975, i32 0, i32 0, i32 0), !dbg !95
  %977 = extractelement <4 x float> %976, i64 0, !dbg !95
  %978 = extractelement <4 x float> %976, i64 1, !dbg !95
  %979 = extractelement <4 x float> %976, i64 2, !dbg !95
  %980 = extractelement <4 x float> %976, i64 3, !dbg !95
  br label %981, !dbg !95

981:                                              ; preds = %787, %703
  %982 = phi float [ %739, %787 ], [ %.lcssa, %703 ]
  %983 = phi float [ %980, %787 ], [ %758, %703 ]
  %984 = phi float [ %979, %787 ], [ %757, %703 ]
  %985 = phi float [ %978, %787 ], [ %756, %703 ]
  %986 = phi float [ %977, %787 ], [ %755, %703 ]
  %987 = phi float [ %972, %787 ], [ %762, %703 ]
  %988 = phi float [ %971, %787 ], [ %761, %703 ]
  %989 = phi float [ %970, %787 ], [ %760, %703 ]
  %990 = phi float [ %969, %787 ], [ %759, %703 ]
  %991 = phi float [ %964, %787 ], [ %766, %703 ]
  %992 = phi float [ %963, %787 ], [ %765, %703 ]
  %993 = phi float [ %962, %787 ], [ %764, %703 ]
  %994 = phi float [ %961, %787 ], [ %763, %703 ]
  %995 = phi float [ %956, %787 ], [ %770, %703 ]
  %996 = phi float [ %955, %787 ], [ %769, %703 ]
  %997 = phi float [ %954, %787 ], [ %768, %703 ]
  %998 = phi float [ %953, %787 ], [ %767, %703 ]
  %999 = phi float [ %948, %787 ], [ %774, %703 ]
  %1000 = phi float [ %947, %787 ], [ %773, %703 ]
  %1001 = phi float [ %946, %787 ], [ %772, %703 ]
  %1002 = phi float [ %945, %787 ], [ %771, %703 ]
  %1003 = phi float [ %940, %787 ], [ %778, %703 ]
  %1004 = phi float [ %939, %787 ], [ %777, %703 ]
  %1005 = phi float [ %938, %787 ], [ %776, %703 ]
  %1006 = phi float [ %937, %787 ], [ %775, %703 ]
  %1007 = phi float [ %932, %787 ], [ %782, %703 ]
  %1008 = phi float [ %931, %787 ], [ %781, %703 ]
  %1009 = phi float [ %930, %787 ], [ %780, %703 ]
  %1010 = phi float [ %929, %787 ], [ %779, %703 ]
  %1011 = phi float [ %924, %787 ], [ %786, %703 ]
  %1012 = phi float [ %923, %787 ], [ %785, %703 ]
  %1013 = phi float [ %922, %787 ], [ %784, %703 ]
  %1014 = phi float [ %921, %787 ], [ %783, %703 ]
  %1015 = fadd float %745, %747, !dbg !96
  %1016 = fadd float %749, %1015, !dbg !96
  %1017 = fadd float %751, %1016, !dbg !96
  %1018 = bitcast float %1017 to i32, !dbg !98
  %1019 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %729, i32 %1018), !dbg !98
  %1020 = bitcast i32 %1019 to float, !dbg !98
  %1021 = fadd float %1017, %1020, !dbg !96
  %1022 = bitcast float %1021 to i32, !dbg !98
  %1023 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %1022, i32 16415), !dbg !98
  %1024 = bitcast i32 %1023 to float, !dbg !98
  %1025 = fadd float %1021, %1024, !dbg !96
  %1026 = fmul float %.lcssa191, %754, !dbg !99
  %1027 = fadd float %1026, %1025, !dbg !100
  %1028 = select i1 %592, float %1027, float %.lcssa191, !dbg !63
  %1029 = shl nsw i64 %77, 16, !dbg !101
  %1030 = shl i32 %75, 11, !dbg !102
  %1031 = sext i32 %1030 to i64, !dbg !103
  %1032 = shl i32 %26, 7, !dbg !104
  %1033 = sext i32 %1032 to i64, !dbg !105
  %1034 = add nsw i64 %1031, %1033, !dbg !103
  %1035 = add nsw i64 %1034, %1029, !dbg !105
  %1036 = or disjoint i64 %1035, %82, !dbg !106
  %1037 = or disjoint i64 %1035, %83, !dbg !106
  %1038 = or disjoint i64 %1035, %84, !dbg !106
  %1039 = or disjoint i64 %1035, %85, !dbg !106
  %1040 = or disjoint i64 %1035, %86, !dbg !106
  %1041 = or disjoint i64 %1035, %87, !dbg !106
  %1042 = or disjoint i64 %1035, %88, !dbg !106
  %1043 = or disjoint i64 %1035, %89, !dbg !106
  %1044 = getelementptr float, ptr addrspace(1) %0, i64 %1036, !dbg !107
  %1045 = getelementptr float, ptr addrspace(1) %0, i64 %1037, !dbg !107
  %1046 = getelementptr float, ptr addrspace(1) %0, i64 %1038, !dbg !107
  %1047 = getelementptr float, ptr addrspace(1) %0, i64 %1039, !dbg !107
  %1048 = getelementptr float, ptr addrspace(1) %0, i64 %1040, !dbg !107
  %1049 = getelementptr float, ptr addrspace(1) %0, i64 %1041, !dbg !107
  %1050 = getelementptr float, ptr addrspace(1) %0, i64 %1042, !dbg !107
  %1051 = getelementptr float, ptr addrspace(1) %0, i64 %1043, !dbg !107
  %1052 = and i32 %47, 192, !dbg !108
  %1053 = icmp eq i32 %1052, 0, !dbg !108
  %1054 = and i1 %1053, %95, !dbg !108
  %1055 = insertelement <4 x float> poison, float %1014, i64 0, !dbg !108
  %1056 = insertelement <4 x float> %1055, float %1013, i64 1, !dbg !108
  %1057 = insertelement <4 x float> %1056, float %1012, i64 2, !dbg !108
  %1058 = insertelement <4 x float> %1057, float %1011, i64 3, !dbg !108
  %1059 = insertelement <4 x i1> poison, i1 %1054, i64 0, !dbg !108
  %1060 = shufflevector <4 x i1> %1059, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1058, ptr addrspace(1) %1044, i32 16, <4 x i1> %1060), !dbg !108
  %1061 = insertelement <4 x float> poison, float %1010, i64 0, !dbg !108
  %1062 = insertelement <4 x float> %1061, float %1009, i64 1, !dbg !108
  %1063 = insertelement <4 x float> %1062, float %1008, i64 2, !dbg !108
  %1064 = insertelement <4 x float> %1063, float %1007, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1064, ptr addrspace(1) %1045, i32 16, <4 x i1> %1060), !dbg !108
  %1065 = insertelement <4 x float> poison, float %1006, i64 0, !dbg !108
  %1066 = insertelement <4 x float> %1065, float %1005, i64 1, !dbg !108
  %1067 = insertelement <4 x float> %1066, float %1004, i64 2, !dbg !108
  %1068 = insertelement <4 x float> %1067, float %1003, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1068, ptr addrspace(1) %1046, i32 16, <4 x i1> %1060), !dbg !108
  %1069 = insertelement <4 x float> poison, float %1002, i64 0, !dbg !108
  %1070 = insertelement <4 x float> %1069, float %1001, i64 1, !dbg !108
  %1071 = insertelement <4 x float> %1070, float %1000, i64 2, !dbg !108
  %1072 = insertelement <4 x float> %1071, float %999, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1072, ptr addrspace(1) %1047, i32 16, <4 x i1> %1060), !dbg !108
  %1073 = insertelement <4 x float> poison, float %998, i64 0, !dbg !108
  %1074 = insertelement <4 x float> %1073, float %997, i64 1, !dbg !108
  %1075 = insertelement <4 x float> %1074, float %996, i64 2, !dbg !108
  %1076 = insertelement <4 x float> %1075, float %995, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1076, ptr addrspace(1) %1048, i32 16, <4 x i1> %1060), !dbg !108
  %1077 = insertelement <4 x float> poison, float %994, i64 0, !dbg !108
  %1078 = insertelement <4 x float> %1077, float %993, i64 1, !dbg !108
  %1079 = insertelement <4 x float> %1078, float %992, i64 2, !dbg !108
  %1080 = insertelement <4 x float> %1079, float %991, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1080, ptr addrspace(1) %1049, i32 16, <4 x i1> %1060), !dbg !108
  %1081 = insertelement <4 x float> poison, float %990, i64 0, !dbg !108
  %1082 = insertelement <4 x float> %1081, float %989, i64 1, !dbg !108
  %1083 = insertelement <4 x float> %1082, float %988, i64 2, !dbg !108
  %1084 = insertelement <4 x float> %1083, float %987, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1084, ptr addrspace(1) %1050, i32 16, <4 x i1> %1060), !dbg !108
  %1085 = insertelement <4 x float> poison, float %986, i64 0, !dbg !108
  %1086 = insertelement <4 x float> %1085, float %985, i64 1, !dbg !108
  %1087 = insertelement <4 x float> %1086, float %984, i64 2, !dbg !108
  %1088 = insertelement <4 x float> %1087, float %983, i64 3, !dbg !108
  tail call void @llvm.masked.store.v4f32.p1(<4 x float> %1088, ptr addrspace(1) %1051, i32 16, <4 x i1> %1060), !dbg !108
  %1089 = shl nsw i64 %77, 9, !dbg !109
  %1090 = shl i32 %75, 4, !dbg !110
  %1091 = sext i32 %1090 to i64, !dbg !111
  %1092 = sext i32 %26 to i64, !dbg !112
  %1093 = add nsw i64 %1091, %1092, !dbg !111
  %1094 = add nsw i64 %1093, %1089, !dbg !112
  %1095 = getelementptr float, ptr addrspace(1) %1, i64 %1094, !dbg !113
  %urem = and i32 %47, 240, !dbg !114
  %1096 = icmp eq i32 %urem, 0, !dbg !114
  %1097 = and i1 %1096, %95, !dbg !114
  %1098 = insertelement <1 x float> poison, float %982, i64 0, !dbg !114
  %1099 = insertelement <1 x i1> poison, i1 %1097, i64 0, !dbg !114
  tail call void @llvm.masked.store.v1f32.p1(<1 x float> %1098, ptr addrspace(1) %1095, i32 4, <1 x i1> %1099), !dbg !114
  %1100 = getelementptr float, ptr addrspace(1) %2, i64 %1094, !dbg !115
  %1101 = insertelement <1 x float> poison, float %1028, i64 0, !dbg !116
  tail call void @llvm.masked.store.v1f32.p1(<1 x float> %1101, ptr addrspace(1) %1100, i32 4, <1 x i1> %1099), !dbg !116
  br label %common.ret, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.z() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <1 x i32> @llvm.masked.load.v1i32.p1(ptr addrspace(1) nocapture, i32 immarg, <1 x i1>, <1 x i32>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) nocapture, i32 immarg, <8 x i1>, <8 x bfloat>) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #0

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16>, <4 x i16>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #5

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.swizzle(i32, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v4f32.p1(<4 x float>, ptr addrspace(1) nocapture, i32 immarg, <4 x i1>) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v1f32.p1(<1 x float>, ptr addrspace(1) nocapture, i32 immarg, <1 x i1>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.exp2.v2f32(<2 x float>) #7

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "triton_unified_attention.py", directory: "/usr/local/lib/python3.12/dist-packages/vllm/attention/ops")
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !3, file: !3, line: 502, type: !5, scopeLine: 502, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "kernel_unified_attention_3d", linkageName: "kernel_unified_attention_3d", scope: !3, file: !3, line: 296, type: !5, scopeLine: 296, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DILocation(line: 340, column: 32, scope: !7)
!9 = !DILocation(line: 341, column: 29, scope: !7)
!10 = !DILocation(line: 339, column: 39, scope: !7)
!11 = !DILocation(line: 48, column: 18, scope: !12, inlinedAt: !13)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!13 = !DILocation(line: 344, column: 36, scope: !7)
!14 = !DILocation(line: 347, column: 32, scope: !7)
!15 = !DILocation(line: 346, column: 32, scope: !7)
!16 = !DILocation(line: 347, column: 44, scope: !7)
!17 = !DILocation(line: 347, column: 54, scope: !7)
!18 = !DILocation(line: 349, column: 45, scope: !7)
!19 = !DILocation(line: 352, column: 74, scope: !7)
!20 = !DILocation(line: 352, column: 42, scope: !7)
!21 = !DILocation(line: 355, column: 10, scope: !7)
!22 = !DILocation(line: 357, column: 27, scope: !7)
!23 = !DILocation(line: 357, column: 38, scope: !7)
!24 = !DILocation(line: 0, scope: !7)
!25 = !DILocation(line: 361, column: 37, scope: !7)
!26 = !DILocation(line: 361, column: 22, scope: !7)
!27 = !DILocation(line: 22, column: 20, scope: !12, inlinedAt: !28)
!28 = !DILocation(line: 365, column: 42, scope: !7)
!29 = !DILocation(line: 22, column: 26, scope: !12, inlinedAt: !28)
!30 = !DILocation(line: 367, column: 18, scope: !7)
!31 = !DILocation(line: 367, column: 39, scope: !7)
!32 = !DILocation(line: 367, column: 53, scope: !7)
!33 = !DILocation(line: 370, column: 26, scope: !7)
!34 = !DILocation(line: 371, column: 26, scope: !7)
!35 = !DILocation(line: 373, column: 56, scope: !7)
!36 = !DILocation(line: 373, column: 46, scope: !7)
!37 = !DILocation(line: 375, column: 52, scope: !7)
!38 = !DILocation(line: 376, column: 35, scope: !7)
!39 = !DILocation(line: 377, column: 17, scope: !7)
!40 = !DILocation(line: 377, column: 8, scope: !7)
!41 = !DILocation(line: 379, column: 46, scope: !7)
!42 = !DILocation(line: 380, column: 46, scope: !7)
!43 = !DILocation(line: 380, column: 63, scope: !7)
!44 = !DILocation(line: 383, column: 40, scope: !7)
!45 = !DILocation(line: 384, column: 45, scope: !7)
!46 = !DILocation(line: 389, column: 57, scope: !7)
!47 = !DILocation(line: 388, column: 20, scope: !7)
!48 = !DILocation(line: 388, column: 8, scope: !7)
!49 = !DILocation(line: 393, column: 35, scope: !7)
!50 = !DILocation(line: 22, column: 20, scope: !12, inlinedAt: !51)
!51 = !DILocation(line: 413, column: 34, scope: !7)
!52 = !DILocation(line: 22, column: 26, scope: !12, inlinedAt: !51)
!53 = !DILocation(line: 418, column: 28, scope: !7)
!54 = !DILocation(line: 418, column: 33, scope: !7)
!55 = !DILocation(line: 418, column: 53, scope: !7)
!56 = !DILocation(line: 420, column: 56, scope: !7)
!57 = !DILocation(line: 425, column: 34, scope: !7)
!58 = !DILocation(line: 427, column: 38, scope: !7)
!59 = !DILocation(line: 430, column: 34, scope: !7)
!60 = !DILocation(line: 432, column: 38, scope: !7)
!61 = !DILocation(line: 462, column: 55, scope: !7)
!62 = !DILocation(line: 462, column: 76, scope: !7)
!63 = !DILocation(line: 418, column: 12, scope: !7)
!64 = !DILocation(line: 420, column: 77, scope: !7)
!65 = !DILocation(line: 420, column: 37, scope: !7)
!66 = !DILocation(line: 424, column: 41, scope: !7)
!67 = !DILocation(line: 429, column: 41, scope: !7)
!68 = !DILocation(line: 435, column: 41, scope: !7)
!69 = !DILocation(line: 435, column: 25, scope: !7)
!70 = !DILocation(line: 448, column: 43, scope: !7)
!71 = !DILocation(line: 448, column: 25, scope: !7)
!72 = !DILocation(line: 460, column: 25, scope: !7)
!73 = !DILocation(line: 460, column: 38, scope: !7)
!74 = !DILocation(line: 462, column: 41, scope: !7)
!75 = !DILocation(line: 467, column: 31, scope: !7)
!76 = !DILocation(line: 467, column: 21, scope: !7)
!77 = !DILocation(line: 467, column: 13, scope: !7)
!78 = !DILocation(line: 472, column: 69, scope: !7)
!79 = !DILocation(line: 473, column: 24, scope: !7)
!80 = !DILocation(line: 163, column: 27, scope: !81, inlinedAt: !84)
!81 = distinct !DILexicalBlockFile(scope: !83, file: !82, discriminator: 0)
!82 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.12/dist-packages/triton/language")
!83 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!84 = !DILocation(line: 496, column: 35, scope: !7)
!85 = !DILocation(line: 184, column: 40, scope: !83, inlinedAt: !84)
!86 = !DILocation(line: 496, column: 28, scope: !7)
!87 = !DILocation(line: 499, column: 29, scope: !7)
!88 = !DILocation(line: 499, column: 49, scope: !7)
!89 = !DILocation(line: 502, column: 23, scope: !7)
!90 = !DILocation(line: 502, column: 19, scope: !7)
!91 = !DILocation(line: 508, column: 27, scope: !7)
!92 = !DILocation(line: 508, column: 23, scope: !7)
!93 = !DILocation(line: 511, column: 20, scope: !7)
!94 = !DILocation(line: 518, column: 27, scope: !7)
!95 = !DILocation(line: 518, column: 37, scope: !7)
!96 = !DILocation(line: 256, column: 15, scope: !81, inlinedAt: !97)
!97 = !DILocation(line: 505, column: 21, scope: !7)
!98 = !DILocation(line: 267, column: 36, scope: !83, inlinedAt: !97)
!99 = !DILocation(line: 514, column: 16, scope: !7)
!100 = !DILocation(line: 514, column: 24, scope: !7)
!101 = !DILocation(line: 522, column: 9, scope: !7)
!102 = !DILocation(line: 523, column: 35, scope: !7)
!103 = !DILocation(line: 523, column: 8, scope: !7)
!104 = !DILocation(line: 524, column: 19, scope: !7)
!105 = !DILocation(line: 524, column: 8, scope: !7)
!106 = !DILocation(line: 524, column: 38, scope: !7)
!107 = !DILocation(line: 526, column: 26, scope: !7)
!108 = !DILocation(line: 527, column: 8, scope: !7)
!109 = !DILocation(line: 531, column: 20, scope: !7)
!110 = !DILocation(line: 532, column: 36, scope: !7)
!111 = !DILocation(line: 532, column: 19, scope: !7)
!112 = !DILocation(line: 532, column: 59, scope: !7)
!113 = !DILocation(line: 533, column: 28, scope: !7)
!114 = !DILocation(line: 533, column: 41, scope: !7)
!115 = !DILocation(line: 534, column: 31, scope: !7)
!116 = !DILocation(line: 535, column: 13, scope: !7)
!117 = !DILocation(line: 534, column: 4, scope: !7)
