; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define amdgpu_kernel void @triton_poi_fused_cat_2(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, ptr addrspace(1) inreg nocapture writeonly %3, i32 inreg %4, ptr addrspace(1) inreg nocapture readnone %5) local_unnamed_addr #0 !dbg !4 {
  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %8 = shl i32 %7, 9, !dbg !8
  %9 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !9
  %11 = and i32 %10, 510, !dbg !9
  %12 = or disjoint i32 %11, %8, !dbg !10
  %13 = icmp slt i32 %12, %4, !dbg !11
  %14 = sdiv i32 %12, 128, !dbg !12
  %15 = mul i32 %14, 128, !dbg !13
  %.decomposed = sub i32 %12, %15, !dbg !13
  %16 = srem i32 %14, 8, !dbg !14
  %17 = sdiv i32 %12, 1024, !dbg !15
  %18 = sext i32 %.decomposed to i64, !dbg !16
  %19 = icmp slt i32 %.decomposed, 64, !dbg !16
  %20 = shl nsw i32 %16, 7, !dbg !17
  %21 = mul i32 %17, 6144, !dbg !18
  %22 = add i32 %20, %21, !dbg !19
  %23 = add i32 %22, 4096, !dbg !20
  %24 = add i32 %23, %.decomposed, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = and i1 %19, %13, !dbg !23
  %28 = insertelement <2 x i1> poison, i1 %27, i64 0, !dbg !24
  %29 = shufflevector <2 x i1> %28, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !24
  %30 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %26, i32 16, <2 x i1> %29, <2 x bfloat> zeroinitializer), !dbg !24
  %bc = bitcast <2 x bfloat> %30 to <2 x i16>, !dbg !25
  %31 = zext <2 x i16> %bc to <2 x i32>, !dbg !25
  %32 = shl nuw <2 x i32> %31, splat (i32 16), !dbg !25
  %33 = sext i32 %17 to i64, !dbg !26
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !26
  %35 = insertelement <1 x i1> poison, i1 %27, i64 0, !dbg !27
  %36 = tail call <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) %34, i32 8, <1 x i1> %35, <1 x i64> zeroinitializer), !dbg !27
  %37 = extractelement <1 x i64> %36, i64 0, !dbg !27
  %38 = lshr i64 %37, 46, !dbg !28
  %39 = and i64 %38, 131072, !dbg !28
  %40 = add i64 %39, %37, !dbg !28
  %41 = shl i64 %40, 7, !dbg !29
  %42 = getelementptr bfloat, ptr addrspace(1) %2, i64 %41, !dbg !30
  %43 = getelementptr bfloat, ptr addrspace(1) %42, i64 %18, !dbg !30
  %44 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %43, i32 16, <2 x i1> %29, <2 x bfloat> zeroinitializer), !dbg !31
  %bc2 = bitcast <2 x bfloat> %44 to <2 x i16>, !dbg !32
  %45 = zext <2 x i16> %bc2 to <2 x i32>, !dbg !32
  %46 = shl nuw <2 x i32> %45, splat (i32 16), !dbg !32
  %47 = add i32 %22, 4160, !dbg !33
  %48 = add i32 %47, %.decomposed, !dbg !34
  %49 = sext i32 %48 to i64, !dbg !35
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !35
  %51 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %50, i32 16, <2 x i1> %29, <2 x bfloat> zeroinitializer), !dbg !36
  %bc4 = bitcast <2 x bfloat> %51 to <2 x i16>, !dbg !37
  %52 = zext <2 x i16> %bc4 to <2 x i32>, !dbg !37
  %53 = shl nuw <2 x i32> %52, splat (i32 16), !dbg !37
  %54 = or disjoint i64 %41, 64, !dbg !38
  %55 = getelementptr bfloat, ptr addrspace(1) %2, i64 %54, !dbg !39
  %56 = getelementptr bfloat, ptr addrspace(1) %55, i64 %18, !dbg !39
  %57 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %56, i32 16, <2 x i1> %29, <2 x bfloat> zeroinitializer), !dbg !40
  %bc6 = bitcast <2 x bfloat> %57 to <2 x i16>, !dbg !41
  %58 = zext <2 x i16> %bc6 to <2 x i32>, !dbg !41
  %59 = shl nuw <2 x i32> %58, splat (i32 16), !dbg !41
  %60 = icmp sgt i32 %.decomposed, 63, !dbg !42
  %61 = add nsw i32 %.decomposed, -64, !dbg !43
  %62 = add i32 %47, %61, !dbg !44
  %63 = sext i32 %62 to i64, !dbg !45
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !45
  %65 = and i1 %60, %13, !dbg !46
  %66 = insertelement <2 x i1> poison, i1 %65, i64 0, !dbg !47
  %67 = shufflevector <2 x i1> %66, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !47
  %68 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %64, i32 16, <2 x i1> %67, <2 x bfloat> zeroinitializer), !dbg !47
  %bc8 = bitcast <2 x bfloat> %68 to <2 x i16>, !dbg !48
  %69 = zext <2 x i16> %bc8 to <2 x i32>, !dbg !48
  %70 = shl nuw <2 x i32> %69, splat (i32 16), !dbg !48
  %71 = insertelement <1 x i1> poison, i1 %65, i64 0, !dbg !49
  %72 = tail call <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) %34, i32 8, <1 x i1> %71, <1 x i64> zeroinitializer), !dbg !49
  %73 = extractelement <1 x i64> %72, i64 0, !dbg !49
  %74 = lshr i64 %73, 46, !dbg !50
  %75 = and i64 %74, 131072, !dbg !50
  %76 = add i64 %75, %73, !dbg !50
  %77 = shl i64 %76, 7, !dbg !51
  %78 = sext i32 %61 to i64, !dbg !52
  %79 = getelementptr bfloat, ptr addrspace(1) %2, i64 %77, !dbg !53
  %80 = getelementptr bfloat, ptr addrspace(1) %79, i64 %78, !dbg !53
  %81 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %80, i32 16, <2 x i1> %67, <2 x bfloat> zeroinitializer), !dbg !54
  %bc10 = bitcast <2 x bfloat> %81 to <2 x i16>, !dbg !55
  %82 = zext <2 x i16> %bc10 to <2 x i32>, !dbg !55
  %83 = shl nuw <2 x i32> %82, splat (i32 16), !dbg !55
  %84 = add i32 %23, %61, !dbg !56
  %85 = sext i32 %84 to i64, !dbg !57
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !57
  %87 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %86, i32 16, <2 x i1> %67, <2 x bfloat> zeroinitializer), !dbg !58
  %bc12 = bitcast <2 x bfloat> %87 to <2 x i16>, !dbg !59
  %88 = zext <2 x i16> %bc12 to <2 x i32>, !dbg !59
  %89 = shl nuw <2 x i32> %88, splat (i32 16), !dbg !59
  %90 = or disjoint i64 %77, 64, !dbg !60
  %91 = getelementptr bfloat, ptr addrspace(1) %2, i64 %90, !dbg !61
  %92 = getelementptr bfloat, ptr addrspace(1) %91, i64 %78, !dbg !61
  %93 = tail call <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) %92, i32 16, <2 x i1> %67, <2 x bfloat> zeroinitializer), !dbg !62
  %bc14 = bitcast <2 x bfloat> %93 to <2 x i16>, !dbg !63
  %94 = zext <2 x i16> %bc14 to <2 x i32>, !dbg !63
  %95 = shl nuw <2 x i32> %94, splat (i32 16), !dbg !63
  %96 = sext i32 %12 to i64, !dbg !64
  %97 = getelementptr bfloat, ptr addrspace(1) %3, i64 %96, !dbg !64
  %98 = bitcast <2 x i32> %32 to <2 x float>, !dbg !25
  %99 = bitcast <2 x i32> %46 to <2 x float>, !dbg !32
  %100 = fmul <2 x float> %98, %99, !dbg !65
  %101 = bitcast <2 x i32> %53 to <2 x float>, !dbg !37
  %102 = bitcast <2 x i32> %59 to <2 x float>, !dbg !41
  %103 = fmul <2 x float> %101, %102, !dbg !66
  %104 = fsub <2 x float> %100, %103, !dbg !67
  %105 = bitcast <2 x i32> %70 to <2 x float>, !dbg !48
  %106 = bitcast <2 x i32> %83 to <2 x float>, !dbg !55
  %107 = fmul <2 x float> %105, %106, !dbg !68
  %108 = bitcast <2 x i32> %89 to <2 x float>, !dbg !59
  %109 = bitcast <2 x i32> %95 to <2 x float>, !dbg !63
  %110 = fmul <2 x float> %108, %109, !dbg !69
  %111 = fadd <2 x float> %107, %110, !dbg !70
  %112 = insertelement <2 x i1> poison, i1 %19, i64 0, !dbg !71
  %113 = shufflevector <2 x i1> %112, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !71
  %114 = select <2 x i1> %113, <2 x float> %104, <2 x float> %111, !dbg !71
  %115 = bitcast <2 x float> %114 to <2 x i32>, !dbg !72
  %116 = and <2 x i32> %115, <i32 65535, i32 2139095040>, !dbg !72
  %117 = icmp ne <2 x i32> %116, <i32 0, i32 2139095040>, !dbg !72
  %118 = icmp eq <2 x i32> %116, <i32 0, i32 2139095040>, !dbg !72
  %119 = shufflevector <2 x i1> %117, <2 x i1> %118, <2 x i32> <i32 0, i32 3>, !dbg !72
  %120 = lshr <2 x i32> %115, splat (i32 16), !dbg !72
  %121 = and <2 x i32> %120, splat (i32 1), !dbg !72
  %122 = add nuw nsw <2 x i32> %121, splat (i32 32767), !dbg !72
  %123 = and <2 x i32> %115, <i32 2139095040, i32 65535>, !dbg !72
  %124 = icmp eq <2 x i32> %123, <i32 2139095040, i32 0>, !dbg !72
  %125 = icmp ne <2 x i32> %123, <i32 2139095040, i32 0>, !dbg !72
  %126 = shufflevector <2 x i1> %124, <2 x i1> %125, <2 x i32> <i32 0, i32 3>, !dbg !72
  %127 = shufflevector <2 x i1> %126, <2 x i1> %119, <2 x i32> <i32 0, i32 3>, !dbg !72
  %128 = select <2 x i1> %127, <2 x i32> zeroinitializer, <2 x i32> %122, !dbg !72
  %129 = add <2 x i32> %128, %115, !dbg !72
  %130 = and <2 x i1> %119, %126, !dbg !72
  %131 = or <2 x i32> %115, splat (i32 65536), !dbg !72
  %132 = select <2 x i1> %130, <2 x i32> %131, <2 x i32> %129, !dbg !72
  %133 = lshr <2 x i32> %132, splat (i32 16), !dbg !72
  %134 = trunc nuw <2 x i32> %133 to <2 x i16>, !dbg !72
  %135 = bitcast <2 x i16> %134 to <2 x bfloat>, !dbg !72
  %136 = insertelement <2 x i1> poison, i1 %13, i64 0, !dbg !72
  %137 = shufflevector <2 x i1> %136, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !72
  tail call void @llvm.masked.store.v2bf16.p1(<2 x bfloat> %135, ptr addrspace(1) %97, i32 16, <2 x i1> %137), !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <2 x bfloat> @llvm.masked.load.v2bf16.p1(ptr addrspace(1) nocapture, i32 immarg, <2 x i1>, <2 x bfloat>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) nocapture, i32 immarg, <1 x i1>, <1 x i64>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v2bf16.p1(<2 x bfloat>, ptr addrspace(1) nocapture, i32 immarg, <2 x i1>) #3

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czfblgicyct7dbaobrfr466qlzquxd4roqhj7g3nsfc2tcfmvhyi.py", directory: "/home/vllm/.cache/vllm/torch_compile_cache/51fb6da286/rank_0_0/inductor_cache/zf")
!4 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !5, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 20, column: 28, scope: !4)
!8 = !DILocation(line: 20, column: 33, scope: !4)
!9 = !DILocation(line: 21, column: 36, scope: !4)
!10 = !DILocation(line: 21, column: 23, scope: !4)
!11 = !DILocation(line: 22, column: 21, scope: !4)
!12 = !DILocation(line: 24, column: 21, scope: !4)
!13 = !DILocation(line: 23, column: 19, scope: !4)
!14 = !DILocation(line: 24, column: 28, scope: !4)
!15 = !DILocation(line: 25, column: 19, scope: !4)
!16 = !DILocation(line: 31, column: 18, scope: !4)
!17 = !DILocation(line: 33, column: 41, scope: !4)
!18 = !DILocation(line: 33, column: 51, scope: !4)
!19 = !DILocation(line: 33, column: 37, scope: !4)
!20 = !DILocation(line: 33, column: 46, scope: !4)
!21 = !DILocation(line: 33, column: 57, scope: !4)
!22 = !DILocation(line: 33, column: 30, scope: !4)
!23 = !DILocation(line: 33, column: 71, scope: !4)
!24 = !DILocation(line: 33, column: 63, scope: !4)
!25 = !DILocation(line: 33, column: 121, scope: !4)
!26 = !DILocation(line: 34, column: 30, scope: !4)
!27 = !DILocation(line: 34, column: 35, scope: !4)
!28 = !DILocation(line: 38, column: 34, scope: !4)
!29 = !DILocation(line: 40, column: 35, scope: !4)
!30 = !DILocation(line: 40, column: 31, scope: !4)
!31 = !DILocation(line: 40, column: 50, scope: !4)
!32 = !DILocation(line: 40, column: 108, scope: !4)
!33 = !DILocation(line: 42, column: 47, scope: !4)
!34 = !DILocation(line: 42, column: 58, scope: !4)
!35 = !DILocation(line: 42, column: 31, scope: !4)
!36 = !DILocation(line: 42, column: 64, scope: !4)
!37 = !DILocation(line: 42, column: 122, scope: !4)
!38 = !DILocation(line: 43, column: 36, scope: !4)
!39 = !DILocation(line: 43, column: 31, scope: !4)
!40 = !DILocation(line: 43, column: 55, scope: !4)
!41 = !DILocation(line: 43, column: 113, scope: !4)
!42 = !DILocation(line: 48, column: 20, scope: !4)
!43 = !DILocation(line: 52, column: 66, scope: !4)
!44 = !DILocation(line: 52, column: 58, scope: !4)
!45 = !DILocation(line: 52, column: 31, scope: !4)
!46 = !DILocation(line: 52, column: 80, scope: !4)
!47 = !DILocation(line: 52, column: 72, scope: !4)
!48 = !DILocation(line: 52, column: 131, scope: !4)
!49 = !DILocation(line: 53, column: 36, scope: !4)
!50 = !DILocation(line: 57, column: 35, scope: !4)
!51 = !DILocation(line: 59, column: 35, scope: !4)
!52 = !DILocation(line: 59, column: 44, scope: !4)
!53 = !DILocation(line: 59, column: 31, scope: !4)
!54 = !DILocation(line: 59, column: 58, scope: !4)
!55 = !DILocation(line: 59, column: 117, scope: !4)
!56 = !DILocation(line: 61, column: 58, scope: !4)
!57 = !DILocation(line: 61, column: 31, scope: !4)
!58 = !DILocation(line: 61, column: 72, scope: !4)
!59 = !DILocation(line: 61, column: 131, scope: !4)
!60 = !DILocation(line: 62, column: 36, scope: !4)
!61 = !DILocation(line: 62, column: 31, scope: !4)
!62 = !DILocation(line: 62, column: 63, scope: !4)
!63 = !DILocation(line: 62, column: 122, scope: !4)
!64 = !DILocation(line: 68, column: 25, scope: !4)
!65 = !DILocation(line: 41, column: 19, scope: !4)
!66 = !DILocation(line: 44, column: 20, scope: !4)
!67 = !DILocation(line: 45, column: 20, scope: !4)
!68 = !DILocation(line: 60, column: 20, scope: !4)
!69 = !DILocation(line: 63, column: 20, scope: !4)
!70 = !DILocation(line: 64, column: 20, scope: !4)
!71 = !DILocation(line: 0, scope: !4)
!72 = !DILocation(line: 68, column: 37, scope: !4)
!73 = !DILocation(line: 68, column: 4, scope: !4)
