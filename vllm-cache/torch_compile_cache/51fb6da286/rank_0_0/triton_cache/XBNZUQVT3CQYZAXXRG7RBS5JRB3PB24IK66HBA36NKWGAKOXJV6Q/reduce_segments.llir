; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define amdgpu_kernel void @reduce_segments(ptr addrspace(1) inreg nocapture writeonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, ptr addrspace(1) inreg nocapture readonly %3, ptr addrspace(1) inreg nocapture readonly %4, i64 inreg %5, i64 inreg %6, i64 inreg %7, ptr addrspace(1) inreg nocapture readonly %8, ptr addrspace(1) inreg nocapture readnone %9) local_unnamed_addr #1 !dbg !7 {
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !8
  %unmaskedload8 = load <1 x i32>, ptr addrspace(1) %8, align 4, !amdgpu.noclobber !6
  %12 = extractelement <1 x i32> %unmaskedload8, i64 0
  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !9
  %.not9 = icmp sle i32 %12, %13
  %14 = zext i1 %.not9 to i64, !dbg !10
  %15 = getelementptr i32, ptr addrspace(1) %4, i64 %14, !dbg !10
  %16 = getelementptr i8, ptr addrspace(1) %15, i64 -4, !dbg !10
  %unmaskedload = load <1 x i32>, ptr addrspace(1) %16, align 4, !dbg !11
  %17 = extractelement <1 x i32> %unmaskedload, i64 0, !dbg !11
  %18 = add i32 %17, 255, !dbg !12
  %19 = sdiv i32 %18, 256, !dbg !15
  %20 = shl nsw i32 %19, 4, !dbg !16
  %21 = add i32 %17, -1, !dbg !17
  %22 = add i32 %21, %20, !dbg !19
  %23 = sdiv i32 %22, %20, !dbg !20
  %24 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !21
  %25 = and i32 %24, 32, !dbg !21
  %26 = lshr i32 %24, 6, !dbg !21
  %.lobit2 = lshr i32 %24, 5, !dbg !21
  %27 = and i32 %.lobit2, 7, !dbg !21
  %28 = or disjoint i32 %27, 8, !dbg !21
  %29 = and i32 %24, 15, !dbg !21
  %30 = icmp slt i32 %27, %23, !dbg !22
  %31 = icmp slt i32 %28, %23, !dbg !22
  %32 = icmp slt i32 %29, %23, !dbg !22
  %33 = shl i32 %24, 2, !dbg !23
  %34 = and i32 %33, 124, !dbg !23
  %35 = sext i32 %13 to i64, !dbg !24
  %36 = shl nsw i64 %35, 9, !dbg !25
  %37 = shl i32 %11, 4, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = add nsw i64 %36, %38, !dbg !27
  %40 = zext nneg i32 %27 to i64, !dbg !28
  %41 = zext nneg i32 %28 to i64, !dbg !28
  %42 = zext nneg i32 %29 to i64, !dbg !28
  %43 = or disjoint i64 %39, %40, !dbg !28
  %44 = or disjoint i64 %39, %41, !dbg !28
  %45 = or disjoint i64 %39, %42, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %49 = insertelement <1 x i1> poison, i1 %30, i64 0, !dbg !30
  %50 = tail call <1 x float> @llvm.masked.load.v1f32.p1(ptr addrspace(1) %46, i32 16, <1 x i1> %49, <1 x float> splat (float 0xFFF0000000000000)), !dbg !30
  %51 = extractelement <1 x float> %50, i64 0, !dbg !30
  %52 = insertelement <1 x i1> poison, i1 %31, i64 0, !dbg !30
  %53 = tail call <1 x float> @llvm.masked.load.v1f32.p1(ptr addrspace(1) %47, i32 16, <1 x i1> %52, <1 x float> splat (float 0xFFF0000000000000)), !dbg !30
  %54 = extractelement <1 x float> %53, i64 0, !dbg !30
  %55 = insertelement <1 x i1> poison, i1 %32, i64 0, !dbg !30
  %56 = tail call <1 x float> @llvm.masked.load.v1f32.p1(ptr addrspace(1) %48, i32 16, <1 x i1> %55, <1 x float> splat (float 0xFFF0000000000000)), !dbg !30
  %57 = extractelement <1 x float> %56, i64 0, !dbg !30
  %58 = bitcast float %57 to i32, !dbg !31
  %59 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %58, i32 %58, i32 280, i32 15, i32 12, i1 false), !dbg !31
  %60 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %59, i32 %58, i32 264, i32 15, i32 3, i1 false), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = tail call float @llvm.maxnum.f32(float %57, float %61), !dbg !35
  %63 = bitcast float %62 to i32, !dbg !31
  %64 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %63, i32 %63, i32 276, i32 15, i32 10, i1 false), !dbg !31
  %65 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %64, i32 %63, i32 260, i32 15, i32 5, i1 false), !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = tail call float @llvm.maxnum.f32(float %62, float %66), !dbg !35
  %68 = bitcast float %67 to i32, !dbg !31
  %69 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %68, i32 %68, i32 78, i32 15, i32 15, i1 false), !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call float @llvm.maxnum.f32(float %67, float %70), !dbg !35
  %72 = bitcast float %71 to i32, !dbg !31
  %73 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %72, i32 %72, i32 177, i32 15, i32 15, i1 false), !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = tail call float @llvm.maxnum.f32(float %71, float %74), !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !37
  %77 = tail call <1 x float> @llvm.masked.load.v1f32.p1(ptr addrspace(1) %76, i32 16, <1 x i1> %55, <1 x float> zeroinitializer), !dbg !38
  %78 = extractelement <1 x float> %77, i64 0, !dbg !38
  %79 = fsub float %51, %75, !dbg !39
  %80 = fsub float %54, %75, !dbg !39
  %81 = fsub float %57, %75, !dbg !39
  %82 = fmul float %79, 0x3FF7154760000000, !dbg !40
  %83 = tail call float @llvm.exp2.f32(float %82), !dbg !40
  %84 = fmul float %80, 0x3FF7154760000000, !dbg !40
  %85 = tail call float @llvm.exp2.f32(float %84), !dbg !40
  %86 = fmul float %81, 0x3FF7154760000000, !dbg !40
  %87 = tail call float @llvm.exp2.f32(float %86), !dbg !40
  %88 = fmul float %78, %87, !dbg !41
  %89 = bitcast float %88 to i32, !dbg !42
  %90 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %89, i32 %89, i32 280, i32 15, i32 12, i1 false), !dbg !42
  %91 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %90, i32 %89, i32 264, i32 15, i32 3, i1 false), !dbg !42
  %92 = bitcast i32 %91 to float, !dbg !42
  %93 = fadd float %88, %92, !dbg !44
  %94 = bitcast float %93 to i32, !dbg !42
  %95 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %94, i32 %94, i32 276, i32 15, i32 10, i1 false), !dbg !42
  %96 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %95, i32 %94, i32 260, i32 15, i32 5, i1 false), !dbg !42
  %97 = bitcast i32 %96 to float, !dbg !42
  %98 = fadd float %93, %97, !dbg !44
  %99 = bitcast float %98 to i32, !dbg !42
  %100 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %99, i32 %99, i32 78, i32 15, i32 15, i1 false), !dbg !42
  %101 = bitcast i32 %100 to float, !dbg !42
  %102 = fadd float %98, %101, !dbg !44
  %103 = bitcast float %102 to i32, !dbg !42
  %104 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %103, i32 %103, i32 177, i32 15, i32 15, i1 false), !dbg !42
  %105 = shl nsw i64 %35, 16, !dbg !45
  %106 = shl i32 %11, 11, !dbg !46
  %107 = sext i32 %106 to i64, !dbg !47
  %108 = add nsw i64 %105, %107, !dbg !47
  %109 = shl nuw nsw i32 %27, 7, !dbg !48
  %110 = shl nuw nsw i32 %28, 7, !dbg !48
  %111 = or disjoint i32 %34, %109, !dbg !49
  %112 = zext nneg i32 %111 to i64, !dbg !49
  %113 = or disjoint i64 %108, %112, !dbg !49
  %114 = or disjoint i32 %34, %110, !dbg !49
  %115 = zext nneg i32 %114 to i64, !dbg !49
  %116 = or disjoint i64 %108, %115, !dbg !49
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !50
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !50
  %119 = insertelement <4 x i1> poison, i1 %30, i64 0, !dbg !51
  %120 = shufflevector <4 x i1> %119, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !51
  %121 = tail call <4 x float> @llvm.masked.load.v4f32.p1(ptr addrspace(1) %117, i32 16, <4 x i1> %120, <4 x float> zeroinitializer), !dbg !51
  %122 = extractelement <4 x float> %121, i64 0, !dbg !51
  %123 = extractelement <4 x float> %121, i64 1, !dbg !51
  %124 = extractelement <4 x float> %121, i64 2, !dbg !51
  %125 = extractelement <4 x float> %121, i64 3, !dbg !51
  %126 = insertelement <4 x i1> poison, i1 %31, i64 0, !dbg !51
  %127 = shufflevector <4 x i1> %126, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !51
  %128 = tail call <4 x float> @llvm.masked.load.v4f32.p1(ptr addrspace(1) %118, i32 16, <4 x i1> %127, <4 x float> zeroinitializer), !dbg !51
  %129 = extractelement <4 x float> %128, i64 0, !dbg !51
  %130 = extractelement <4 x float> %128, i64 1, !dbg !51
  %131 = extractelement <4 x float> %128, i64 2, !dbg !51
  %132 = extractelement <4 x float> %128, i64 3, !dbg !51
  %133 = fmul float %83, %122, !dbg !52
  %134 = fmul float %83, %123, !dbg !52
  %135 = fmul float %83, %124, !dbg !52
  %136 = fmul float %83, %125, !dbg !52
  %137 = fmul float %85, %129, !dbg !52
  %138 = fmul float %85, %130, !dbg !52
  %139 = fmul float %85, %131, !dbg !52
  %140 = fmul float %85, %132, !dbg !52
  %141 = fadd float %133, %137, !dbg !53
  %142 = fadd float %134, %138, !dbg !53
  %143 = fadd float %135, %139, !dbg !53
  %144 = fadd float %136, %140, !dbg !53
  %145 = bitcast float %141 to i32, !dbg !55
  %146 = xor i32 %33, 128, !dbg !55
  %147 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %146, i32 %145), !dbg !55
  %148 = bitcast float %142 to i32, !dbg !55
  %149 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %146, i32 %148), !dbg !55
  %150 = bitcast i32 %149 to float, !dbg !55
  %151 = fadd float %142, %150, !dbg !53
  %152 = bitcast float %143 to i32, !dbg !55
  %153 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %146, i32 %152), !dbg !55
  %154 = bitcast i32 %153 to float, !dbg !55
  %155 = fadd float %143, %154, !dbg !53
  %156 = bitcast float %144 to i32, !dbg !55
  %157 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %146, i32 %156), !dbg !55
  %158 = bitcast i32 %157 to float, !dbg !55
  %159 = fadd float %144, %158, !dbg !53
  %.not7.not = icmp eq i32 %25, 0, !dbg !55
  %160 = and i32 %26, 3, !dbg !55
  %161 = shl nuw nsw i32 %34, 2, !dbg !55
  br i1 %.not7.not, label %162, label %167, !dbg !55

162:                                              ; preds = %10
  %163 = bitcast i32 %147 to float
  %164 = fadd float %141, %163
  %165 = or disjoint i32 %161, %160
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165
  store float %164, ptr addrspace(3) %166, align 4, !dbg !55
  br label %167, !dbg !55

167:                                              ; preds = %162, %10
  %168 = or disjoint i32 %161, 4, !dbg !55
  br i1 %.not7.not, label %169, label %172, !dbg !55

169:                                              ; preds = %167
  %170 = or disjoint i32 %168, %160
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i32 %170
  store float %151, ptr addrspace(3) %171, align 4, !dbg !55
  br label %172, !dbg !55

172:                                              ; preds = %169, %167
  %173 = or disjoint i32 %161, 8, !dbg !55
  br i1 %.not7.not, label %174, label %177, !dbg !55

174:                                              ; preds = %172
  %175 = or disjoint i32 %173, %160
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175
  store float %155, ptr addrspace(3) %176, align 4, !dbg !55
  br label %177, !dbg !55

177:                                              ; preds = %174, %172
  %178 = or disjoint i32 %161, 12, !dbg !55
  br i1 %.not7.not, label %179, label %182, !dbg !55

179:                                              ; preds = %177
  %180 = or disjoint i32 %178, %160
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180
  store float %159, ptr addrspace(3) %181, align 4, !dbg !55
  br label %182, !dbg !55

182:                                              ; preds = %179, %177
  fence syncscope("workgroup") release, !dbg !55
  tail call void @llvm.amdgcn.s.barrier(), !dbg !55
  fence syncscope("workgroup") acquire, !dbg !55
  %183 = icmp slt i32 %24, 512, !dbg !55
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %24, !dbg !55
  br i1 %183, label %185, label %187, !dbg !55

185:                                              ; preds = %182
  %186 = load float, ptr addrspace(3) %184, align 4, !dbg !55
  br label %187, !dbg !55

187:                                              ; preds = %182, %185
  %188 = phi float [ %186, %185 ], [ 0.000000e+00, %182 ], !dbg !55
  %189 = bitcast float %188 to i32, !dbg !55
  %190 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %189, i32 %189, i32 78, i32 15, i32 15, i1 false), !dbg !55
  %191 = bitcast i32 %190 to float, !dbg !55
  %192 = fadd float %188, %191, !dbg !53
  %193 = bitcast float %192 to i32, !dbg !55
  %194 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %193, i32 %193, i32 177, i32 15, i32 15, i1 false), !dbg !55
  %195 = and i32 %24, 3, !dbg !55
  %196 = icmp eq i32 %195, 0, !dbg !55
  %197 = and i1 %183, %196, !dbg !55
  br i1 %197, label %198, label %201, !dbg !55

198:                                              ; preds = %187
  %199 = bitcast i32 %194 to float
  %200 = fadd float %192, %199
  store float %200, ptr addrspace(3) %184, align 4, !dbg !55
  br label %201, !dbg !55

201:                                              ; preds = %198, %187
  %202 = getelementptr i8, ptr addrspace(3) %184, i32 1024, !dbg !55
  br i1 %183, label %203, label %205, !dbg !55

203:                                              ; preds = %201
  %204 = load float, ptr addrspace(3) %202, align 4, !dbg !55
  br label %205, !dbg !55

205:                                              ; preds = %201, %203
  %206 = phi float [ %204, %203 ], [ 0.000000e+00, %201 ], !dbg !55
  %207 = bitcast float %206 to i32, !dbg !55
  %208 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %207, i32 %207, i32 78, i32 15, i32 15, i1 false), !dbg !55
  %209 = bitcast i32 %208 to float, !dbg !55
  %210 = fadd float %206, %209, !dbg !53
  %211 = bitcast float %210 to i32, !dbg !55
  %212 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 %211, i32 %211, i32 177, i32 15, i32 15, i1 false), !dbg !55
  br i1 %197, label %213, label %216, !dbg !55

213:                                              ; preds = %205
  %214 = bitcast i32 %212 to float
  %215 = fadd float %210, %214
  store float %215, ptr addrspace(3) %202, align 4, !dbg !55
  br label %216, !dbg !55

216:                                              ; preds = %213, %205
  %217 = bitcast i32 %104 to float, !dbg !42
  %218 = fadd float %102, %217, !dbg !44
  %219 = and i32 %24, 127, !dbg !23
  fence syncscope("workgroup") release, !dbg !55
  tail call void @llvm.amdgcn.s.barrier(), !dbg !55
  fence syncscope("workgroup") acquire, !dbg !55
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !55
  %221 = load float, ptr addrspace(3) %220, align 16, !dbg !55
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !55
  %223 = load float, ptr addrspace(3) %222, align 16, !dbg !55
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !55
  %225 = load float, ptr addrspace(3) %224, align 16, !dbg !55
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !55
  %227 = load float, ptr addrspace(3) %226, align 16, !dbg !55
  %228 = fcmp oeq float %218, 0.000000e+00, !dbg !56
  %229 = fdiv float %221, %218, !dbg !57
  %230 = fdiv float %223, %218, !dbg !57
  %231 = fdiv float %225, %218, !dbg !57
  %232 = fdiv float %227, %218, !dbg !57
  %233 = select i1 %228, float 0.000000e+00, float %229, !dbg !58
  %234 = select i1 %228, float 0.000000e+00, float %230, !dbg !58
  %235 = select i1 %228, float 0.000000e+00, float %231, !dbg !58
  %236 = select i1 %228, float 0.000000e+00, float %232, !dbg !58
  %237 = mul i64 %5, %35, !dbg !59
  %238 = sext i32 %11 to i64, !dbg !60
  %239 = mul i64 %6, %238, !dbg !60
  %240 = zext nneg i32 %219 to i64, !dbg !61
  %241 = getelementptr bfloat, ptr addrspace(1) %0, i64 %237, !dbg !62
  %242 = getelementptr bfloat, ptr addrspace(1) %241, i64 %239, !dbg !62
  %243 = getelementptr bfloat, ptr addrspace(1) %242, i64 %240, !dbg !62
  %244 = bitcast float %233 to i32, !dbg !63
  %245 = and i32 %244, 2139095040, !dbg !63
  %.not = icmp eq i32 %245, 2139095040, !dbg !63
  %246 = lshr i32 %244, 16, !dbg !63
  %247 = and i32 %246, 1, !dbg !63
  %248 = add nuw nsw i32 %247, 32767, !dbg !63
  %249 = select i1 %.not, i32 0, i32 %248, !dbg !63
  %250 = add i32 %249, %244, !dbg !63
  %251 = and i32 %244, 65535, !dbg !63
  %252 = icmp ne i32 %251, 0, !dbg !63
  %253 = and i1 %.not, %252, !dbg !63
  %254 = or i32 %244, 65536, !dbg !63
  %255 = select i1 %253, i32 %254, i32 %250, !dbg !63
  %256 = lshr i32 %255, 16, !dbg !63
  %257 = trunc nuw i32 %256 to i16, !dbg !63
  %258 = bitcast float %234 to i32, !dbg !63
  %259 = and i32 %258, 2139095040, !dbg !63
  %.not4 = icmp eq i32 %259, 2139095040, !dbg !63
  %260 = lshr i32 %258, 16, !dbg !63
  %261 = and i32 %260, 1, !dbg !63
  %262 = add nuw nsw i32 %261, 32767, !dbg !63
  %263 = select i1 %.not4, i32 0, i32 %262, !dbg !63
  %264 = add i32 %263, %258, !dbg !63
  %265 = and i32 %258, 65535, !dbg !63
  %266 = icmp ne i32 %265, 0, !dbg !63
  %267 = and i1 %.not4, %266, !dbg !63
  %268 = or i32 %258, 65536, !dbg !63
  %269 = select i1 %267, i32 %268, i32 %264, !dbg !63
  %270 = lshr i32 %269, 16, !dbg !63
  %271 = trunc nuw i32 %270 to i16, !dbg !63
  %272 = bitcast float %235 to i32, !dbg !63
  %273 = and i32 %272, 2139095040, !dbg !63
  %.not5 = icmp eq i32 %273, 2139095040, !dbg !63
  %274 = lshr i32 %272, 16, !dbg !63
  %275 = and i32 %274, 1, !dbg !63
  %276 = add nuw nsw i32 %275, 32767, !dbg !63
  %277 = select i1 %.not5, i32 0, i32 %276, !dbg !63
  %278 = add i32 %277, %272, !dbg !63
  %279 = and i32 %272, 65535, !dbg !63
  %280 = icmp ne i32 %279, 0, !dbg !63
  %281 = and i1 %.not5, %280, !dbg !63
  %282 = or i32 %272, 65536, !dbg !63
  %283 = select i1 %281, i32 %282, i32 %278, !dbg !63
  %284 = lshr i32 %283, 16, !dbg !63
  %285 = trunc nuw i32 %284 to i16, !dbg !63
  %286 = bitcast float %236 to i32, !dbg !63
  %287 = and i32 %286, 2139095040, !dbg !63
  %.not6 = icmp eq i32 %287, 2139095040, !dbg !63
  %288 = lshr i32 %286, 16, !dbg !63
  %289 = and i32 %288, 1, !dbg !63
  %290 = add nuw nsw i32 %289, 32767, !dbg !63
  %291 = select i1 %.not6, i32 0, i32 %290, !dbg !63
  %292 = add i32 %291, %286, !dbg !63
  %293 = and i32 %286, 65535, !dbg !63
  %294 = icmp ne i32 %293, 0, !dbg !63
  %295 = and i1 %.not6, %294, !dbg !63
  %296 = or i32 %286, 65536, !dbg !63
  %297 = select i1 %295, i32 %296, i32 %292, !dbg !63
  %298 = lshr i32 %297, 16, !dbg !63
  %299 = trunc nuw i32 %298 to i16, !dbg !63
  fence syncscope("workgroup") release, !dbg !63
  tail call void @llvm.amdgcn.s.barrier(), !dbg !63
  fence syncscope("workgroup") acquire, !dbg !63
  %300 = getelementptr inbounds bfloat, ptr addrspace(3) @global_smem, i32 %34, !dbg !63
  %301 = insertelement <4 x i16> poison, i16 %257, i64 0, !dbg !63
  %302 = insertelement <4 x i16> %301, i16 %271, i64 1, !dbg !63
  %303 = insertelement <4 x i16> %302, i16 %285, i64 2, !dbg !63
  %304 = insertelement <4 x i16> %303, i16 %299, i64 3, !dbg !63
  store <4 x i16> %304, ptr addrspace(3) %300, align 8, !dbg !63
  fence syncscope("workgroup") release, !dbg !63
  tail call void @llvm.amdgcn.s.barrier(), !dbg !63
  fence syncscope("workgroup") acquire, !dbg !63
  %305 = getelementptr inbounds bfloat, ptr addrspace(3) @global_smem, i32 %219, !dbg !63
  %306 = load <1 x bfloat>, ptr addrspace(3) %305, align 2, !dbg !63
  %urem = and i32 %24, 128, !dbg !63
  %307 = icmp eq i32 %urem, 0, !dbg !63
  %308 = insertelement <1 x i1> poison, i1 %307, i64 0, !dbg !63
  tail call void @llvm.masked.store.v1bf16.p1(<1 x bfloat> %306, ptr addrspace(1) %243, i32 16, <1 x i1> %308), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <1 x float> @llvm.masked.load.v1f32.p1(ptr addrspace(1) nocapture, i32 immarg, <1 x i1>, <1 x float>) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.update.dpp.i32(i32, i32, i32 immarg, i32 immarg, i32 immarg, i1 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x float> @llvm.masked.load.v4f32.p1(ptr addrspace(1) nocapture, i32 immarg, <4 x i1>, <4 x float>) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v1bf16.p1(<1 x bfloat>, ptr addrspace(1) nocapture, i32 immarg, <1 x i1>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nofree norecurse nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "triton_unified_attention.py", directory: "/usr/local/lib/python3.12/dist-packages/vllm/attention/ops")
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !3, file: !3, line: 597, type: !5, scopeLine: 597, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "reduce_segments", linkageName: "reduce_segments", scope: !3, file: !3, line: 540, type: !5, scopeLine: 540, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DILocation(line: 564, column: 35, scope: !7)
!9 = !DILocation(line: 563, column: 36, scope: !7)
!10 = !DILocation(line: 570, column: 37, scope: !7)
!11 = !DILocation(line: 570, column: 22, scope: !7)
!12 = !DILocation(line: 22, column: 20, scope: !13, inlinedAt: !14)
!13 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!14 = !DILocation(line: 574, column: 42, scope: !7)
!15 = !DILocation(line: 22, column: 26, scope: !13, inlinedAt: !14)
!16 = !DILocation(line: 577, column: 61, scope: !7)
!17 = !DILocation(line: 22, column: 16, scope: !13, inlinedAt: !18)
!18 = !DILocation(line: 577, column: 40, scope: !7)
!19 = !DILocation(line: 22, column: 20, scope: !13, inlinedAt: !18)
!20 = !DILocation(line: 22, column: 26, scope: !13, inlinedAt: !18)
!21 = !DILocation(line: 578, column: 29, scope: !7)
!22 = !DILocation(line: 578, column: 53, scope: !7)
!23 = !DILocation(line: 580, column: 37, scope: !7)
!24 = !DILocation(line: 584, column: 38, scope: !7)
!25 = !DILocation(line: 585, column: 20, scope: !7)
!26 = !DILocation(line: 586, column: 36, scope: !7)
!27 = !DILocation(line: 586, column: 19, scope: !7)
!28 = !DILocation(line: 587, column: 19, scope: !7)
!29 = !DILocation(line: 588, column: 38, scope: !7)
!30 = !DILocation(line: 588, column: 23, scope: !7)
!31 = !DILocation(line: 184, column: 40, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.12/dist-packages/triton/language")
!34 = !DILocation(line: 591, column: 25, scope: !7)
!35 = !DILocation(line: 163, column: 27, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 594, column: 44, scope: !7)
!38 = !DILocation(line: 594, column: 26, scope: !7)
!39 = !DILocation(line: 597, column: 50, scope: !7)
!40 = !DILocation(line: 597, column: 39, scope: !7)
!41 = !DILocation(line: 597, column: 32, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !43)
!43 = !DILocation(line: 598, column: 28, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !43)
!45 = !DILocation(line: 603, column: 9, scope: !7)
!46 = !DILocation(line: 604, column: 26, scope: !7)
!47 = !DILocation(line: 604, column: 8, scope: !7)
!48 = !DILocation(line: 605, column: 54, scope: !7)
!49 = !DILocation(line: 606, column: 8, scope: !7)
!50 = !DILocation(line: 608, column: 26, scope: !7)
!51 = !DILocation(line: 608, column: 8, scope: !7)
!52 = !DILocation(line: 612, column: 19, scope: !7)
!53 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !54)
!54 = !DILocation(line: 613, column: 21, scope: !7)
!55 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !54)
!56 = !DILocation(line: 615, column: 37, scope: !7)
!57 = !DILocation(line: 615, column: 57, scope: !7)
!58 = !DILocation(line: 615, column: 47, scope: !7)
!59 = !DILocation(line: 622, column: 39, scope: !7)
!60 = !DILocation(line: 623, column: 38, scope: !7)
!61 = !DILocation(line: 624, column: 21, scope: !7)
!62 = !DILocation(line: 625, column: 26, scope: !7)
!63 = !DILocation(line: 625, column: 41, scope: !7)
!64 = !DILocation(line: 625, column: 4, scope: !7)
