; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @kernel_unified_attention_2d(ptr addrspace(1) inreg nocapture writeonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, ptr addrspace(1) inreg nocapture readonly %3, ptr addrspace(1) inreg nocapture readonly %4, ptr addrspace(1) inreg nocapture readonly %5, float inreg %6, ptr addrspace(1) inreg nocapture readnone %7, ptr addrspace(1) inreg nocapture readnone %8, i32 inreg %9, i64 inreg %10, i64 inreg %11, i64 inreg %12, i64 inreg %13, i64 inreg %14, i64 inreg %15, i64 inreg %16, i64 inreg %17, i64 inreg %18, i64 inreg %19, i64 inreg %20, i64 inreg %21, ptr addrspace(1) inreg nocapture readonly %22, i32 inreg %23, ptr addrspace(1) inreg nocapture readnone %24) local_unnamed_addr #1 !dbg !7 {
  %26 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !8
  %27 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !9
  %28 = icmp sgt i32 %23, 0, !dbg !10
  br i1 %28, label %.lr.ph, label %._crit_edge, !dbg !10

.lr.ph:                                           ; preds = %25, %.lr.ph
  %29 = phi i32 [ %38, %.lr.ph ], [ %23, %25 ]
  %30 = phi i32 [ %40, %.lr.ph ], [ 0, %25 ]
  %31 = add i32 %29, %30, !dbg !13
  %32 = sdiv i32 %31, 2, !dbg !14
  %33 = sext i32 %32 to i64, !dbg !15
  %34 = getelementptr i32, ptr addrspace(1) %22, i64 %33, !dbg !15
  %unmaskedload213 = load <1 x i32>, ptr addrspace(1) %34, align 4, !dbg !16
  %35 = extractelement <1 x i32> %unmaskedload213, i64 0, !dbg !16
  %36 = sdiv i32 %35, 4, !dbg !17
  %37 = add nsw i32 %36, %32, !dbg !18
  %.not214 = icmp sgt i32 %37, %26, !dbg !19
  %38 = select i1 %.not214, i32 %32, i32 %29, !dbg !20
  %39 = add nsw i32 %32, 1, !dbg !20
  %40 = select i1 %.not214, i32 %30, i32 %39, !dbg !20
  %41 = icmp slt i32 %40, %38, !dbg !10
  br i1 %41, label %.lr.ph, label %._crit_edge, !dbg !10

._crit_edge:                                      ; preds = %.lr.ph, %25
  %.lcssa223 = phi i32 [ 0, %25 ], [ %40, %.lr.ph ], !dbg !12
  %42 = add nsw i32 %.lcssa223, -1, !dbg !21
  %43 = sext i32 %42 to i64, !dbg !22
  %44 = getelementptr i32, ptr addrspace(1) %22, i64 %43, !dbg !22
  %unmaskedload = load <1 x i32>, ptr addrspace(1) %44, align 4, !dbg !23
  %45 = extractelement <1 x i32> %unmaskedload, i64 0, !dbg !23
  %.neg239 = sdiv i32 %45, -4, !dbg !24
  %reass.sub = sub i32 %26, %.lcssa223, !dbg !25
  %.neg216 = add i32 %reass.sub, 1, !dbg !25
  %46 = add i32 %.neg216, %.neg239, !dbg !26
  %47 = getelementptr i8, ptr addrspace(1) %44, i64 4, !dbg !27
  %unmaskedload6 = load <1 x i32>, ptr addrspace(1) %47, align 4, !dbg !28
  %48 = sub <1 x i32> %unmaskedload6, %unmaskedload, !dbg !29
  %49 = extractelement <1 x i32> %48, i64 0, !dbg !29
  %50 = shl i32 %46, 2, !dbg !30
  %.not = icmp slt i32 %50, %49, !dbg !31
  br i1 %.not, label %51, label %common.ret, !dbg !31

common.ret:                                       ; preds = %._crit_edge, %1000
  ret void, !dbg !32

51:                                               ; preds = %._crit_edge
  %52 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !33
  %53 = lshr i32 %52, 4, !dbg !33
  %54 = and i32 %53, 15, !dbg !33
  %55 = lshr i32 %52, 2, !dbg !33
  %56 = and i32 %55, 4, !dbg !33
  %57 = and i32 %55, 12, !dbg !33
  %58 = or disjoint i32 %57, 1, !dbg !33
  %59 = or disjoint i32 %57, 2, !dbg !33
  %60 = or disjoint i32 %57, 3, !dbg !33
  %61 = or disjoint i32 %57, 16, !dbg !34
  %62 = or disjoint i32 %57, 32, !dbg !34
  %63 = or disjoint i32 %57, 48, !dbg !34
  %64 = or disjoint i32 %57, 64, !dbg !34
  %65 = or disjoint i32 %57, 80, !dbg !34
  %66 = or disjoint i32 %57, 96, !dbg !34
  %67 = or disjoint i32 %57, 112, !dbg !34
  %68 = shl i32 %52, 3, !dbg !34
  %69 = and i32 %68, 120, !dbg !34
  %70 = and i32 %55, 3, !dbg !35
  %71 = lshr i32 %54, 2, !dbg !35
  %72 = or disjoint i32 %50, %70, !dbg !36
  %73 = or disjoint i32 %50, %71, !dbg !36
  %74 = add i32 %72, %45, !dbg !37
  %75 = add i32 %73, %45, !dbg !37
  %76 = shl i32 %27, 2, !dbg !38
  %77 = and i32 %52, 3, !dbg !39
  %78 = and i32 %53, 3, !dbg !39
  %79 = or disjoint i32 %76, %77, !dbg !40
  %80 = or disjoint i32 %78, %76, !dbg !40
  %81 = sext i32 %74 to i64, !dbg !41
  %82 = sext i32 %75 to i64, !dbg !41
  %83 = mul i64 %11, %82, !dbg !41
  %84 = sext i32 %79 to i64, !dbg !42
  %85 = sext i32 %80 to i64, !dbg !42
  %86 = mul i64 %12, %85, !dbg !42
  %87 = zext nneg i32 %57 to i64, !dbg !43
  %88 = zext nneg i32 %61 to i64, !dbg !43
  %89 = zext nneg i32 %62 to i64, !dbg !43
  %90 = zext nneg i32 %63 to i64, !dbg !43
  %91 = zext nneg i32 %64 to i64, !dbg !43
  %92 = zext nneg i32 %65 to i64, !dbg !43
  %93 = zext nneg i32 %66 to i64, !dbg !43
  %94 = zext nneg i32 %67 to i64, !dbg !43
  %95 = zext nneg i32 %69 to i64, !dbg !43
  %96 = icmp slt i32 %72, %49, !dbg !44
  %97 = icmp slt i32 %73, %49, !dbg !44
  %98 = icmp slt i32 %79, 32, !dbg !45
  %99 = icmp slt i32 %80, 32, !dbg !45
  %100 = and i1 %98, %96, !dbg !46
  %101 = and i1 %99, %97, !dbg !46
  %102 = getelementptr bfloat, ptr addrspace(1) %1, i64 %83, !dbg !47
  %103 = getelementptr bfloat, ptr addrspace(1) %102, i64 %86, !dbg !47
  %104 = getelementptr bfloat, ptr addrspace(1) %103, i64 %95, !dbg !47
  %105 = insertelement <8 x i1> poison, i1 %101, i64 0, !dbg !48
  %106 = shufflevector <8 x i1> %105, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !48
  %107 = tail call <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) %104, i32 16, <8 x i1> %106, <8 x bfloat> zeroinitializer), !dbg !48
  %108 = or disjoint i32 %69, %56, !dbg !48
  %and.ra217 = and i32 %55, 56, !dbg !48
  %109 = xor i32 %108, %and.ra217, !dbg !48
  %110 = shl nuw nsw i32 %54, 7, !dbg !48
  %111 = or disjoint i32 %109, %110, !dbg !48
  %112 = getelementptr inbounds bfloat, ptr addrspace(3) @global_smem, i32 %111, !dbg !48
  %113 = shufflevector <8 x bfloat> %107, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !48
  store <4 x bfloat> %113, ptr addrspace(3) %112, align 8, !dbg !48
  %114 = or disjoint i32 %69, 4, !dbg !48
  %and.ra220 = and i32 %55, 60, !dbg !48
  %115 = xor i32 %114, %and.ra220, !dbg !48
  %116 = or disjoint i32 %115, %110, !dbg !48
  %117 = getelementptr inbounds bfloat, ptr addrspace(3) @global_smem, i32 %116, !dbg !48
  %118 = shufflevector <8 x bfloat> %107, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !48
  store <4 x bfloat> %118, ptr addrspace(3) %117, align 8, !dbg !48
  fence syncscope("workgroup") release, !dbg !48
  tail call void @llvm.amdgcn.s.barrier(), !dbg !48
  fence syncscope("workgroup") acquire, !dbg !48
  %119 = and i32 %52, 15, !dbg !48
  %120 = shl nuw nsw i32 %78, 2, !dbg !48
  %121 = or disjoint i32 %120, 16, !dbg !48
  %122 = or disjoint i32 %120, 32, !dbg !48
  %123 = or disjoint i32 %120, 48, !dbg !48
  %124 = or disjoint i32 %120, 64, !dbg !48
  %125 = or disjoint i32 %120, 80, !dbg !48
  %126 = or disjoint i32 %120, 96, !dbg !48
  %127 = or disjoint i32 %120, 112, !dbg !48
  %128 = xor i32 %78, %119, !dbg !48
  %129 = shl nuw nsw i32 %128, 2, !dbg !48
  %130 = shl nuw nsw i32 %119, 7, !dbg !48
  %131 = or disjoint i32 %129, %130, !dbg !48
  %132 = shl nuw nsw i32 %119, 2, !dbg !48
  %133 = xor i32 %121, %132, !dbg !48
  %134 = or disjoint i32 %133, %130, !dbg !48
  %135 = xor i32 %122, %132, !dbg !48
  %136 = or disjoint i32 %135, %130, !dbg !48
  %137 = xor i32 %123, %132, !dbg !48
  %138 = or disjoint i32 %137, %130, !dbg !48
  %139 = xor i32 %124, %132, !dbg !48
  %140 = or disjoint i32 %139, %130, !dbg !48
  %141 = xor i32 %125, %132, !dbg !48
  %142 = or disjoint i32 %141, %130, !dbg !48
  %143 = xor i32 %126, %132, !dbg !48
  %144 = or disjoint i32 %143, %130, !dbg !48
  %145 = xor i32 %127, %132, !dbg !48
  %146 = or disjoint i32 %145, %130, !dbg !48
  %147 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %131, !dbg !48
  %148 = load <4 x i16>, ptr addrspace(3) %147, align 8, !dbg !48
  %149 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %134, !dbg !48
  %150 = load <4 x i16>, ptr addrspace(3) %149, align 8, !dbg !48
  %151 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %136, !dbg !48
  %152 = load <4 x i16>, ptr addrspace(3) %151, align 8, !dbg !48
  %153 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %138, !dbg !48
  %154 = load <4 x i16>, ptr addrspace(3) %153, align 8, !dbg !48
  %155 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %140, !dbg !48
  %156 = load <4 x i16>, ptr addrspace(3) %155, align 8, !dbg !48
  %157 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %142, !dbg !48
  %158 = load <4 x i16>, ptr addrspace(3) %157, align 8, !dbg !48
  %159 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %144, !dbg !48
  %160 = load <4 x i16>, ptr addrspace(3) %159, align 8, !dbg !48
  %161 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %146, !dbg !48
  %162 = load <4 x i16>, ptr addrspace(3) %161, align 8, !dbg !48
  %163 = mul i64 %10, %43, !dbg !49
  %164 = getelementptr i32, ptr addrspace(1) %5, i64 %43, !dbg !50
  %unmaskedload10 = load <1 x i32>, ptr addrspace(1) %164, align 4, !dbg !51
  %165 = extractelement <1 x i32> %unmaskedload10, i64 0, !dbg !51
  %166 = sub <1 x i32> %unmaskedload10, %48, !dbg !52
  %167 = extractelement <1 x i32> %166, i64 0, !dbg !52
  %168 = add i32 %50, 4, !dbg !53
  %169 = add i32 %168, %167, !dbg !54
  %170 = tail call i32 @llvm.smin.i32(i32 %169, i32 %165), !dbg !55
  %171 = add i32 %170, 15, !dbg !56
  %172 = sdiv i32 %171, 16, !dbg !58
  %173 = getelementptr i32, ptr addrspace(1) %4, i64 %163, !dbg !59
  %174 = sext i32 %27 to i64, !dbg !60
  %175 = mul i64 %21, %174, !dbg !60
  %176 = zext nneg i32 %54 to i64, !dbg !61
  %177 = mul i64 %20, %176, !dbg !61
  %178 = mul i64 %18, %174, !dbg !62
  %179 = mul i64 %17, %176, !dbg !63
  %180 = add i32 %72, 1, !dbg !64
  %181 = add i32 %180, %167, !dbg !65
  %182 = icmp sgt i32 %171, 15, !dbg !66
  %183 = insertelement <1 x i1> poison, i1 %182, i64 0, !dbg !67
  %184 = tail call <1 x i32> @llvm.masked.load.v1i32.p1(ptr addrspace(1) %173, i32 4, <1 x i1> %183, <1 x i32> zeroinitializer), !dbg !67
  %185 = extractelement <1 x i32> %184, i64 0, !dbg !67
  %186 = sext i32 %185 to i64, !dbg !68
  %187 = mul i64 %19, %186, !dbg !68
  %188 = mul i64 %16, %186, !dbg !69
  %189 = getelementptr bfloat, ptr addrspace(1) %2, i64 %188, !dbg !70
  %190 = getelementptr bfloat, ptr addrspace(1) %189, i64 %178, !dbg !70
  %191 = getelementptr bfloat, ptr addrspace(1) %190, i64 %95, !dbg !70
  %192 = getelementptr bfloat, ptr addrspace(1) %191, i64 %179, !dbg !70
  %193 = insertelement <8 x i1> poison, i1 %182, i64 0, !dbg !71
  %194 = shufflevector <8 x i1> %193, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !71
  %195 = tail call <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) %192, i32 16, <8 x i1> %194, <8 x bfloat> zeroinitializer), !dbg !71
  %196 = getelementptr bfloat, ptr addrspace(1) %3, i64 %187, !dbg !72
  %197 = getelementptr bfloat, ptr addrspace(1) %196, i64 %175, !dbg !72
  %198 = getelementptr bfloat, ptr addrspace(1) %197, i64 %95, !dbg !72
  %199 = getelementptr bfloat, ptr addrspace(1) %198, i64 %177, !dbg !72
  %200 = tail call <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) %199, i32 16, <8 x i1> %194, <8 x bfloat> zeroinitializer), !dbg !73
  %201 = getelementptr inbounds bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %111, !dbg !71
  %202 = shufflevector <8 x bfloat> %195, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !71
  store <4 x bfloat> %202, ptr addrspace(3) %201, align 8, !dbg !71
  %203 = getelementptr inbounds bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %116, !dbg !71
  %204 = shufflevector <8 x bfloat> %195, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !71
  store <4 x bfloat> %204, ptr addrspace(3) %203, align 8, !dbg !71
  %205 = or disjoint i32 %110, %69, !dbg !73
  %206 = getelementptr inbounds bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %205, !dbg !73
  store <8 x bfloat> %200, ptr addrspace(3) %206, align 16, !dbg !73
  %207 = add nsw i32 %172, -1, !dbg !66
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %2, i64 %178, !dbg !66
  %invariant.gep224 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %95, !dbg !66
  %invariant.gep226 = getelementptr bfloat, ptr addrspace(1) %invariant.gep224, i64 %179, !dbg !66
  %invariant.gep227 = getelementptr bfloat, ptr addrspace(1) %3, i64 %175, !dbg !66
  %invariant.gep229 = getelementptr bfloat, ptr addrspace(1) %invariant.gep227, i64 %95, !dbg !66
  %invariant.gep231 = getelementptr bfloat, ptr addrspace(1) %invariant.gep229, i64 %177, !dbg !66
  %208 = icmp sgt i32 %171, 31, !dbg !66
  br i1 %208, label %.lr.ph234, label %.._crit_edge235_crit_edge, !dbg !66

.._crit_edge235_crit_edge:                        ; preds = %51
  %.pre = shl nuw nsw i32 %78, 9, !dbg !73
  %.pre244 = or disjoint i32 %.pre, %119, !dbg !73
  %.pre246 = or disjoint i32 %.pre244, 128, !dbg !73
  %.pre248 = or disjoint i32 %.pre244, 256, !dbg !73
  %.pre250 = or disjoint i32 %.pre244, 384, !dbg !73
  %.pre252 = or disjoint i32 %.pre244, 16, !dbg !73
  %.pre254 = or disjoint i32 %.pre244, 144, !dbg !73
  %.pre256 = or disjoint i32 %.pre244, 272, !dbg !73
  %.pre258 = or disjoint i32 %.pre244, 400, !dbg !73
  %.pre260 = or disjoint i32 %.pre244, 32, !dbg !73
  %.pre262 = or disjoint i32 %.pre244, 160, !dbg !73
  %.pre264 = or disjoint i32 %.pre244, 288, !dbg !73
  %.pre266 = or disjoint i32 %.pre244, 416, !dbg !73
  %.pre268 = or disjoint i32 %.pre244, 48, !dbg !73
  %.pre270 = or disjoint i32 %.pre244, 176, !dbg !73
  %.pre272 = or disjoint i32 %.pre244, 304, !dbg !73
  %.pre274 = or disjoint i32 %.pre244, 432, !dbg !73
  %.pre276 = or disjoint i32 %.pre244, 64, !dbg !73
  %.pre278 = or disjoint i32 %.pre244, 192, !dbg !73
  %.pre280 = or disjoint i32 %.pre244, 320, !dbg !73
  %.pre282 = or disjoint i32 %.pre244, 448, !dbg !73
  %.pre284 = or disjoint i32 %.pre244, 80, !dbg !73
  %.pre286 = or disjoint i32 %.pre244, 208, !dbg !73
  %.pre288 = or disjoint i32 %.pre244, 336, !dbg !73
  %.pre290 = or disjoint i32 %.pre244, 464, !dbg !73
  %.pre292 = or disjoint i32 %.pre244, 96, !dbg !73
  %.pre294 = or disjoint i32 %.pre244, 224, !dbg !73
  %.pre296 = or disjoint i32 %.pre244, 352, !dbg !73
  %.pre298 = or disjoint i32 %.pre244, 480, !dbg !73
  %.pre300 = or disjoint i32 %.pre244, 112, !dbg !73
  %.pre302 = or disjoint i32 %.pre244, 240, !dbg !73
  %.pre304 = or disjoint i32 %.pre244, 368, !dbg !73
  %.pre306 = or disjoint i32 %.pre244, 496, !dbg !73
  br label %._crit_edge235, !dbg !66

.lr.ph234:                                        ; preds = %51
  %209 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %131
  %210 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %134
  %211 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %136
  %212 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %138
  %213 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %140
  %214 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %142
  %215 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %144
  %216 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %146
  %217 = shl nuw nsw i32 %78, 9
  %218 = or disjoint i32 %217, %119
  %219 = or disjoint i32 %218, 128
  %220 = or disjoint i32 %218, 256
  %221 = or disjoint i32 %218, 384
  %222 = or disjoint i32 %218, 16
  %223 = or disjoint i32 %218, 144
  %224 = or disjoint i32 %218, 272
  %225 = or disjoint i32 %218, 400
  %226 = or disjoint i32 %218, 32
  %227 = or disjoint i32 %218, 160
  %228 = or disjoint i32 %218, 288
  %229 = or disjoint i32 %218, 416
  %230 = or disjoint i32 %218, 48
  %231 = or disjoint i32 %218, 176
  %232 = or disjoint i32 %218, 304
  %233 = or disjoint i32 %218, 432
  %234 = or disjoint i32 %218, 64
  %235 = or disjoint i32 %218, 192
  %236 = or disjoint i32 %218, 320
  %237 = or disjoint i32 %218, 448
  %238 = or disjoint i32 %218, 80
  %239 = or disjoint i32 %218, 208
  %240 = or disjoint i32 %218, 336
  %241 = or disjoint i32 %218, 464
  %242 = or disjoint i32 %218, 96
  %243 = or disjoint i32 %218, 224
  %244 = or disjoint i32 %218, 352
  %245 = or disjoint i32 %218, 480
  %246 = or disjoint i32 %218, 112
  %247 = or disjoint i32 %218, 240
  %248 = or disjoint i32 %218, 368
  %249 = or disjoint i32 %218, 496
  %250 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %218
  %251 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %219
  %252 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %220
  %253 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %221
  %254 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %222
  %255 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %223
  %256 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %224
  %257 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %225
  %258 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %226
  %259 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %227
  %260 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %228
  %261 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %229
  %262 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %230
  %263 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %231
  %264 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %232
  %265 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %233
  %266 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %234
  %267 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %235
  %268 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %236
  %269 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %237
  %270 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %238
  %271 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %239
  %272 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %240
  %273 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %241
  %274 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %242
  %275 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %243
  %276 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %244
  %277 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %245
  %278 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %246
  %279 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %247
  %280 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %248
  %281 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %249
  %282 = shl i32 %52, 2
  %283 = xor i32 %282, 128
  %smax = tail call i32 @llvm.smax.i32(i32 %207, i32 1), !dbg !66
  br label %284, !dbg !66

284:                                              ; preds = %.lr.ph234, %284
  %285 = phi float [ 0xFFF0000000000000, %.lr.ph234 ], [ %422, %284 ]
  %286 = phi float [ 1.000000e+00, %.lr.ph234 ], [ %562, %284 ]
  %287 = phi i32 [ 0, %.lr.ph234 ], [ %304, %284 ]
  %288 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %563, %284 ]
  %289 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %564, %284 ]
  %290 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %565, %284 ]
  %291 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %566, %284 ]
  %292 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %567, %284 ]
  %293 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %568, %284 ]
  %294 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %569, %284 ]
  %295 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %570, %284 ]
  %296 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %571, %284 ]
  %297 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %572, %284 ]
  %298 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %573, %284 ]
  %299 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %574, %284 ]
  %300 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %575, %284 ]
  %301 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %576, %284 ]
  %302 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %577, %284 ]
  %303 = phi <2 x float> [ zeroinitializer, %.lr.ph234 ], [ %578, %284 ]
  %304 = add nuw nsw i32 %287, 1, !dbg !66
  %305 = zext nneg i32 %304 to i64, !dbg !74
  %306 = getelementptr i32, ptr addrspace(1) %173, i64 %305, !dbg !74
  %unmaskedload158 = load <1 x i32>, ptr addrspace(1) %306, align 4, !dbg !67
  %307 = extractelement <1 x i32> %unmaskedload158, i64 0, !dbg !67
  %308 = sext i32 %307 to i64, !dbg !68
  %309 = mul i64 %19, %308, !dbg !68
  %310 = mul i64 %16, %308, !dbg !69
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep226, i64 %310, !dbg !70
  %unmaskedload159 = load <8 x bfloat>, ptr addrspace(1) %gep, align 16, !dbg !71
  fence syncscope("workgroup") release, !dbg !71
  tail call void @llvm.amdgcn.s.barrier(), !dbg !71
  fence syncscope("workgroup") acquire, !dbg !71
  %311 = load <4 x i16>, ptr addrspace(3) %209, align 8, !dbg !71
  %312 = load <4 x i16>, ptr addrspace(3) %210, align 8, !dbg !71
  %313 = load <4 x i16>, ptr addrspace(3) %211, align 8, !dbg !71
  %314 = load <4 x i16>, ptr addrspace(3) %212, align 8, !dbg !71
  %315 = load <4 x i16>, ptr addrspace(3) %213, align 8, !dbg !71
  %316 = load <4 x i16>, ptr addrspace(3) %214, align 8, !dbg !71
  %317 = load <4 x i16>, ptr addrspace(3) %215, align 8, !dbg !71
  %318 = load <4 x i16>, ptr addrspace(3) %216, align 8, !dbg !71
  %gep232 = getelementptr bfloat, ptr addrspace(1) %invariant.gep231, i64 %309, !dbg !72
  %unmaskedload160 = load <8 x bfloat>, ptr addrspace(1) %gep232, align 16, !dbg !73
  %319 = load <1 x i16>, ptr addrspace(3) %250, align 2, !dbg !73
  %320 = load <1 x i16>, ptr addrspace(3) %251, align 2, !dbg !73
  %321 = load <1 x i16>, ptr addrspace(3) %252, align 2, !dbg !73
  %322 = shufflevector <1 x i16> %321, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %323 = load <1 x i16>, ptr addrspace(3) %253, align 2, !dbg !73
  %324 = shufflevector <1 x i16> %323, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %325 = load <1 x i16>, ptr addrspace(3) %254, align 2, !dbg !73
  %326 = load <1 x i16>, ptr addrspace(3) %255, align 2, !dbg !73
  %327 = load <1 x i16>, ptr addrspace(3) %256, align 2, !dbg !73
  %328 = shufflevector <1 x i16> %327, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %329 = load <1 x i16>, ptr addrspace(3) %257, align 2, !dbg !73
  %330 = shufflevector <1 x i16> %329, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %331 = load <1 x i16>, ptr addrspace(3) %258, align 2, !dbg !73
  %332 = load <1 x i16>, ptr addrspace(3) %259, align 2, !dbg !73
  %333 = load <1 x i16>, ptr addrspace(3) %260, align 2, !dbg !73
  %334 = shufflevector <1 x i16> %333, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %335 = load <1 x i16>, ptr addrspace(3) %261, align 2, !dbg !73
  %336 = shufflevector <1 x i16> %335, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %337 = load <1 x i16>, ptr addrspace(3) %262, align 2, !dbg !73
  %338 = load <1 x i16>, ptr addrspace(3) %263, align 2, !dbg !73
  %339 = load <1 x i16>, ptr addrspace(3) %264, align 2, !dbg !73
  %340 = shufflevector <1 x i16> %339, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %341 = load <1 x i16>, ptr addrspace(3) %265, align 2, !dbg !73
  %342 = shufflevector <1 x i16> %341, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %343 = load <1 x i16>, ptr addrspace(3) %266, align 2, !dbg !73
  %344 = load <1 x i16>, ptr addrspace(3) %267, align 2, !dbg !73
  %345 = load <1 x i16>, ptr addrspace(3) %268, align 2, !dbg !73
  %346 = shufflevector <1 x i16> %345, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %347 = load <1 x i16>, ptr addrspace(3) %269, align 2, !dbg !73
  %348 = shufflevector <1 x i16> %347, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %349 = load <1 x i16>, ptr addrspace(3) %270, align 2, !dbg !73
  %350 = load <1 x i16>, ptr addrspace(3) %271, align 2, !dbg !73
  %351 = load <1 x i16>, ptr addrspace(3) %272, align 2, !dbg !73
  %352 = shufflevector <1 x i16> %351, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %353 = load <1 x i16>, ptr addrspace(3) %273, align 2, !dbg !73
  %354 = shufflevector <1 x i16> %353, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %355 = load <1 x i16>, ptr addrspace(3) %274, align 2, !dbg !73
  %356 = load <1 x i16>, ptr addrspace(3) %275, align 2, !dbg !73
  %357 = load <1 x i16>, ptr addrspace(3) %276, align 2, !dbg !73
  %358 = shufflevector <1 x i16> %357, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %359 = load <1 x i16>, ptr addrspace(3) %277, align 2, !dbg !73
  %360 = shufflevector <1 x i16> %359, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %361 = load <1 x i16>, ptr addrspace(3) %278, align 2, !dbg !73
  %362 = load <1 x i16>, ptr addrspace(3) %279, align 2, !dbg !73
  %363 = load <1 x i16>, ptr addrspace(3) %280, align 2, !dbg !73
  %364 = shufflevector <1 x i16> %363, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %365 = load <1 x i16>, ptr addrspace(3) %281, align 2, !dbg !73
  %366 = shufflevector <1 x i16> %365, <1 x i16> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %367 = shl i32 %287, 4, !dbg !75
  %368 = or disjoint i32 %367, %57, !dbg !76
  %369 = or disjoint i32 %367, %58, !dbg !76
  %370 = or disjoint i32 %367, %59, !dbg !76
  %371 = or disjoint i32 %367, %60, !dbg !76
  %372 = icmp slt i32 %368, %181, !dbg !77
  %373 = icmp slt i32 %369, %181, !dbg !77
  %374 = icmp slt i32 %370, %181, !dbg !77
  %375 = icmp slt i32 %371, %181, !dbg !77
  %376 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %311, <4 x i16> %148, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !78
  %377 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %312, <4 x i16> %150, <4 x float> %376, i32 0, i32 0, i32 0), !dbg !78
  %378 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %313, <4 x i16> %152, <4 x float> %377, i32 0, i32 0, i32 0), !dbg !78
  %379 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %314, <4 x i16> %154, <4 x float> %378, i32 0, i32 0, i32 0), !dbg !78
  %380 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %315, <4 x i16> %156, <4 x float> %379, i32 0, i32 0, i32 0), !dbg !78
  %381 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %316, <4 x i16> %158, <4 x float> %380, i32 0, i32 0, i32 0), !dbg !78
  %382 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %317, <4 x i16> %160, <4 x float> %381, i32 0, i32 0, i32 0), !dbg !78
  %383 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %318, <4 x i16> %162, <4 x float> %382, i32 0, i32 0, i32 0), !dbg !78
  %384 = extractelement <4 x float> %383, i64 0, !dbg !78
  %385 = extractelement <4 x float> %383, i64 1, !dbg !78
  %386 = extractelement <4 x float> %383, i64 2, !dbg !78
  %387 = extractelement <4 x float> %383, i64 3, !dbg !78
  %388 = fmul float %6, %384, !dbg !79
  %389 = fmul float %6, %385, !dbg !79
  %390 = fmul float %6, %386, !dbg !79
  %391 = fmul float %6, %387, !dbg !79
  %392 = fadd float %388, 0.000000e+00, !dbg !80
  %393 = fadd float %389, 0.000000e+00, !dbg !80
  %394 = fadd float %390, 0.000000e+00, !dbg !80
  %395 = fadd float %391, 0.000000e+00, !dbg !80
  %396 = and i1 %100, %372, !dbg !81
  %397 = and i1 %100, %373, !dbg !81
  %398 = and i1 %100, %374, !dbg !81
  %399 = and i1 %100, %375, !dbg !81
  %400 = select i1 %396, float %392, float 0xFFF0000000000000, !dbg !82
  %401 = select i1 %399, float %395, float 0xFFF0000000000000, !dbg !82
  %402 = insertelement <2 x i1> poison, i1 %397, i64 0, !dbg !82
  %403 = insertelement <2 x i1> %402, i1 %398, i64 1, !dbg !82
  %404 = insertelement <2 x float> poison, float %393, i64 0, !dbg !82
  %405 = insertelement <2 x float> %404, float %394, i64 1, !dbg !82
  %406 = select <2 x i1> %403, <2 x float> %405, <2 x float> splat (float 0xFFF0000000000000), !dbg !82
  %407 = extractelement <2 x float> %406, i64 0, !dbg !83
  %408 = tail call float @llvm.maxnum.f32(float %400, float %407), !dbg !83
  %409 = extractelement <2 x float> %406, i64 1, !dbg !83
  %410 = tail call float @llvm.maxnum.f32(float %408, float %409), !dbg !83
  %411 = tail call float @llvm.maxnum.f32(float %410, float %401), !dbg !83
  %412 = bitcast float %411 to i32, !dbg !88
  %413 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %283, i32 %412), !dbg !88
  %414 = bitcast i32 %413 to float, !dbg !88
  %415 = tail call float @llvm.maxnum.f32(float %411, float %414), !dbg !83
  %416 = bitcast float %415 to i32, !dbg !88
  %417 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %416, i32 16415), !dbg !88
  %418 = bitcast i32 %417 to float, !dbg !88
  %419 = tail call float @llvm.maxnum.f32(float %415, float %418), !dbg !83
  %420 = tail call float @llvm.maxnum.f32(float %285, float %419), !dbg !89
  %421 = fcmp one float %420, 0xFFF0000000000000, !dbg !90
  %422 = select i1 %421, float %420, float 0.000000e+00, !dbg !91
  %423 = fsub float %400, %422, !dbg !92
  %424 = insertelement <2 x float> poison, float %422, i64 0, !dbg !92
  %425 = shufflevector <2 x float> %424, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %426 = fsub <2 x float> %406, %425, !dbg !92
  %427 = fsub float %401, %422, !dbg !92
  %428 = fmul float %423, 0x3FF7154760000000, !dbg !93
  %429 = tail call float @llvm.exp2.f32(float %428), !dbg !93
  %430 = fmul <2 x float> %426, splat (float 0x3FF7154760000000), !dbg !93
  %431 = tail call <2 x float> @llvm.exp2.v2f32(<2 x float> %430), !dbg !93
  %432 = fmul float %427, 0x3FF7154760000000, !dbg !93
  %433 = tail call float @llvm.exp2.f32(float %432), !dbg !93
  %434 = fsub float %285, %422, !dbg !94
  %435 = fmul float %434, 0x3FF7154760000000, !dbg !95
  %436 = tail call float @llvm.exp2.f32(float %435), !dbg !95
  %437 = insertelement <2 x float> poison, float %436, i64 0, !dbg !96
  %438 = bitcast float %429 to i32, !dbg !97
  %439 = and i32 %438, 2139095040, !dbg !97
  %.not209 = icmp eq i32 %439, 2139095040, !dbg !97
  %440 = lshr i32 %438, 16, !dbg !97
  %441 = and i32 %440, 1, !dbg !97
  %442 = add nuw nsw i32 %441, 32767, !dbg !97
  %443 = select i1 %.not209, i32 0, i32 %442, !dbg !97
  %444 = add i32 %443, %438, !dbg !97
  %445 = and i32 %438, 65535, !dbg !97
  %446 = icmp ne i32 %445, 0, !dbg !97
  %447 = and i1 %.not209, %446, !dbg !97
  %448 = or i32 %438, 65536, !dbg !97
  %449 = select i1 %447, i32 %448, i32 %444, !dbg !97
  %450 = lshr i32 %449, 16, !dbg !97
  %451 = trunc nuw i32 %450 to i16, !dbg !97
  %452 = bitcast <2 x float> %431 to <2 x i32>, !dbg !97
  %453 = and <2 x i32> %452, <i32 65535, i32 2139095040>, !dbg !97
  %454 = icmp ne <2 x i32> %453, <i32 0, i32 2139095040>, !dbg !97
  %455 = icmp eq <2 x i32> %453, <i32 0, i32 2139095040>, !dbg !97
  %456 = shufflevector <2 x i1> %454, <2 x i1> %455, <2 x i32> <i32 0, i32 3>, !dbg !97
  %457 = lshr <2 x i32> %452, splat (i32 16), !dbg !97
  %458 = and <2 x i32> %457, splat (i32 1), !dbg !97
  %459 = add nuw nsw <2 x i32> %458, splat (i32 32767), !dbg !97
  %460 = and <2 x i32> %452, <i32 2139095040, i32 65535>, !dbg !97
  %461 = icmp eq <2 x i32> %460, <i32 2139095040, i32 0>, !dbg !97
  %462 = icmp ne <2 x i32> %460, <i32 2139095040, i32 0>, !dbg !97
  %463 = shufflevector <2 x i1> %461, <2 x i1> %462, <2 x i32> <i32 0, i32 3>, !dbg !97
  %464 = shufflevector <2 x i1> %463, <2 x i1> %456, <2 x i32> <i32 0, i32 3>, !dbg !97
  %465 = select <2 x i1> %464, <2 x i32> zeroinitializer, <2 x i32> %459, !dbg !97
  %466 = add <2 x i32> %465, %452, !dbg !97
  %467 = and <2 x i1> %456, %463, !dbg !97
  %468 = or <2 x i32> %452, splat (i32 65536), !dbg !97
  %469 = select <2 x i1> %467, <2 x i32> %468, <2 x i32> %466, !dbg !97
  %470 = lshr <2 x i32> %469, splat (i32 16), !dbg !97
  %471 = trunc nuw <2 x i32> %470 to <2 x i16>, !dbg !97
  %472 = bitcast float %433 to i32, !dbg !97
  %473 = and i32 %472, 2139095040, !dbg !97
  %.not212 = icmp eq i32 %473, 2139095040, !dbg !97
  %474 = lshr i32 %472, 16, !dbg !97
  %475 = and i32 %474, 1, !dbg !97
  %476 = add nuw nsw i32 %475, 32767, !dbg !97
  %477 = select i1 %.not212, i32 0, i32 %476, !dbg !97
  %478 = add i32 %477, %472, !dbg !97
  %479 = and i32 %472, 65535, !dbg !97
  %480 = icmp ne i32 %479, 0, !dbg !97
  %481 = and i1 %.not212, %480, !dbg !97
  %482 = or i32 %472, 65536, !dbg !97
  %483 = select i1 %481, i32 %482, i32 %478, !dbg !97
  %484 = lshr i32 %483, 16, !dbg !97
  %485 = trunc nuw i32 %484 to i16, !dbg !97
  %486 = insertelement <4 x i16> poison, i16 %451, i64 0, !dbg !98
  %487 = shufflevector <2 x i16> %471, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %488 = shufflevector <4 x i16> %486, <4 x i16> %487, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !98
  %489 = insertelement <4 x i16> %488, i16 %485, i64 3, !dbg !98
  %490 = shufflevector <1 x i16> %319, <1 x i16> %320, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %491 = shufflevector <4 x i16> %490, <4 x i16> %322, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %492 = shufflevector <4 x i16> %491, <4 x i16> %324, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %493 = shufflevector <1 x i16> %325, <1 x i16> %326, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %494 = shufflevector <4 x i16> %493, <4 x i16> %328, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %495 = shufflevector <4 x i16> %494, <4 x i16> %330, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %496 = shufflevector <1 x i16> %331, <1 x i16> %332, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %497 = shufflevector <4 x i16> %496, <4 x i16> %334, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %498 = shufflevector <4 x i16> %497, <4 x i16> %336, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %499 = shufflevector <1 x i16> %337, <1 x i16> %338, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %500 = shufflevector <4 x i16> %499, <4 x i16> %340, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %501 = shufflevector <4 x i16> %500, <4 x i16> %342, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %502 = shufflevector <1 x i16> %343, <1 x i16> %344, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %503 = shufflevector <4 x i16> %502, <4 x i16> %346, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %504 = shufflevector <4 x i16> %503, <4 x i16> %348, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %505 = shufflevector <1 x i16> %349, <1 x i16> %350, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %506 = shufflevector <4 x i16> %505, <4 x i16> %352, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %507 = shufflevector <4 x i16> %506, <4 x i16> %354, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %508 = shufflevector <1 x i16> %355, <1 x i16> %356, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %509 = shufflevector <4 x i16> %508, <4 x i16> %358, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %510 = shufflevector <4 x i16> %509, <4 x i16> %360, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %511 = shufflevector <1 x i16> %361, <1 x i16> %362, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !98
  %512 = shufflevector <4 x i16> %511, <4 x i16> %364, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !98
  %513 = shufflevector <4 x i16> %512, <4 x i16> %366, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !98
  %514 = shufflevector <2 x float> %302, <2 x float> %303, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %515 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %516 = fmul <4 x float> %514, %515, !dbg !98
  %517 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %492, <4 x i16> %489, <4 x float> %516, i32 0, i32 0, i32 0), !dbg !98
  %518 = shufflevector <2 x float> %300, <2 x float> %301, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %519 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %520 = fmul <4 x float> %518, %519, !dbg !98
  %521 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %495, <4 x i16> %489, <4 x float> %520, i32 0, i32 0, i32 0), !dbg !98
  %522 = shufflevector <2 x float> %298, <2 x float> %299, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %523 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %524 = fmul <4 x float> %522, %523, !dbg !98
  %525 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %498, <4 x i16> %489, <4 x float> %524, i32 0, i32 0, i32 0), !dbg !98
  %526 = shufflevector <2 x float> %296, <2 x float> %297, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %527 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %528 = fmul <4 x float> %526, %527, !dbg !98
  %529 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %501, <4 x i16> %489, <4 x float> %528, i32 0, i32 0, i32 0), !dbg !98
  %530 = shufflevector <2 x float> %294, <2 x float> %295, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %531 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %532 = fmul <4 x float> %530, %531, !dbg !98
  %533 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %504, <4 x i16> %489, <4 x float> %532, i32 0, i32 0, i32 0), !dbg !98
  %534 = shufflevector <2 x float> %292, <2 x float> %293, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %535 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %536 = fmul <4 x float> %534, %535, !dbg !98
  %537 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %507, <4 x i16> %489, <4 x float> %536, i32 0, i32 0, i32 0), !dbg !98
  %538 = shufflevector <2 x float> %290, <2 x float> %291, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %539 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %540 = fmul <4 x float> %538, %539, !dbg !98
  %541 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %510, <4 x i16> %489, <4 x float> %540, i32 0, i32 0, i32 0), !dbg !98
  %542 = shufflevector <2 x float> %288, <2 x float> %289, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %543 = shufflevector <2 x float> %437, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %544 = fmul <4 x float> %542, %543, !dbg !98
  %545 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %513, <4 x i16> %489, <4 x float> %544, i32 0, i32 0, i32 0), !dbg !98
  fence syncscope("workgroup") release, !dbg !71
  tail call void @llvm.amdgcn.s.barrier(), !dbg !71
  fence syncscope("workgroup") acquire, !dbg !71
  %546 = shufflevector <8 x bfloat> %unmaskedload159, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !71
  store <4 x bfloat> %546, ptr addrspace(3) %201, align 8, !dbg !71
  %547 = shufflevector <8 x bfloat> %unmaskedload159, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !71
  store <4 x bfloat> %547, ptr addrspace(3) %203, align 8, !dbg !71
  store <8 x bfloat> %unmaskedload160, ptr addrspace(3) %206, align 16, !dbg !73
  %548 = extractelement <2 x float> %431, i64 0, !dbg !99
  %549 = fadd float %429, %548, !dbg !99
  %550 = extractelement <2 x float> %431, i64 1, !dbg !99
  %551 = fadd float %550, %549, !dbg !99
  %552 = fadd float %433, %551, !dbg !99
  %553 = bitcast float %552 to i32, !dbg !101
  %554 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %283, i32 %553), !dbg !101
  %555 = bitcast i32 %554 to float, !dbg !101
  %556 = fadd float %552, %555, !dbg !99
  %557 = bitcast float %556 to i32, !dbg !101
  %558 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %557, i32 16415), !dbg !101
  %559 = bitcast i32 %558 to float, !dbg !101
  %560 = fadd float %556, %559, !dbg !99
  %561 = fmul float %286, %436, !dbg !102
  %562 = fadd float %561, %560, !dbg !103
  %exitcond.not = icmp eq i32 %304, %smax, !dbg !66
  %563 = shufflevector <4 x float> %545, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %564 = shufflevector <4 x float> %545, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %565 = shufflevector <4 x float> %541, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %566 = shufflevector <4 x float> %541, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %567 = shufflevector <4 x float> %537, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %568 = shufflevector <4 x float> %537, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %569 = shufflevector <4 x float> %533, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %570 = shufflevector <4 x float> %533, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %571 = shufflevector <4 x float> %529, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %572 = shufflevector <4 x float> %529, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %573 = shufflevector <4 x float> %525, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %574 = shufflevector <4 x float> %525, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %575 = shufflevector <4 x float> %521, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %576 = shufflevector <4 x float> %521, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %577 = shufflevector <4 x float> %517, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %578 = shufflevector <4 x float> %517, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  br i1 %exitcond.not, label %._crit_edge235.loopexit, label %284, !dbg !66

._crit_edge235.loopexit:                          ; preds = %284
  %579 = shufflevector <4 x float> %545, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %580 = shufflevector <4 x float> %541, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %581 = shufflevector <4 x float> %537, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %582 = shufflevector <4 x float> %533, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %583 = shufflevector <4 x float> %529, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %584 = shufflevector <4 x float> %525, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %585 = shufflevector <4 x float> %521, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %586 = shufflevector <4 x float> %517, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %587 = extractelement <4 x float> %545, i64 3, !dbg !98
  %588 = extractelement <4 x float> %545, i64 0, !dbg !98
  %589 = extractelement <4 x float> %541, i64 3, !dbg !98
  %590 = extractelement <4 x float> %541, i64 0, !dbg !98
  %591 = extractelement <4 x float> %537, i64 3, !dbg !98
  %592 = extractelement <4 x float> %537, i64 0, !dbg !98
  %593 = extractelement <4 x float> %533, i64 3, !dbg !98
  %594 = extractelement <4 x float> %533, i64 0, !dbg !98
  %595 = extractelement <4 x float> %529, i64 3, !dbg !98
  %596 = extractelement <4 x float> %529, i64 0, !dbg !98
  %597 = extractelement <4 x float> %525, i64 3, !dbg !98
  %598 = extractelement <4 x float> %525, i64 0, !dbg !98
  %599 = extractelement <4 x float> %521, i64 3, !dbg !98
  %600 = extractelement <4 x float> %521, i64 0, !dbg !98
  %601 = extractelement <4 x float> %517, i64 3, !dbg !98
  %602 = extractelement <4 x float> %517, i64 0, !dbg !98
  br label %._crit_edge235, !dbg !66

._crit_edge235:                                   ; preds = %._crit_edge235.loopexit, %.._crit_edge235_crit_edge
  %.pre-phi307 = phi i32 [ %.pre306, %.._crit_edge235_crit_edge ], [ %249, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi305 = phi i32 [ %.pre304, %.._crit_edge235_crit_edge ], [ %248, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi303 = phi i32 [ %.pre302, %.._crit_edge235_crit_edge ], [ %247, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi301 = phi i32 [ %.pre300, %.._crit_edge235_crit_edge ], [ %246, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi299 = phi i32 [ %.pre298, %.._crit_edge235_crit_edge ], [ %245, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi297 = phi i32 [ %.pre296, %.._crit_edge235_crit_edge ], [ %244, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi295 = phi i32 [ %.pre294, %.._crit_edge235_crit_edge ], [ %243, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi293 = phi i32 [ %.pre292, %.._crit_edge235_crit_edge ], [ %242, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi291 = phi i32 [ %.pre290, %.._crit_edge235_crit_edge ], [ %241, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi289 = phi i32 [ %.pre288, %.._crit_edge235_crit_edge ], [ %240, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi287 = phi i32 [ %.pre286, %.._crit_edge235_crit_edge ], [ %239, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi285 = phi i32 [ %.pre284, %.._crit_edge235_crit_edge ], [ %238, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi283 = phi i32 [ %.pre282, %.._crit_edge235_crit_edge ], [ %237, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi281 = phi i32 [ %.pre280, %.._crit_edge235_crit_edge ], [ %236, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi279 = phi i32 [ %.pre278, %.._crit_edge235_crit_edge ], [ %235, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi277 = phi i32 [ %.pre276, %.._crit_edge235_crit_edge ], [ %234, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi275 = phi i32 [ %.pre274, %.._crit_edge235_crit_edge ], [ %233, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi273 = phi i32 [ %.pre272, %.._crit_edge235_crit_edge ], [ %232, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi271 = phi i32 [ %.pre270, %.._crit_edge235_crit_edge ], [ %231, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi269 = phi i32 [ %.pre268, %.._crit_edge235_crit_edge ], [ %230, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi267 = phi i32 [ %.pre266, %.._crit_edge235_crit_edge ], [ %229, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi265 = phi i32 [ %.pre264, %.._crit_edge235_crit_edge ], [ %228, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi263 = phi i32 [ %.pre262, %.._crit_edge235_crit_edge ], [ %227, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi261 = phi i32 [ %.pre260, %.._crit_edge235_crit_edge ], [ %226, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi259 = phi i32 [ %.pre258, %.._crit_edge235_crit_edge ], [ %225, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi257 = phi i32 [ %.pre256, %.._crit_edge235_crit_edge ], [ %224, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi255 = phi i32 [ %.pre254, %.._crit_edge235_crit_edge ], [ %223, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi253 = phi i32 [ %.pre252, %.._crit_edge235_crit_edge ], [ %222, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi251 = phi i32 [ %.pre250, %.._crit_edge235_crit_edge ], [ %221, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi249 = phi i32 [ %.pre248, %.._crit_edge235_crit_edge ], [ %220, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi247 = phi i32 [ %.pre246, %.._crit_edge235_crit_edge ], [ %219, %._crit_edge235.loopexit ], !dbg !73
  %.pre-phi245 = phi i32 [ %.pre244, %.._crit_edge235_crit_edge ], [ %218, %._crit_edge235.loopexit ], !dbg !73
  %603 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %602, %._crit_edge235.loopexit ]
  %604 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %601, %._crit_edge235.loopexit ]
  %605 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %600, %._crit_edge235.loopexit ]
  %606 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %599, %._crit_edge235.loopexit ]
  %607 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %598, %._crit_edge235.loopexit ]
  %608 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %597, %._crit_edge235.loopexit ]
  %609 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %596, %._crit_edge235.loopexit ]
  %610 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %595, %._crit_edge235.loopexit ]
  %611 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %594, %._crit_edge235.loopexit ]
  %612 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %593, %._crit_edge235.loopexit ]
  %613 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %592, %._crit_edge235.loopexit ]
  %614 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %591, %._crit_edge235.loopexit ]
  %615 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %590, %._crit_edge235.loopexit ]
  %616 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %589, %._crit_edge235.loopexit ]
  %617 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %588, %._crit_edge235.loopexit ]
  %618 = phi float [ 0.000000e+00, %.._crit_edge235_crit_edge ], [ %587, %._crit_edge235.loopexit ]
  %.lcssa221 = phi float [ 1.000000e+00, %.._crit_edge235_crit_edge ], [ %562, %._crit_edge235.loopexit ]
  %.lcssa = phi float [ 0xFFF0000000000000, %.._crit_edge235_crit_edge ], [ %422, %._crit_edge235.loopexit ]
  %619 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %586, %._crit_edge235.loopexit ]
  %620 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %585, %._crit_edge235.loopexit ]
  %621 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %584, %._crit_edge235.loopexit ]
  %622 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %583, %._crit_edge235.loopexit ]
  %623 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %582, %._crit_edge235.loopexit ]
  %624 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %581, %._crit_edge235.loopexit ]
  %625 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %580, %._crit_edge235.loopexit ]
  %626 = phi <2 x float> [ zeroinitializer, %.._crit_edge235_crit_edge ], [ %579, %._crit_edge235.loopexit ]
  %627 = tail call i32 @llvm.smax.i32(i32 %207, i32 0), !dbg !66
  fence syncscope("workgroup") release, !dbg !71
  tail call void @llvm.amdgcn.s.barrier(), !dbg !71
  fence syncscope("workgroup") acquire, !dbg !71
  %628 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi245, !dbg !73
  %629 = load <1 x i16>, ptr addrspace(3) %628, align 2, !dbg !73
  %630 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi247, !dbg !73
  %631 = load <1 x i16>, ptr addrspace(3) %630, align 2, !dbg !73
  %632 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi249, !dbg !73
  %633 = load <1 x i16>, ptr addrspace(3) %632, align 2, !dbg !73
  %634 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi251, !dbg !73
  %635 = load <1 x i16>, ptr addrspace(3) %634, align 2, !dbg !73
  %636 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi253, !dbg !73
  %637 = load <1 x i16>, ptr addrspace(3) %636, align 2, !dbg !73
  %638 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi255, !dbg !73
  %639 = load <1 x i16>, ptr addrspace(3) %638, align 2, !dbg !73
  %640 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi257, !dbg !73
  %641 = load <1 x i16>, ptr addrspace(3) %640, align 2, !dbg !73
  %642 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi259, !dbg !73
  %643 = load <1 x i16>, ptr addrspace(3) %642, align 2, !dbg !73
  %644 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi261, !dbg !73
  %645 = load <1 x i16>, ptr addrspace(3) %644, align 2, !dbg !73
  %646 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi263, !dbg !73
  %647 = load <1 x i16>, ptr addrspace(3) %646, align 2, !dbg !73
  %648 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi265, !dbg !73
  %649 = load <1 x i16>, ptr addrspace(3) %648, align 2, !dbg !73
  %650 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi267, !dbg !73
  %651 = load <1 x i16>, ptr addrspace(3) %650, align 2, !dbg !73
  %652 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi269, !dbg !73
  %653 = load <1 x i16>, ptr addrspace(3) %652, align 2, !dbg !73
  %654 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi271, !dbg !73
  %655 = load <1 x i16>, ptr addrspace(3) %654, align 2, !dbg !73
  %656 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi273, !dbg !73
  %657 = load <1 x i16>, ptr addrspace(3) %656, align 2, !dbg !73
  %658 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi275, !dbg !73
  %659 = load <1 x i16>, ptr addrspace(3) %658, align 2, !dbg !73
  %660 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi277, !dbg !73
  %661 = load <1 x i16>, ptr addrspace(3) %660, align 2, !dbg !73
  %662 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi279, !dbg !73
  %663 = load <1 x i16>, ptr addrspace(3) %662, align 2, !dbg !73
  %664 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi281, !dbg !73
  %665 = load <1 x i16>, ptr addrspace(3) %664, align 2, !dbg !73
  %666 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi283, !dbg !73
  %667 = load <1 x i16>, ptr addrspace(3) %666, align 2, !dbg !73
  %668 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi285, !dbg !73
  %669 = load <1 x i16>, ptr addrspace(3) %668, align 2, !dbg !73
  %670 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi287, !dbg !73
  %671 = load <1 x i16>, ptr addrspace(3) %670, align 2, !dbg !73
  %672 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi289, !dbg !73
  %673 = load <1 x i16>, ptr addrspace(3) %672, align 2, !dbg !73
  %674 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi291, !dbg !73
  %675 = load <1 x i16>, ptr addrspace(3) %674, align 2, !dbg !73
  %676 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi293, !dbg !73
  %677 = load <1 x i16>, ptr addrspace(3) %676, align 2, !dbg !73
  %678 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi295, !dbg !73
  %679 = load <1 x i16>, ptr addrspace(3) %678, align 2, !dbg !73
  %680 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi297, !dbg !73
  %681 = load <1 x i16>, ptr addrspace(3) %680, align 2, !dbg !73
  %682 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi299, !dbg !73
  %683 = load <1 x i16>, ptr addrspace(3) %682, align 2, !dbg !73
  %684 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi301, !dbg !73
  %685 = load <1 x i16>, ptr addrspace(3) %684, align 2, !dbg !73
  %686 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi303, !dbg !73
  %687 = load <1 x i16>, ptr addrspace(3) %686, align 2, !dbg !73
  %688 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi305, !dbg !73
  %689 = load <1 x i16>, ptr addrspace(3) %688, align 2, !dbg !73
  %690 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %.pre-phi307, !dbg !73
  %691 = load <1 x i16>, ptr addrspace(3) %690, align 2, !dbg !73
  %692 = shl nuw nsw i32 %627, 4, !dbg !75
  %693 = or disjoint i32 %692, %57, !dbg !76
  %694 = or disjoint i32 %692, %58, !dbg !76
  %695 = or disjoint i32 %692, %59, !dbg !76
  %696 = or disjoint i32 %692, %60, !dbg !76
  %697 = icmp slt i32 %693, %181, !dbg !77
  %698 = icmp slt i32 %694, %181, !dbg !77
  %699 = icmp slt i32 %695, %181, !dbg !77
  %700 = icmp slt i32 %696, %181, !dbg !77
  br i1 %182, label %701, label %738, !dbg !78

701:                                              ; preds = %._crit_edge235
  %702 = load <4 x i16>, ptr addrspace(3) %161, align 8, !dbg !48
  %703 = load <4 x i16>, ptr addrspace(3) %159, align 8, !dbg !48
  %704 = load <4 x i16>, ptr addrspace(3) %157, align 8, !dbg !48
  %705 = load <4 x i16>, ptr addrspace(3) %155, align 8, !dbg !48
  %706 = load <4 x i16>, ptr addrspace(3) %153, align 8, !dbg !48
  %707 = load <4 x i16>, ptr addrspace(3) %151, align 8, !dbg !48
  %708 = load <4 x i16>, ptr addrspace(3) %149, align 8, !dbg !48
  %709 = load <4 x i16>, ptr addrspace(3) %147, align 8, !dbg !48
  %710 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %146, !dbg !71
  %711 = load <4 x i16>, ptr addrspace(3) %710, align 8, !dbg !71
  %712 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %144, !dbg !71
  %713 = load <4 x i16>, ptr addrspace(3) %712, align 8, !dbg !71
  %714 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %142, !dbg !71
  %715 = load <4 x i16>, ptr addrspace(3) %714, align 8, !dbg !71
  %716 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %140, !dbg !71
  %717 = load <4 x i16>, ptr addrspace(3) %716, align 8, !dbg !71
  %718 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %138, !dbg !71
  %719 = load <4 x i16>, ptr addrspace(3) %718, align 8, !dbg !71
  %720 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %136, !dbg !71
  %721 = load <4 x i16>, ptr addrspace(3) %720, align 8, !dbg !71
  %722 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %134, !dbg !71
  %723 = load <4 x i16>, ptr addrspace(3) %722, align 8, !dbg !71
  %724 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %131, !dbg !71
  %725 = load <4 x i16>, ptr addrspace(3) %724, align 8, !dbg !71
  %726 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %725, <4 x i16> %709, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !78
  %727 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %723, <4 x i16> %708, <4 x float> %726, i32 0, i32 0, i32 0), !dbg !78
  %728 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %721, <4 x i16> %707, <4 x float> %727, i32 0, i32 0, i32 0), !dbg !78
  %729 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %719, <4 x i16> %706, <4 x float> %728, i32 0, i32 0, i32 0), !dbg !78
  %730 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %717, <4 x i16> %705, <4 x float> %729, i32 0, i32 0, i32 0), !dbg !78
  %731 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %715, <4 x i16> %704, <4 x float> %730, i32 0, i32 0, i32 0), !dbg !78
  %732 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %713, <4 x i16> %703, <4 x float> %731, i32 0, i32 0, i32 0), !dbg !78
  %733 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %711, <4 x i16> %702, <4 x float> %732, i32 0, i32 0, i32 0), !dbg !78
  %734 = extractelement <4 x float> %733, i64 0, !dbg !78
  %735 = extractelement <4 x float> %733, i64 1, !dbg !78
  %736 = extractelement <4 x float> %733, i64 2, !dbg !78
  %737 = extractelement <4 x float> %733, i64 3, !dbg !78
  br label %738, !dbg !78

738:                                              ; preds = %701, %._crit_edge235
  %739 = phi float [ %734, %701 ], [ 0.000000e+00, %._crit_edge235 ], !dbg !78
  %740 = phi float [ %735, %701 ], [ 0.000000e+00, %._crit_edge235 ], !dbg !78
  %741 = phi float [ %736, %701 ], [ 0.000000e+00, %._crit_edge235 ], !dbg !78
  %742 = phi float [ %737, %701 ], [ 0.000000e+00, %._crit_edge235 ], !dbg !78
  %743 = fmul float %6, %739, !dbg !79
  %744 = fmul float %6, %740, !dbg !79
  %745 = fmul float %6, %741, !dbg !79
  %746 = fmul float %6, %742, !dbg !79
  %747 = fadd float %743, 0.000000e+00, !dbg !80
  %748 = fadd float %744, 0.000000e+00, !dbg !80
  %749 = fadd float %745, 0.000000e+00, !dbg !80
  %750 = fadd float %746, 0.000000e+00, !dbg !80
  %751 = and i1 %100, %697, !dbg !81
  %752 = and i1 %100, %698, !dbg !81
  %753 = and i1 %100, %699, !dbg !81
  %754 = and i1 %100, %700, !dbg !81
  %755 = select i1 %751, float %747, float 0xFFF0000000000000, !dbg !82
  %756 = select i1 %752, float %748, float 0xFFF0000000000000, !dbg !82
  %757 = select i1 %753, float %749, float 0xFFF0000000000000, !dbg !82
  %758 = select i1 %754, float %750, float 0xFFF0000000000000, !dbg !82
  %759 = tail call float @llvm.maxnum.f32(float %755, float %756), !dbg !83
  %760 = tail call float @llvm.maxnum.f32(float %759, float %757), !dbg !83
  %761 = tail call float @llvm.maxnum.f32(float %760, float %758), !dbg !83
  %762 = bitcast float %761 to i32, !dbg !88
  %763 = shl i32 %52, 2, !dbg !88
  %764 = xor i32 %763, 128, !dbg !88
  %765 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %764, i32 %762), !dbg !88
  %766 = bitcast i32 %765 to float, !dbg !88
  %767 = tail call float @llvm.maxnum.f32(float %761, float %766), !dbg !83
  %768 = bitcast float %767 to i32, !dbg !88
  %769 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %768, i32 16415), !dbg !88
  %770 = bitcast i32 %769 to float, !dbg !88
  %771 = tail call float @llvm.maxnum.f32(float %767, float %770), !dbg !83
  %772 = tail call float @llvm.maxnum.f32(float %.lcssa, float %771), !dbg !89
  %773 = fcmp one float %772, 0xFFF0000000000000, !dbg !90
  %774 = select i1 %773, float %772, float 0.000000e+00, !dbg !91
  %775 = fsub float %755, %774, !dbg !92
  %776 = fsub float %756, %774, !dbg !92
  %777 = fsub float %757, %774, !dbg !92
  %778 = fsub float %758, %774, !dbg !92
  %779 = fmul float %775, 0x3FF7154760000000, !dbg !93
  %780 = tail call float @llvm.exp2.f32(float %779), !dbg !93
  %781 = fmul float %776, 0x3FF7154760000000, !dbg !93
  %782 = tail call float @llvm.exp2.f32(float %781), !dbg !93
  %783 = fmul float %777, 0x3FF7154760000000, !dbg !93
  %784 = tail call float @llvm.exp2.f32(float %783), !dbg !93
  %785 = fmul float %778, 0x3FF7154760000000, !dbg !93
  %786 = tail call float @llvm.exp2.f32(float %785), !dbg !93
  %787 = fsub float %.lcssa, %774, !dbg !94
  %788 = fmul float %787, 0x3FF7154760000000, !dbg !95
  %789 = tail call float @llvm.exp2.f32(float %788), !dbg !95
  br i1 %182, label %790, label %1000, !dbg !98

790:                                              ; preds = %738
  %791 = shufflevector <2 x float> %626, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %792 = insertelement <2 x float> %791, float %618, i64 1, !dbg !96
  %793 = insertelement <2 x float> poison, float %789, i64 0, !dbg !96
  %794 = insertelement <2 x float> %791, float %617, i64 0, !dbg !96
  %795 = shufflevector <2 x float> %625, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %796 = insertelement <2 x float> %795, float %616, i64 1, !dbg !96
  %797 = insertelement <2 x float> %795, float %615, i64 0, !dbg !96
  %798 = shufflevector <2 x float> %624, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %799 = insertelement <2 x float> %798, float %614, i64 1, !dbg !96
  %800 = insertelement <2 x float> %798, float %613, i64 0, !dbg !96
  %801 = shufflevector <2 x float> %623, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %802 = insertelement <2 x float> %801, float %612, i64 1, !dbg !96
  %803 = insertelement <2 x float> %801, float %611, i64 0, !dbg !96
  %804 = shufflevector <2 x float> %622, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %805 = insertelement <2 x float> %804, float %610, i64 1, !dbg !96
  %806 = insertelement <2 x float> %804, float %609, i64 0, !dbg !96
  %807 = shufflevector <2 x float> %621, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %808 = insertelement <2 x float> %807, float %608, i64 1, !dbg !96
  %809 = insertelement <2 x float> %807, float %607, i64 0, !dbg !96
  %810 = shufflevector <2 x float> %620, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %811 = insertelement <2 x float> %810, float %606, i64 1, !dbg !96
  %812 = insertelement <2 x float> %810, float %605, i64 0, !dbg !96
  %813 = shufflevector <2 x float> %619, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !96
  %814 = insertelement <2 x float> %813, float %604, i64 1, !dbg !96
  %815 = insertelement <2 x float> %813, float %603, i64 0, !dbg !96
  %816 = bitcast float %786 to i32, !dbg !97
  %817 = and i32 %816, 2139095040, !dbg !97
  %818 = icmp eq i32 %817, 2139095040, !dbg !97
  %819 = and i32 %816, 65535, !dbg !97
  %820 = icmp ne i32 %819, 0, !dbg !97
  %821 = and i1 %818, %820, !dbg !97
  %822 = or i32 %816, 65536, !dbg !97
  %823 = lshr i32 %816, 16, !dbg !97
  %824 = and i32 %823, 1, !dbg !97
  %825 = add nuw nsw i32 %824, 32767, !dbg !97
  %826 = select i1 %818, i32 0, i32 %825, !dbg !97
  %827 = add i32 %826, %816, !dbg !97
  %828 = select i1 %821, i32 %822, i32 %827, !dbg !97
  %829 = lshr i32 %828, 16, !dbg !97
  %830 = trunc nuw i32 %829 to i16, !dbg !97
  %831 = bitcast float %784 to i32, !dbg !97
  %832 = and i32 %831, 2139095040, !dbg !97
  %833 = icmp eq i32 %832, 2139095040, !dbg !97
  %834 = and i32 %831, 65535, !dbg !97
  %835 = icmp ne i32 %834, 0, !dbg !97
  %836 = and i1 %833, %835, !dbg !97
  %837 = or i32 %831, 65536, !dbg !97
  %838 = lshr i32 %831, 16, !dbg !97
  %839 = and i32 %838, 1, !dbg !97
  %840 = add nuw nsw i32 %839, 32767, !dbg !97
  %841 = select i1 %833, i32 0, i32 %840, !dbg !97
  %842 = add i32 %841, %831, !dbg !97
  %843 = select i1 %836, i32 %837, i32 %842, !dbg !97
  %844 = lshr i32 %843, 16, !dbg !97
  %845 = trunc nuw i32 %844 to i16, !dbg !97
  %846 = bitcast float %782 to i32, !dbg !97
  %847 = and i32 %846, 2139095040, !dbg !97
  %848 = icmp eq i32 %847, 2139095040, !dbg !97
  %849 = and i32 %846, 65535, !dbg !97
  %850 = icmp ne i32 %849, 0, !dbg !97
  %851 = and i1 %848, %850, !dbg !97
  %852 = or i32 %846, 65536, !dbg !97
  %853 = lshr i32 %846, 16, !dbg !97
  %854 = and i32 %853, 1, !dbg !97
  %855 = add nuw nsw i32 %854, 32767, !dbg !97
  %856 = select i1 %848, i32 0, i32 %855, !dbg !97
  %857 = add i32 %856, %846, !dbg !97
  %858 = select i1 %851, i32 %852, i32 %857, !dbg !97
  %859 = lshr i32 %858, 16, !dbg !97
  %860 = trunc nuw i32 %859 to i16, !dbg !97
  %861 = bitcast float %780 to i32, !dbg !97
  %862 = and i32 %861, 2139095040, !dbg !97
  %863 = icmp eq i32 %862, 2139095040, !dbg !97
  %864 = and i32 %861, 65535, !dbg !97
  %865 = icmp ne i32 %864, 0, !dbg !97
  %866 = and i1 %863, %865, !dbg !97
  %867 = or i32 %861, 65536, !dbg !97
  %868 = lshr i32 %861, 16, !dbg !97
  %869 = and i32 %868, 1, !dbg !97
  %870 = add nuw nsw i32 %869, 32767, !dbg !97
  %871 = select i1 %863, i32 0, i32 %870, !dbg !97
  %872 = add i32 %871, %861, !dbg !97
  %873 = select i1 %866, i32 %867, i32 %872, !dbg !97
  %874 = lshr i32 %873, 16, !dbg !97
  %875 = trunc nuw i32 %874 to i16, !dbg !97
  %876 = insertelement <4 x i16> poison, i16 %875, i64 0, !dbg !98
  %877 = insertelement <4 x i16> %876, i16 %860, i64 1, !dbg !98
  %878 = insertelement <4 x i16> %877, i16 %845, i64 2, !dbg !98
  %879 = insertelement <4 x i16> %878, i16 %830, i64 3, !dbg !98
  %880 = extractelement <1 x i16> %629, i64 0, !dbg !98
  %881 = insertelement <4 x i16> poison, i16 %880, i64 0, !dbg !98
  %882 = extractelement <1 x i16> %631, i64 0, !dbg !98
  %883 = insertelement <4 x i16> %881, i16 %882, i64 1, !dbg !98
  %884 = extractelement <1 x i16> %633, i64 0, !dbg !98
  %885 = insertelement <4 x i16> %883, i16 %884, i64 2, !dbg !98
  %886 = extractelement <1 x i16> %635, i64 0, !dbg !98
  %887 = insertelement <4 x i16> %885, i16 %886, i64 3, !dbg !98
  %888 = extractelement <1 x i16> %637, i64 0, !dbg !98
  %889 = insertelement <4 x i16> poison, i16 %888, i64 0, !dbg !98
  %890 = extractelement <1 x i16> %639, i64 0, !dbg !98
  %891 = insertelement <4 x i16> %889, i16 %890, i64 1, !dbg !98
  %892 = extractelement <1 x i16> %641, i64 0, !dbg !98
  %893 = insertelement <4 x i16> %891, i16 %892, i64 2, !dbg !98
  %894 = extractelement <1 x i16> %643, i64 0, !dbg !98
  %895 = insertelement <4 x i16> %893, i16 %894, i64 3, !dbg !98
  %896 = extractelement <1 x i16> %645, i64 0, !dbg !98
  %897 = insertelement <4 x i16> poison, i16 %896, i64 0, !dbg !98
  %898 = extractelement <1 x i16> %647, i64 0, !dbg !98
  %899 = insertelement <4 x i16> %897, i16 %898, i64 1, !dbg !98
  %900 = extractelement <1 x i16> %649, i64 0, !dbg !98
  %901 = insertelement <4 x i16> %899, i16 %900, i64 2, !dbg !98
  %902 = extractelement <1 x i16> %651, i64 0, !dbg !98
  %903 = insertelement <4 x i16> %901, i16 %902, i64 3, !dbg !98
  %904 = extractelement <1 x i16> %653, i64 0, !dbg !98
  %905 = insertelement <4 x i16> poison, i16 %904, i64 0, !dbg !98
  %906 = extractelement <1 x i16> %655, i64 0, !dbg !98
  %907 = insertelement <4 x i16> %905, i16 %906, i64 1, !dbg !98
  %908 = extractelement <1 x i16> %657, i64 0, !dbg !98
  %909 = insertelement <4 x i16> %907, i16 %908, i64 2, !dbg !98
  %910 = extractelement <1 x i16> %659, i64 0, !dbg !98
  %911 = insertelement <4 x i16> %909, i16 %910, i64 3, !dbg !98
  %912 = extractelement <1 x i16> %661, i64 0, !dbg !98
  %913 = insertelement <4 x i16> poison, i16 %912, i64 0, !dbg !98
  %914 = extractelement <1 x i16> %663, i64 0, !dbg !98
  %915 = insertelement <4 x i16> %913, i16 %914, i64 1, !dbg !98
  %916 = extractelement <1 x i16> %665, i64 0, !dbg !98
  %917 = insertelement <4 x i16> %915, i16 %916, i64 2, !dbg !98
  %918 = extractelement <1 x i16> %667, i64 0, !dbg !98
  %919 = insertelement <4 x i16> %917, i16 %918, i64 3, !dbg !98
  %920 = extractelement <1 x i16> %669, i64 0, !dbg !98
  %921 = insertelement <4 x i16> poison, i16 %920, i64 0, !dbg !98
  %922 = extractelement <1 x i16> %671, i64 0, !dbg !98
  %923 = insertelement <4 x i16> %921, i16 %922, i64 1, !dbg !98
  %924 = extractelement <1 x i16> %673, i64 0, !dbg !98
  %925 = insertelement <4 x i16> %923, i16 %924, i64 2, !dbg !98
  %926 = extractelement <1 x i16> %675, i64 0, !dbg !98
  %927 = insertelement <4 x i16> %925, i16 %926, i64 3, !dbg !98
  %928 = extractelement <1 x i16> %677, i64 0, !dbg !98
  %929 = insertelement <4 x i16> poison, i16 %928, i64 0, !dbg !98
  %930 = extractelement <1 x i16> %679, i64 0, !dbg !98
  %931 = insertelement <4 x i16> %929, i16 %930, i64 1, !dbg !98
  %932 = extractelement <1 x i16> %681, i64 0, !dbg !98
  %933 = insertelement <4 x i16> %931, i16 %932, i64 2, !dbg !98
  %934 = extractelement <1 x i16> %683, i64 0, !dbg !98
  %935 = insertelement <4 x i16> %933, i16 %934, i64 3, !dbg !98
  %936 = extractelement <1 x i16> %685, i64 0, !dbg !98
  %937 = insertelement <4 x i16> poison, i16 %936, i64 0, !dbg !98
  %938 = extractelement <1 x i16> %687, i64 0, !dbg !98
  %939 = insertelement <4 x i16> %937, i16 %938, i64 1, !dbg !98
  %940 = extractelement <1 x i16> %689, i64 0, !dbg !98
  %941 = insertelement <4 x i16> %939, i16 %940, i64 2, !dbg !98
  %942 = extractelement <1 x i16> %691, i64 0, !dbg !98
  %943 = insertelement <4 x i16> %941, i16 %942, i64 3, !dbg !98
  %944 = shufflevector <2 x float> %815, <2 x float> %814, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %945 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %946 = fmul <4 x float> %944, %945, !dbg !98
  %947 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %887, <4 x i16> %879, <4 x float> %946, i32 0, i32 0, i32 0), !dbg !98
  %948 = extractelement <4 x float> %947, i64 0, !dbg !98
  %949 = extractelement <4 x float> %947, i64 3, !dbg !98
  %950 = shufflevector <2 x float> %812, <2 x float> %811, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %951 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %952 = fmul <4 x float> %950, %951, !dbg !98
  %953 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %895, <4 x i16> %879, <4 x float> %952, i32 0, i32 0, i32 0), !dbg !98
  %954 = extractelement <4 x float> %953, i64 0, !dbg !98
  %955 = extractelement <4 x float> %953, i64 3, !dbg !98
  %956 = shufflevector <2 x float> %809, <2 x float> %808, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %957 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %958 = fmul <4 x float> %956, %957, !dbg !98
  %959 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %903, <4 x i16> %879, <4 x float> %958, i32 0, i32 0, i32 0), !dbg !98
  %960 = extractelement <4 x float> %959, i64 0, !dbg !98
  %961 = extractelement <4 x float> %959, i64 3, !dbg !98
  %962 = shufflevector <2 x float> %806, <2 x float> %805, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %963 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %964 = fmul <4 x float> %962, %963, !dbg !98
  %965 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %911, <4 x i16> %879, <4 x float> %964, i32 0, i32 0, i32 0), !dbg !98
  %966 = extractelement <4 x float> %965, i64 0, !dbg !98
  %967 = extractelement <4 x float> %965, i64 3, !dbg !98
  %968 = shufflevector <2 x float> %803, <2 x float> %802, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %969 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %970 = fmul <4 x float> %968, %969, !dbg !98
  %971 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %919, <4 x i16> %879, <4 x float> %970, i32 0, i32 0, i32 0), !dbg !98
  %972 = extractelement <4 x float> %971, i64 0, !dbg !98
  %973 = extractelement <4 x float> %971, i64 3, !dbg !98
  %974 = shufflevector <2 x float> %800, <2 x float> %799, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %975 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %976 = fmul <4 x float> %974, %975, !dbg !98
  %977 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %927, <4 x i16> %879, <4 x float> %976, i32 0, i32 0, i32 0), !dbg !98
  %978 = extractelement <4 x float> %977, i64 0, !dbg !98
  %979 = extractelement <4 x float> %977, i64 3, !dbg !98
  %980 = shufflevector <2 x float> %797, <2 x float> %796, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %981 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %982 = fmul <4 x float> %980, %981, !dbg !98
  %983 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %935, <4 x i16> %879, <4 x float> %982, i32 0, i32 0, i32 0), !dbg !98
  %984 = extractelement <4 x float> %983, i64 0, !dbg !98
  %985 = extractelement <4 x float> %983, i64 3, !dbg !98
  %986 = shufflevector <2 x float> %794, <2 x float> %792, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %987 = shufflevector <2 x float> %793, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %988 = fmul <4 x float> %986, %987, !dbg !98
  %989 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16> %943, <4 x i16> %879, <4 x float> %988, i32 0, i32 0, i32 0), !dbg !98
  %990 = extractelement <4 x float> %989, i64 0, !dbg !98
  %991 = extractelement <4 x float> %989, i64 3, !dbg !98
  %992 = shufflevector <4 x float> %947, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %993 = shufflevector <4 x float> %953, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %994 = shufflevector <4 x float> %959, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %995 = shufflevector <4 x float> %965, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %996 = shufflevector <4 x float> %971, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %997 = shufflevector <4 x float> %977, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %998 = shufflevector <4 x float> %983, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  %999 = shufflevector <4 x float> %989, <4 x float> poison, <2 x i32> <i32 1, i32 2>
  br label %1000, !dbg !98

1000:                                             ; preds = %790, %738
  %1001 = phi float [ %991, %790 ], [ %618, %738 ]
  %1002 = phi float [ %990, %790 ], [ %617, %738 ]
  %1003 = phi float [ %985, %790 ], [ %616, %738 ]
  %1004 = phi float [ %984, %790 ], [ %615, %738 ]
  %1005 = phi float [ %979, %790 ], [ %614, %738 ]
  %1006 = phi float [ %978, %790 ], [ %613, %738 ]
  %1007 = phi float [ %973, %790 ], [ %612, %738 ]
  %1008 = phi float [ %972, %790 ], [ %611, %738 ]
  %1009 = phi float [ %967, %790 ], [ %610, %738 ]
  %1010 = phi float [ %966, %790 ], [ %609, %738 ]
  %1011 = phi float [ %961, %790 ], [ %608, %738 ]
  %1012 = phi float [ %960, %790 ], [ %607, %738 ]
  %1013 = phi float [ %955, %790 ], [ %606, %738 ]
  %1014 = phi float [ %954, %790 ], [ %605, %738 ]
  %1015 = phi float [ %949, %790 ], [ %604, %738 ]
  %1016 = phi float [ %948, %790 ], [ %603, %738 ]
  %1017 = phi <2 x float> [ %992, %790 ], [ %619, %738 ]
  %1018 = phi <2 x float> [ %993, %790 ], [ %620, %738 ]
  %1019 = phi <2 x float> [ %994, %790 ], [ %621, %738 ]
  %1020 = phi <2 x float> [ %995, %790 ], [ %622, %738 ]
  %1021 = phi <2 x float> [ %996, %790 ], [ %623, %738 ]
  %1022 = phi <2 x float> [ %997, %790 ], [ %624, %738 ]
  %1023 = phi <2 x float> [ %998, %790 ], [ %625, %738 ]
  %1024 = phi <2 x float> [ %999, %790 ], [ %626, %738 ]
  %1025 = fadd float %780, %782, !dbg !99
  %1026 = fadd float %784, %1025, !dbg !99
  %1027 = fadd float %786, %1026, !dbg !99
  %1028 = bitcast float %1027 to i32, !dbg !101
  %1029 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %764, i32 %1028), !dbg !101
  %1030 = bitcast i32 %1029 to float, !dbg !101
  %1031 = fadd float %1027, %1030, !dbg !99
  %1032 = bitcast float %1031 to i32, !dbg !101
  %1033 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %1032, i32 16415), !dbg !101
  %1034 = bitcast i32 %1033 to float, !dbg !101
  %1035 = fadd float %1031, %1034, !dbg !99
  %1036 = fmul float %.lcssa221, %789, !dbg !102
  %1037 = fadd float %1036, %1035, !dbg !103
  %1038 = select i1 %182, float %1037, float %.lcssa221, !dbg !66
  %1039 = fdiv float %1016, %1038, !dbg !104
  %1040 = fdiv float %1015, %1038, !dbg !104
  %1041 = fdiv float %1014, %1038, !dbg !104
  %1042 = fdiv float %1013, %1038, !dbg !104
  %1043 = fdiv float %1012, %1038, !dbg !104
  %1044 = fdiv float %1011, %1038, !dbg !104
  %1045 = fdiv float %1010, %1038, !dbg !104
  %1046 = fdiv float %1009, %1038, !dbg !104
  %1047 = fdiv float %1008, %1038, !dbg !104
  %1048 = fdiv float %1007, %1038, !dbg !104
  %1049 = fdiv float %1006, %1038, !dbg !104
  %1050 = fdiv float %1005, %1038, !dbg !104
  %1051 = fdiv float %1004, %1038, !dbg !104
  %1052 = fdiv float %1003, %1038, !dbg !104
  %1053 = fdiv float %1002, %1038, !dbg !104
  %1054 = fdiv float %1001, %1038, !dbg !104
  %1055 = mul i64 %13, %81, !dbg !105
  %1056 = mul i64 %14, %84, !dbg !106
  %1057 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1055, !dbg !107
  %1058 = getelementptr bfloat, ptr addrspace(1) %1057, i64 %1056, !dbg !107
  %1059 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %87, !dbg !107
  %1060 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %88, !dbg !107
  %1061 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %89, !dbg !107
  %1062 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %90, !dbg !107
  %1063 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %91, !dbg !107
  %1064 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %92, !dbg !107
  %1065 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %93, !dbg !107
  %1066 = getelementptr bfloat, ptr addrspace(1) %1058, i64 %94, !dbg !107
  %1067 = bitcast float %1039 to i32, !dbg !108
  %1068 = and i32 %1067, 2139095040, !dbg !108
  %.not126 = icmp eq i32 %1068, 2139095040, !dbg !108
  %1069 = lshr i32 %1067, 16, !dbg !108
  %1070 = and i32 %1069, 1, !dbg !108
  %1071 = add nuw nsw i32 %1070, 32767, !dbg !108
  %1072 = select i1 %.not126, i32 0, i32 %1071, !dbg !108
  %1073 = add i32 %1072, %1067, !dbg !108
  %1074 = and i32 %1067, 65535, !dbg !108
  %1075 = icmp ne i32 %1074, 0, !dbg !108
  %1076 = and i1 %.not126, %1075, !dbg !108
  %1077 = or i32 %1067, 65536, !dbg !108
  %1078 = select i1 %1076, i32 %1077, i32 %1073, !dbg !108
  %1079 = lshr i32 %1078, 16, !dbg !108
  %1080 = trunc nuw i32 %1079 to i16, !dbg !108
  %1081 = insertelement <2 x float> poison, float %1038, i64 0, !dbg !104
  %1082 = shufflevector <2 x float> %1081, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !104
  %1083 = fdiv <2 x float> %1017, %1082, !dbg !104
  %1084 = bitcast <2 x float> %1083 to <2 x i32>, !dbg !108
  %1085 = and <2 x i32> %1084, <i32 65535, i32 2139095040>, !dbg !108
  %1086 = icmp ne <2 x i32> %1085, <i32 0, i32 2139095040>, !dbg !108
  %1087 = icmp eq <2 x i32> %1085, <i32 0, i32 2139095040>, !dbg !108
  %1088 = shufflevector <2 x i1> %1086, <2 x i1> %1087, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1089 = lshr <2 x i32> %1084, splat (i32 16), !dbg !108
  %1090 = and <2 x i32> %1089, splat (i32 1), !dbg !108
  %1091 = add nuw nsw <2 x i32> %1090, splat (i32 32767), !dbg !108
  %1092 = and <2 x i32> %1084, <i32 2139095040, i32 65535>, !dbg !108
  %1093 = icmp eq <2 x i32> %1092, <i32 2139095040, i32 0>, !dbg !108
  %1094 = icmp ne <2 x i32> %1092, <i32 2139095040, i32 0>, !dbg !108
  %1095 = shufflevector <2 x i1> %1093, <2 x i1> %1094, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1096 = shufflevector <2 x i1> %1095, <2 x i1> %1088, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1097 = select <2 x i1> %1096, <2 x i32> zeroinitializer, <2 x i32> %1091, !dbg !108
  %1098 = add <2 x i32> %1097, %1084, !dbg !108
  %1099 = and <2 x i1> %1088, %1095, !dbg !108
  %1100 = or <2 x i32> %1084, splat (i32 65536), !dbg !108
  %1101 = select <2 x i1> %1099, <2 x i32> %1100, <2 x i32> %1098, !dbg !108
  %1102 = lshr <2 x i32> %1101, splat (i32 16), !dbg !108
  %1103 = trunc nuw <2 x i32> %1102 to <2 x i16>, !dbg !108
  %1104 = bitcast float %1040 to i32, !dbg !108
  %1105 = and i32 %1104, 2139095040, !dbg !108
  %.not129 = icmp eq i32 %1105, 2139095040, !dbg !108
  %1106 = lshr i32 %1104, 16, !dbg !108
  %1107 = and i32 %1106, 1, !dbg !108
  %1108 = add nuw nsw i32 %1107, 32767, !dbg !108
  %1109 = select i1 %.not129, i32 0, i32 %1108, !dbg !108
  %1110 = add i32 %1109, %1104, !dbg !108
  %1111 = and i32 %1104, 65535, !dbg !108
  %1112 = icmp ne i32 %1111, 0, !dbg !108
  %1113 = and i1 %.not129, %1112, !dbg !108
  %1114 = or i32 %1104, 65536, !dbg !108
  %1115 = select i1 %1113, i32 %1114, i32 %1110, !dbg !108
  %1116 = lshr i32 %1115, 16, !dbg !108
  %1117 = trunc nuw i32 %1116 to i16, !dbg !108
  %1118 = bitcast float %1041 to i32, !dbg !108
  %1119 = and i32 %1118, 2139095040, !dbg !108
  %.not130 = icmp eq i32 %1119, 2139095040, !dbg !108
  %1120 = lshr i32 %1118, 16, !dbg !108
  %1121 = and i32 %1120, 1, !dbg !108
  %1122 = add nuw nsw i32 %1121, 32767, !dbg !108
  %1123 = select i1 %.not130, i32 0, i32 %1122, !dbg !108
  %1124 = add i32 %1123, %1118, !dbg !108
  %1125 = and i32 %1118, 65535, !dbg !108
  %1126 = icmp ne i32 %1125, 0, !dbg !108
  %1127 = and i1 %.not130, %1126, !dbg !108
  %1128 = or i32 %1118, 65536, !dbg !108
  %1129 = select i1 %1127, i32 %1128, i32 %1124, !dbg !108
  %1130 = lshr i32 %1129, 16, !dbg !108
  %1131 = trunc nuw i32 %1130 to i16, !dbg !108
  %1132 = fdiv <2 x float> %1018, %1082, !dbg !104
  %1133 = bitcast <2 x float> %1132 to <2 x i32>, !dbg !108
  %1134 = and <2 x i32> %1133, <i32 65535, i32 2139095040>, !dbg !108
  %1135 = icmp ne <2 x i32> %1134, <i32 0, i32 2139095040>, !dbg !108
  %1136 = icmp eq <2 x i32> %1134, <i32 0, i32 2139095040>, !dbg !108
  %1137 = shufflevector <2 x i1> %1135, <2 x i1> %1136, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1138 = lshr <2 x i32> %1133, splat (i32 16), !dbg !108
  %1139 = and <2 x i32> %1138, splat (i32 1), !dbg !108
  %1140 = add nuw nsw <2 x i32> %1139, splat (i32 32767), !dbg !108
  %1141 = and <2 x i32> %1133, <i32 2139095040, i32 65535>, !dbg !108
  %1142 = icmp eq <2 x i32> %1141, <i32 2139095040, i32 0>, !dbg !108
  %1143 = icmp ne <2 x i32> %1141, <i32 2139095040, i32 0>, !dbg !108
  %1144 = shufflevector <2 x i1> %1142, <2 x i1> %1143, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1145 = shufflevector <2 x i1> %1144, <2 x i1> %1137, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1146 = select <2 x i1> %1145, <2 x i32> zeroinitializer, <2 x i32> %1140, !dbg !108
  %1147 = add <2 x i32> %1146, %1133, !dbg !108
  %1148 = and <2 x i1> %1137, %1144, !dbg !108
  %1149 = or <2 x i32> %1133, splat (i32 65536), !dbg !108
  %1150 = select <2 x i1> %1148, <2 x i32> %1149, <2 x i32> %1147, !dbg !108
  %1151 = lshr <2 x i32> %1150, splat (i32 16), !dbg !108
  %1152 = trunc nuw <2 x i32> %1151 to <2 x i16>, !dbg !108
  %1153 = bitcast float %1042 to i32, !dbg !108
  %1154 = and i32 %1153, 2139095040, !dbg !108
  %.not133 = icmp eq i32 %1154, 2139095040, !dbg !108
  %1155 = lshr i32 %1153, 16, !dbg !108
  %1156 = and i32 %1155, 1, !dbg !108
  %1157 = add nuw nsw i32 %1156, 32767, !dbg !108
  %1158 = select i1 %.not133, i32 0, i32 %1157, !dbg !108
  %1159 = add i32 %1158, %1153, !dbg !108
  %1160 = and i32 %1153, 65535, !dbg !108
  %1161 = icmp ne i32 %1160, 0, !dbg !108
  %1162 = and i1 %.not133, %1161, !dbg !108
  %1163 = or i32 %1153, 65536, !dbg !108
  %1164 = select i1 %1162, i32 %1163, i32 %1159, !dbg !108
  %1165 = lshr i32 %1164, 16, !dbg !108
  %1166 = trunc nuw i32 %1165 to i16, !dbg !108
  %1167 = bitcast float %1043 to i32, !dbg !108
  %1168 = and i32 %1167, 2139095040, !dbg !108
  %.not134 = icmp eq i32 %1168, 2139095040, !dbg !108
  %1169 = lshr i32 %1167, 16, !dbg !108
  %1170 = and i32 %1169, 1, !dbg !108
  %1171 = add nuw nsw i32 %1170, 32767, !dbg !108
  %1172 = select i1 %.not134, i32 0, i32 %1171, !dbg !108
  %1173 = add i32 %1172, %1167, !dbg !108
  %1174 = and i32 %1167, 65535, !dbg !108
  %1175 = icmp ne i32 %1174, 0, !dbg !108
  %1176 = and i1 %.not134, %1175, !dbg !108
  %1177 = or i32 %1167, 65536, !dbg !108
  %1178 = select i1 %1176, i32 %1177, i32 %1173, !dbg !108
  %1179 = lshr i32 %1178, 16, !dbg !108
  %1180 = trunc nuw i32 %1179 to i16, !dbg !108
  %1181 = fdiv <2 x float> %1019, %1082, !dbg !104
  %1182 = bitcast <2 x float> %1181 to <2 x i32>, !dbg !108
  %1183 = and <2 x i32> %1182, <i32 65535, i32 2139095040>, !dbg !108
  %1184 = icmp ne <2 x i32> %1183, <i32 0, i32 2139095040>, !dbg !108
  %1185 = icmp eq <2 x i32> %1183, <i32 0, i32 2139095040>, !dbg !108
  %1186 = shufflevector <2 x i1> %1184, <2 x i1> %1185, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1187 = lshr <2 x i32> %1182, splat (i32 16), !dbg !108
  %1188 = and <2 x i32> %1187, splat (i32 1), !dbg !108
  %1189 = add nuw nsw <2 x i32> %1188, splat (i32 32767), !dbg !108
  %1190 = and <2 x i32> %1182, <i32 2139095040, i32 65535>, !dbg !108
  %1191 = icmp eq <2 x i32> %1190, <i32 2139095040, i32 0>, !dbg !108
  %1192 = icmp ne <2 x i32> %1190, <i32 2139095040, i32 0>, !dbg !108
  %1193 = shufflevector <2 x i1> %1191, <2 x i1> %1192, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1194 = shufflevector <2 x i1> %1193, <2 x i1> %1186, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1195 = select <2 x i1> %1194, <2 x i32> zeroinitializer, <2 x i32> %1189, !dbg !108
  %1196 = add <2 x i32> %1195, %1182, !dbg !108
  %1197 = and <2 x i1> %1186, %1193, !dbg !108
  %1198 = or <2 x i32> %1182, splat (i32 65536), !dbg !108
  %1199 = select <2 x i1> %1197, <2 x i32> %1198, <2 x i32> %1196, !dbg !108
  %1200 = lshr <2 x i32> %1199, splat (i32 16), !dbg !108
  %1201 = trunc nuw <2 x i32> %1200 to <2 x i16>, !dbg !108
  %1202 = bitcast float %1044 to i32, !dbg !108
  %1203 = and i32 %1202, 2139095040, !dbg !108
  %.not137 = icmp eq i32 %1203, 2139095040, !dbg !108
  %1204 = lshr i32 %1202, 16, !dbg !108
  %1205 = and i32 %1204, 1, !dbg !108
  %1206 = add nuw nsw i32 %1205, 32767, !dbg !108
  %1207 = select i1 %.not137, i32 0, i32 %1206, !dbg !108
  %1208 = add i32 %1207, %1202, !dbg !108
  %1209 = and i32 %1202, 65535, !dbg !108
  %1210 = icmp ne i32 %1209, 0, !dbg !108
  %1211 = and i1 %.not137, %1210, !dbg !108
  %1212 = or i32 %1202, 65536, !dbg !108
  %1213 = select i1 %1211, i32 %1212, i32 %1208, !dbg !108
  %1214 = lshr i32 %1213, 16, !dbg !108
  %1215 = trunc nuw i32 %1214 to i16, !dbg !108
  %1216 = bitcast float %1045 to i32, !dbg !108
  %1217 = and i32 %1216, 2139095040, !dbg !108
  %.not138 = icmp eq i32 %1217, 2139095040, !dbg !108
  %1218 = lshr i32 %1216, 16, !dbg !108
  %1219 = and i32 %1218, 1, !dbg !108
  %1220 = add nuw nsw i32 %1219, 32767, !dbg !108
  %1221 = select i1 %.not138, i32 0, i32 %1220, !dbg !108
  %1222 = add i32 %1221, %1216, !dbg !108
  %1223 = and i32 %1216, 65535, !dbg !108
  %1224 = icmp ne i32 %1223, 0, !dbg !108
  %1225 = and i1 %.not138, %1224, !dbg !108
  %1226 = or i32 %1216, 65536, !dbg !108
  %1227 = select i1 %1225, i32 %1226, i32 %1222, !dbg !108
  %1228 = lshr i32 %1227, 16, !dbg !108
  %1229 = trunc nuw i32 %1228 to i16, !dbg !108
  %1230 = fdiv <2 x float> %1020, %1082, !dbg !104
  %1231 = bitcast <2 x float> %1230 to <2 x i32>, !dbg !108
  %1232 = and <2 x i32> %1231, <i32 65535, i32 2139095040>, !dbg !108
  %1233 = icmp ne <2 x i32> %1232, <i32 0, i32 2139095040>, !dbg !108
  %1234 = icmp eq <2 x i32> %1232, <i32 0, i32 2139095040>, !dbg !108
  %1235 = shufflevector <2 x i1> %1233, <2 x i1> %1234, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1236 = lshr <2 x i32> %1231, splat (i32 16), !dbg !108
  %1237 = and <2 x i32> %1236, splat (i32 1), !dbg !108
  %1238 = add nuw nsw <2 x i32> %1237, splat (i32 32767), !dbg !108
  %1239 = and <2 x i32> %1231, <i32 2139095040, i32 65535>, !dbg !108
  %1240 = icmp eq <2 x i32> %1239, <i32 2139095040, i32 0>, !dbg !108
  %1241 = icmp ne <2 x i32> %1239, <i32 2139095040, i32 0>, !dbg !108
  %1242 = shufflevector <2 x i1> %1240, <2 x i1> %1241, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1243 = shufflevector <2 x i1> %1242, <2 x i1> %1235, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1244 = select <2 x i1> %1243, <2 x i32> zeroinitializer, <2 x i32> %1238, !dbg !108
  %1245 = add <2 x i32> %1244, %1231, !dbg !108
  %1246 = and <2 x i1> %1235, %1242, !dbg !108
  %1247 = or <2 x i32> %1231, splat (i32 65536), !dbg !108
  %1248 = select <2 x i1> %1246, <2 x i32> %1247, <2 x i32> %1245, !dbg !108
  %1249 = lshr <2 x i32> %1248, splat (i32 16), !dbg !108
  %1250 = trunc nuw <2 x i32> %1249 to <2 x i16>, !dbg !108
  %1251 = bitcast float %1046 to i32, !dbg !108
  %1252 = and i32 %1251, 2139095040, !dbg !108
  %.not141 = icmp eq i32 %1252, 2139095040, !dbg !108
  %1253 = lshr i32 %1251, 16, !dbg !108
  %1254 = and i32 %1253, 1, !dbg !108
  %1255 = add nuw nsw i32 %1254, 32767, !dbg !108
  %1256 = select i1 %.not141, i32 0, i32 %1255, !dbg !108
  %1257 = add i32 %1256, %1251, !dbg !108
  %1258 = and i32 %1251, 65535, !dbg !108
  %1259 = icmp ne i32 %1258, 0, !dbg !108
  %1260 = and i1 %.not141, %1259, !dbg !108
  %1261 = or i32 %1251, 65536, !dbg !108
  %1262 = select i1 %1260, i32 %1261, i32 %1257, !dbg !108
  %1263 = lshr i32 %1262, 16, !dbg !108
  %1264 = trunc nuw i32 %1263 to i16, !dbg !108
  %1265 = bitcast float %1047 to i32, !dbg !108
  %1266 = and i32 %1265, 2139095040, !dbg !108
  %.not142 = icmp eq i32 %1266, 2139095040, !dbg !108
  %1267 = lshr i32 %1265, 16, !dbg !108
  %1268 = and i32 %1267, 1, !dbg !108
  %1269 = add nuw nsw i32 %1268, 32767, !dbg !108
  %1270 = select i1 %.not142, i32 0, i32 %1269, !dbg !108
  %1271 = add i32 %1270, %1265, !dbg !108
  %1272 = and i32 %1265, 65535, !dbg !108
  %1273 = icmp ne i32 %1272, 0, !dbg !108
  %1274 = and i1 %.not142, %1273, !dbg !108
  %1275 = or i32 %1265, 65536, !dbg !108
  %1276 = select i1 %1274, i32 %1275, i32 %1271, !dbg !108
  %1277 = lshr i32 %1276, 16, !dbg !108
  %1278 = trunc nuw i32 %1277 to i16, !dbg !108
  %1279 = fdiv <2 x float> %1021, %1082, !dbg !104
  %1280 = bitcast <2 x float> %1279 to <2 x i32>, !dbg !108
  %1281 = and <2 x i32> %1280, <i32 65535, i32 2139095040>, !dbg !108
  %1282 = icmp ne <2 x i32> %1281, <i32 0, i32 2139095040>, !dbg !108
  %1283 = icmp eq <2 x i32> %1281, <i32 0, i32 2139095040>, !dbg !108
  %1284 = shufflevector <2 x i1> %1282, <2 x i1> %1283, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1285 = lshr <2 x i32> %1280, splat (i32 16), !dbg !108
  %1286 = and <2 x i32> %1285, splat (i32 1), !dbg !108
  %1287 = add nuw nsw <2 x i32> %1286, splat (i32 32767), !dbg !108
  %1288 = and <2 x i32> %1280, <i32 2139095040, i32 65535>, !dbg !108
  %1289 = icmp eq <2 x i32> %1288, <i32 2139095040, i32 0>, !dbg !108
  %1290 = icmp ne <2 x i32> %1288, <i32 2139095040, i32 0>, !dbg !108
  %1291 = shufflevector <2 x i1> %1289, <2 x i1> %1290, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1292 = shufflevector <2 x i1> %1291, <2 x i1> %1284, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1293 = select <2 x i1> %1292, <2 x i32> zeroinitializer, <2 x i32> %1287, !dbg !108
  %1294 = add <2 x i32> %1293, %1280, !dbg !108
  %1295 = and <2 x i1> %1284, %1291, !dbg !108
  %1296 = or <2 x i32> %1280, splat (i32 65536), !dbg !108
  %1297 = select <2 x i1> %1295, <2 x i32> %1296, <2 x i32> %1294, !dbg !108
  %1298 = lshr <2 x i32> %1297, splat (i32 16), !dbg !108
  %1299 = trunc nuw <2 x i32> %1298 to <2 x i16>, !dbg !108
  %1300 = bitcast float %1048 to i32, !dbg !108
  %1301 = and i32 %1300, 2139095040, !dbg !108
  %.not145 = icmp eq i32 %1301, 2139095040, !dbg !108
  %1302 = lshr i32 %1300, 16, !dbg !108
  %1303 = and i32 %1302, 1, !dbg !108
  %1304 = add nuw nsw i32 %1303, 32767, !dbg !108
  %1305 = select i1 %.not145, i32 0, i32 %1304, !dbg !108
  %1306 = add i32 %1305, %1300, !dbg !108
  %1307 = and i32 %1300, 65535, !dbg !108
  %1308 = icmp ne i32 %1307, 0, !dbg !108
  %1309 = and i1 %.not145, %1308, !dbg !108
  %1310 = or i32 %1300, 65536, !dbg !108
  %1311 = select i1 %1309, i32 %1310, i32 %1306, !dbg !108
  %1312 = lshr i32 %1311, 16, !dbg !108
  %1313 = trunc nuw i32 %1312 to i16, !dbg !108
  %1314 = bitcast float %1049 to i32, !dbg !108
  %1315 = and i32 %1314, 2139095040, !dbg !108
  %.not146 = icmp eq i32 %1315, 2139095040, !dbg !108
  %1316 = lshr i32 %1314, 16, !dbg !108
  %1317 = and i32 %1316, 1, !dbg !108
  %1318 = add nuw nsw i32 %1317, 32767, !dbg !108
  %1319 = select i1 %.not146, i32 0, i32 %1318, !dbg !108
  %1320 = add i32 %1319, %1314, !dbg !108
  %1321 = and i32 %1314, 65535, !dbg !108
  %1322 = icmp ne i32 %1321, 0, !dbg !108
  %1323 = and i1 %.not146, %1322, !dbg !108
  %1324 = or i32 %1314, 65536, !dbg !108
  %1325 = select i1 %1323, i32 %1324, i32 %1320, !dbg !108
  %1326 = lshr i32 %1325, 16, !dbg !108
  %1327 = trunc nuw i32 %1326 to i16, !dbg !108
  %1328 = fdiv <2 x float> %1022, %1082, !dbg !104
  %1329 = bitcast <2 x float> %1328 to <2 x i32>, !dbg !108
  %1330 = and <2 x i32> %1329, <i32 65535, i32 2139095040>, !dbg !108
  %1331 = icmp ne <2 x i32> %1330, <i32 0, i32 2139095040>, !dbg !108
  %1332 = icmp eq <2 x i32> %1330, <i32 0, i32 2139095040>, !dbg !108
  %1333 = shufflevector <2 x i1> %1331, <2 x i1> %1332, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1334 = lshr <2 x i32> %1329, splat (i32 16), !dbg !108
  %1335 = and <2 x i32> %1334, splat (i32 1), !dbg !108
  %1336 = add nuw nsw <2 x i32> %1335, splat (i32 32767), !dbg !108
  %1337 = and <2 x i32> %1329, <i32 2139095040, i32 65535>, !dbg !108
  %1338 = icmp eq <2 x i32> %1337, <i32 2139095040, i32 0>, !dbg !108
  %1339 = icmp ne <2 x i32> %1337, <i32 2139095040, i32 0>, !dbg !108
  %1340 = shufflevector <2 x i1> %1338, <2 x i1> %1339, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1341 = shufflevector <2 x i1> %1340, <2 x i1> %1333, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1342 = select <2 x i1> %1341, <2 x i32> zeroinitializer, <2 x i32> %1336, !dbg !108
  %1343 = add <2 x i32> %1342, %1329, !dbg !108
  %1344 = and <2 x i1> %1333, %1340, !dbg !108
  %1345 = or <2 x i32> %1329, splat (i32 65536), !dbg !108
  %1346 = select <2 x i1> %1344, <2 x i32> %1345, <2 x i32> %1343, !dbg !108
  %1347 = lshr <2 x i32> %1346, splat (i32 16), !dbg !108
  %1348 = trunc nuw <2 x i32> %1347 to <2 x i16>, !dbg !108
  %1349 = bitcast float %1050 to i32, !dbg !108
  %1350 = and i32 %1349, 2139095040, !dbg !108
  %.not149 = icmp eq i32 %1350, 2139095040, !dbg !108
  %1351 = lshr i32 %1349, 16, !dbg !108
  %1352 = and i32 %1351, 1, !dbg !108
  %1353 = add nuw nsw i32 %1352, 32767, !dbg !108
  %1354 = select i1 %.not149, i32 0, i32 %1353, !dbg !108
  %1355 = add i32 %1354, %1349, !dbg !108
  %1356 = and i32 %1349, 65535, !dbg !108
  %1357 = icmp ne i32 %1356, 0, !dbg !108
  %1358 = and i1 %.not149, %1357, !dbg !108
  %1359 = or i32 %1349, 65536, !dbg !108
  %1360 = select i1 %1358, i32 %1359, i32 %1355, !dbg !108
  %1361 = lshr i32 %1360, 16, !dbg !108
  %1362 = trunc nuw i32 %1361 to i16, !dbg !108
  %1363 = bitcast float %1051 to i32, !dbg !108
  %1364 = and i32 %1363, 2139095040, !dbg !108
  %.not150 = icmp eq i32 %1364, 2139095040, !dbg !108
  %1365 = lshr i32 %1363, 16, !dbg !108
  %1366 = and i32 %1365, 1, !dbg !108
  %1367 = add nuw nsw i32 %1366, 32767, !dbg !108
  %1368 = select i1 %.not150, i32 0, i32 %1367, !dbg !108
  %1369 = add i32 %1368, %1363, !dbg !108
  %1370 = and i32 %1363, 65535, !dbg !108
  %1371 = icmp ne i32 %1370, 0, !dbg !108
  %1372 = and i1 %.not150, %1371, !dbg !108
  %1373 = or i32 %1363, 65536, !dbg !108
  %1374 = select i1 %1372, i32 %1373, i32 %1369, !dbg !108
  %1375 = lshr i32 %1374, 16, !dbg !108
  %1376 = trunc nuw i32 %1375 to i16, !dbg !108
  %1377 = fdiv <2 x float> %1023, %1082, !dbg !104
  %1378 = bitcast <2 x float> %1377 to <2 x i32>, !dbg !108
  %1379 = and <2 x i32> %1378, <i32 65535, i32 2139095040>, !dbg !108
  %1380 = icmp ne <2 x i32> %1379, <i32 0, i32 2139095040>, !dbg !108
  %1381 = icmp eq <2 x i32> %1379, <i32 0, i32 2139095040>, !dbg !108
  %1382 = shufflevector <2 x i1> %1380, <2 x i1> %1381, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1383 = lshr <2 x i32> %1378, splat (i32 16), !dbg !108
  %1384 = and <2 x i32> %1383, splat (i32 1), !dbg !108
  %1385 = add nuw nsw <2 x i32> %1384, splat (i32 32767), !dbg !108
  %1386 = and <2 x i32> %1378, <i32 2139095040, i32 65535>, !dbg !108
  %1387 = icmp eq <2 x i32> %1386, <i32 2139095040, i32 0>, !dbg !108
  %1388 = icmp ne <2 x i32> %1386, <i32 2139095040, i32 0>, !dbg !108
  %1389 = shufflevector <2 x i1> %1387, <2 x i1> %1388, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1390 = shufflevector <2 x i1> %1389, <2 x i1> %1382, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1391 = select <2 x i1> %1390, <2 x i32> zeroinitializer, <2 x i32> %1385, !dbg !108
  %1392 = add <2 x i32> %1391, %1378, !dbg !108
  %1393 = and <2 x i1> %1382, %1389, !dbg !108
  %1394 = or <2 x i32> %1378, splat (i32 65536), !dbg !108
  %1395 = select <2 x i1> %1393, <2 x i32> %1394, <2 x i32> %1392, !dbg !108
  %1396 = lshr <2 x i32> %1395, splat (i32 16), !dbg !108
  %1397 = trunc nuw <2 x i32> %1396 to <2 x i16>, !dbg !108
  %1398 = bitcast float %1052 to i32, !dbg !108
  %1399 = and i32 %1398, 2139095040, !dbg !108
  %.not153 = icmp eq i32 %1399, 2139095040, !dbg !108
  %1400 = lshr i32 %1398, 16, !dbg !108
  %1401 = and i32 %1400, 1, !dbg !108
  %1402 = add nuw nsw i32 %1401, 32767, !dbg !108
  %1403 = select i1 %.not153, i32 0, i32 %1402, !dbg !108
  %1404 = add i32 %1403, %1398, !dbg !108
  %1405 = and i32 %1398, 65535, !dbg !108
  %1406 = icmp ne i32 %1405, 0, !dbg !108
  %1407 = and i1 %.not153, %1406, !dbg !108
  %1408 = or i32 %1398, 65536, !dbg !108
  %1409 = select i1 %1407, i32 %1408, i32 %1404, !dbg !108
  %1410 = lshr i32 %1409, 16, !dbg !108
  %1411 = trunc nuw i32 %1410 to i16, !dbg !108
  %1412 = bitcast float %1053 to i32, !dbg !108
  %1413 = and i32 %1412, 2139095040, !dbg !108
  %.not154 = icmp eq i32 %1413, 2139095040, !dbg !108
  %1414 = lshr i32 %1412, 16, !dbg !108
  %1415 = and i32 %1414, 1, !dbg !108
  %1416 = add nuw nsw i32 %1415, 32767, !dbg !108
  %1417 = select i1 %.not154, i32 0, i32 %1416, !dbg !108
  %1418 = add i32 %1417, %1412, !dbg !108
  %1419 = and i32 %1412, 65535, !dbg !108
  %1420 = icmp ne i32 %1419, 0, !dbg !108
  %1421 = and i1 %.not154, %1420, !dbg !108
  %1422 = or i32 %1412, 65536, !dbg !108
  %1423 = select i1 %1421, i32 %1422, i32 %1418, !dbg !108
  %1424 = lshr i32 %1423, 16, !dbg !108
  %1425 = trunc nuw i32 %1424 to i16, !dbg !108
  %1426 = fdiv <2 x float> %1024, %1082, !dbg !104
  %1427 = bitcast <2 x float> %1426 to <2 x i32>, !dbg !108
  %1428 = and <2 x i32> %1427, <i32 65535, i32 2139095040>, !dbg !108
  %1429 = icmp ne <2 x i32> %1428, <i32 0, i32 2139095040>, !dbg !108
  %1430 = icmp eq <2 x i32> %1428, <i32 0, i32 2139095040>, !dbg !108
  %1431 = shufflevector <2 x i1> %1429, <2 x i1> %1430, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1432 = lshr <2 x i32> %1427, splat (i32 16), !dbg !108
  %1433 = and <2 x i32> %1432, splat (i32 1), !dbg !108
  %1434 = add nuw nsw <2 x i32> %1433, splat (i32 32767), !dbg !108
  %1435 = and <2 x i32> %1427, <i32 2139095040, i32 65535>, !dbg !108
  %1436 = icmp eq <2 x i32> %1435, <i32 2139095040, i32 0>, !dbg !108
  %1437 = icmp ne <2 x i32> %1435, <i32 2139095040, i32 0>, !dbg !108
  %1438 = shufflevector <2 x i1> %1436, <2 x i1> %1437, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1439 = shufflevector <2 x i1> %1438, <2 x i1> %1431, <2 x i32> <i32 0, i32 3>, !dbg !108
  %1440 = select <2 x i1> %1439, <2 x i32> zeroinitializer, <2 x i32> %1434, !dbg !108
  %1441 = add <2 x i32> %1440, %1427, !dbg !108
  %1442 = and <2 x i1> %1431, %1438, !dbg !108
  %1443 = or <2 x i32> %1427, splat (i32 65536), !dbg !108
  %1444 = select <2 x i1> %1442, <2 x i32> %1443, <2 x i32> %1441, !dbg !108
  %1445 = lshr <2 x i32> %1444, splat (i32 16), !dbg !108
  %1446 = trunc nuw <2 x i32> %1445 to <2 x i16>, !dbg !108
  %1447 = bitcast float %1054 to i32, !dbg !108
  %1448 = and i32 %1447, 2139095040, !dbg !108
  %.not157 = icmp eq i32 %1448, 2139095040, !dbg !108
  %1449 = lshr i32 %1447, 16, !dbg !108
  %1450 = and i32 %1449, 1, !dbg !108
  %1451 = add nuw nsw i32 %1450, 32767, !dbg !108
  %1452 = select i1 %.not157, i32 0, i32 %1451, !dbg !108
  %1453 = add i32 %1452, %1447, !dbg !108
  %1454 = and i32 %1447, 65535, !dbg !108
  %1455 = icmp ne i32 %1454, 0, !dbg !108
  %1456 = and i1 %.not157, %1455, !dbg !108
  %1457 = or i32 %1447, 65536, !dbg !108
  %1458 = select i1 %1456, i32 %1457, i32 %1453, !dbg !108
  %1459 = lshr i32 %1458, 16, !dbg !108
  %1460 = trunc nuw i32 %1459 to i16, !dbg !108
  %1461 = and i32 %52, 192, !dbg !108
  %1462 = icmp eq i32 %1461, 0, !dbg !108
  %1463 = and i1 %1462, %100, !dbg !108
  %1464 = insertelement <4 x i16> poison, i16 %1080, i64 0, !dbg !108
  %1465 = shufflevector <2 x i16> %1103, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1466 = shufflevector <4 x i16> %1464, <4 x i16> %1465, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1467 = insertelement <4 x i16> %1466, i16 %1117, i64 3, !dbg !108
  %1468 = bitcast <4 x i16> %1467 to <4 x bfloat>, !dbg !108
  %1469 = insertelement <4 x i1> poison, i1 %1463, i64 0, !dbg !108
  %1470 = shufflevector <4 x i1> %1469, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1468, ptr addrspace(1) %1059, i32 16, <4 x i1> %1470), !dbg !108
  %1471 = insertelement <4 x i16> poison, i16 %1131, i64 0, !dbg !108
  %1472 = shufflevector <2 x i16> %1152, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1473 = shufflevector <4 x i16> %1471, <4 x i16> %1472, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1474 = insertelement <4 x i16> %1473, i16 %1166, i64 3, !dbg !108
  %1475 = bitcast <4 x i16> %1474 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1475, ptr addrspace(1) %1060, i32 16, <4 x i1> %1470), !dbg !108
  %1476 = insertelement <4 x i16> poison, i16 %1180, i64 0, !dbg !108
  %1477 = shufflevector <2 x i16> %1201, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1478 = shufflevector <4 x i16> %1476, <4 x i16> %1477, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1479 = insertelement <4 x i16> %1478, i16 %1215, i64 3, !dbg !108
  %1480 = bitcast <4 x i16> %1479 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1480, ptr addrspace(1) %1061, i32 16, <4 x i1> %1470), !dbg !108
  %1481 = insertelement <4 x i16> poison, i16 %1229, i64 0, !dbg !108
  %1482 = shufflevector <2 x i16> %1250, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1483 = shufflevector <4 x i16> %1481, <4 x i16> %1482, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1484 = insertelement <4 x i16> %1483, i16 %1264, i64 3, !dbg !108
  %1485 = bitcast <4 x i16> %1484 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1485, ptr addrspace(1) %1062, i32 16, <4 x i1> %1470), !dbg !108
  %1486 = insertelement <4 x i16> poison, i16 %1278, i64 0, !dbg !108
  %1487 = shufflevector <2 x i16> %1299, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1488 = shufflevector <4 x i16> %1486, <4 x i16> %1487, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1489 = insertelement <4 x i16> %1488, i16 %1313, i64 3, !dbg !108
  %1490 = bitcast <4 x i16> %1489 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1490, ptr addrspace(1) %1063, i32 16, <4 x i1> %1470), !dbg !108
  %1491 = insertelement <4 x i16> poison, i16 %1327, i64 0, !dbg !108
  %1492 = shufflevector <2 x i16> %1348, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1493 = shufflevector <4 x i16> %1491, <4 x i16> %1492, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1494 = insertelement <4 x i16> %1493, i16 %1362, i64 3, !dbg !108
  %1495 = bitcast <4 x i16> %1494 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1495, ptr addrspace(1) %1064, i32 16, <4 x i1> %1470), !dbg !108
  %1496 = insertelement <4 x i16> poison, i16 %1376, i64 0, !dbg !108
  %1497 = shufflevector <2 x i16> %1397, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1498 = shufflevector <4 x i16> %1496, <4 x i16> %1497, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1499 = insertelement <4 x i16> %1498, i16 %1411, i64 3, !dbg !108
  %1500 = bitcast <4 x i16> %1499 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1500, ptr addrspace(1) %1065, i32 16, <4 x i1> %1470), !dbg !108
  %1501 = insertelement <4 x i16> poison, i16 %1425, i64 0, !dbg !108
  %1502 = shufflevector <2 x i16> %1446, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !108
  %1503 = shufflevector <4 x i16> %1501, <4 x i16> %1502, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !108
  %1504 = insertelement <4 x i16> %1503, i16 %1460, i64 3, !dbg !108
  %1505 = bitcast <4 x i16> %1504 to <4 x bfloat>, !dbg !108
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %1505, ptr addrspace(1) %1066, i32 16, <4 x i1> %1470), !dbg !108
  br label %common.ret, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <1 x i32> @llvm.masked.load.v1i32.p1(ptr addrspace(1) nocapture, i32 immarg, <1 x i1>, <1 x i32>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <8 x bfloat> @llvm.masked.load.v8bf16.p1(ptr addrspace(1) nocapture, i32 immarg, <8 x i1>, <8 x bfloat>) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #0

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x16bf16.1k(<4 x i16>, <4 x i16>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #5

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.swizzle(i32, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v4bf16.p1(<4 x bfloat>, ptr addrspace(1) nocapture, i32 immarg, <4 x i1>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.exp2.v2f32(<2 x float>) #7

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "triton_unified_attention.py", directory: "/usr/local/lib/python3.12/dist-packages/vllm/attention/ops")
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !3, file: !3, line: 260, type: !5, scopeLine: 260, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "kernel_unified_attention_2d", linkageName: "kernel_unified_attention_2d", scope: !3, file: !3, line: 52, type: !5, scopeLine: 52, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DILocation(line: 97, column: 39, scope: !7)
!9 = !DILocation(line: 98, column: 32, scope: !7)
!10 = !DILocation(line: 38, column: 17, scope: !11, inlinedAt: !12)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!12 = !DILocation(line: 101, column: 36, scope: !7)
!13 = !DILocation(line: 39, column: 22, scope: !11, inlinedAt: !12)
!14 = !DILocation(line: 39, column: 32, scope: !11, inlinedAt: !12)
!15 = !DILocation(line: 40, column: 44, scope: !11, inlinedAt: !12)
!16 = !DILocation(line: 40, column: 22, scope: !11, inlinedAt: !12)
!17 = !DILocation(line: 41, column: 25, scope: !11, inlinedAt: !12)
!18 = !DILocation(line: 41, column: 35, scope: !11, inlinedAt: !12)
!19 = !DILocation(line: 43, column: 22, scope: !11, inlinedAt: !12)
!20 = !DILocation(line: 43, column: 11, scope: !11, inlinedAt: !12)
!21 = !DILocation(line: 48, column: 18, scope: !11, inlinedAt: !12)
!22 = !DILocation(line: 104, column: 32, scope: !7)
!23 = !DILocation(line: 103, column: 32, scope: !7)
!24 = !DILocation(line: 104, column: 44, scope: !7)
!25 = !DILocation(line: 104, column: 54, scope: !7)
!26 = !DILocation(line: 106, column: 45, scope: !7)
!27 = !DILocation(line: 109, column: 74, scope: !7)
!28 = !DILocation(line: 109, column: 42, scope: !7)
!29 = !DILocation(line: 112, column: 10, scope: !7)
!30 = !DILocation(line: 114, column: 27, scope: !7)
!31 = !DILocation(line: 114, column: 38, scope: !7)
!32 = !DILocation(line: 0, scope: !7)
!33 = !DILocation(line: 117, column: 26, scope: !7)
!34 = !DILocation(line: 118, column: 26, scope: !7)
!35 = !DILocation(line: 119, column: 56, scope: !7)
!36 = !DILocation(line: 119, column: 46, scope: !7)
!37 = !DILocation(line: 121, column: 52, scope: !7)
!38 = !DILocation(line: 122, column: 35, scope: !7)
!39 = !DILocation(line: 123, column: 17, scope: !7)
!40 = !DILocation(line: 123, column: 8, scope: !7)
!41 = !DILocation(line: 124, column: 46, scope: !7)
!42 = !DILocation(line: 125, column: 46, scope: !7)
!43 = !DILocation(line: 125, column: 63, scope: !7)
!44 = !DILocation(line: 128, column: 40, scope: !7)
!45 = !DILocation(line: 129, column: 45, scope: !7)
!46 = !DILocation(line: 134, column: 57, scope: !7)
!47 = !DILocation(line: 133, column: 20, scope: !7)
!48 = !DILocation(line: 133, column: 8, scope: !7)
!49 = !DILocation(line: 138, column: 35, scope: !7)
!50 = !DILocation(line: 145, column: 37, scope: !7)
!51 = !DILocation(line: 145, column: 22, scope: !7)
!52 = !DILocation(line: 148, column: 28, scope: !7)
!53 = !DILocation(line: 163, column: 39, scope: !7)
!54 = !DILocation(line: 164, column: 45, scope: !7)
!55 = !DILocation(line: 168, column: 56, scope: !7)
!56 = !DILocation(line: 22, column: 20, scope: !11, inlinedAt: !57)
!57 = !DILocation(line: 173, column: 45, scope: !7)
!58 = !DILocation(line: 22, column: 26, scope: !11, inlinedAt: !57)
!59 = !DILocation(line: 178, column: 56, scope: !7)
!60 = !DILocation(line: 183, column: 34, scope: !7)
!61 = !DILocation(line: 185, column: 38, scope: !7)
!62 = !DILocation(line: 188, column: 34, scope: !7)
!63 = !DILocation(line: 190, column: 38, scope: !7)
!64 = !DILocation(line: 220, column: 55, scope: !7)
!65 = !DILocation(line: 220, column: 76, scope: !7)
!66 = !DILocation(line: 176, column: 22, scope: !7)
!67 = !DILocation(line: 178, column: 37, scope: !7)
!68 = !DILocation(line: 182, column: 41, scope: !7)
!69 = !DILocation(line: 187, column: 41, scope: !7)
!70 = !DILocation(line: 193, column: 41, scope: !7)
!71 = !DILocation(line: 193, column: 25, scope: !7)
!72 = !DILocation(line: 206, column: 43, scope: !7)
!73 = !DILocation(line: 206, column: 25, scope: !7)
!74 = !DILocation(line: 178, column: 77, scope: !7)
!75 = !DILocation(line: 218, column: 25, scope: !7)
!76 = !DILocation(line: 218, column: 38, scope: !7)
!77 = !DILocation(line: 220, column: 41, scope: !7)
!78 = !DILocation(line: 225, column: 31, scope: !7)
!79 = !DILocation(line: 225, column: 21, scope: !7)
!80 = !DILocation(line: 225, column: 13, scope: !7)
!81 = !DILocation(line: 230, column: 69, scope: !7)
!82 = !DILocation(line: 231, column: 24, scope: !7)
!83 = !DILocation(line: 163, column: 27, scope: !84, inlinedAt: !87)
!84 = distinct !DILexicalBlockFile(scope: !86, file: !85, discriminator: 0)
!85 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.12/dist-packages/triton/language")
!86 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!87 = !DILocation(line: 254, column: 35, scope: !7)
!88 = !DILocation(line: 184, column: 40, scope: !86, inlinedAt: !87)
!89 = !DILocation(line: 254, column: 28, scope: !7)
!90 = !DILocation(line: 257, column: 29, scope: !7)
!91 = !DILocation(line: 257, column: 49, scope: !7)
!92 = !DILocation(line: 260, column: 23, scope: !7)
!93 = !DILocation(line: 260, column: 19, scope: !7)
!94 = !DILocation(line: 266, column: 27, scope: !7)
!95 = !DILocation(line: 266, column: 23, scope: !7)
!96 = !DILocation(line: 269, column: 20, scope: !7)
!97 = !DILocation(line: 276, column: 27, scope: !7)
!98 = !DILocation(line: 276, column: 37, scope: !7)
!99 = !DILocation(line: 256, column: 15, scope: !84, inlinedAt: !100)
!100 = !DILocation(line: 263, column: 21, scope: !7)
!101 = !DILocation(line: 267, column: 36, scope: !86, inlinedAt: !100)
!102 = !DILocation(line: 272, column: 16, scope: !7)
!103 = !DILocation(line: 272, column: 24, scope: !7)
!104 = !DILocation(line: 279, column: 16, scope: !7)
!105 = !DILocation(line: 284, column: 47, scope: !7)
!106 = !DILocation(line: 285, column: 47, scope: !7)
!107 = !DILocation(line: 289, column: 21, scope: !7)
!108 = !DILocation(line: 290, column: 8, scope: !7)
!109 = !DILocation(line: 288, column: 4, scope: !7)
